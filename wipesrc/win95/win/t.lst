
Module: D:\wipesrc\WIN95\win\win.c
Group: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: _TEXT  BYTE USE32  000043b3 bytes  
 0000                    _ICDecompressEx@56:
 0000  53                                push    ebx
 0001  56                                push    esi
 0002  57                                push    edi
 0003  55                                push    ebp
 0004  89 e5                             mov     ebp,esp
 0006  81 ec 38 00 00 00                 sub     esp,00000038H
 000c  8b 45 18                          mov     eax,+18H[ebp]
 000f  89 45 c8                          mov     -38H[ebp],eax
 0012  8b 45 1c                          mov     eax,+1cH[ebp]
 0015  89 45 cc                          mov     -34H[ebp],eax
 0018  8b 45 20                          mov     eax,+20H[ebp]
 001b  89 45 d0                          mov     -30H[ebp],eax
 001e  8b 45 24                          mov     eax,+24H[ebp]
 0021  89 45 ec                          mov     -14H[ebp],eax
 0024  8b 45 28                          mov     eax,+28H[ebp]
 0027  89 45 f0                          mov     -10H[ebp],eax
 002a  8b 45 2c                          mov     eax,+2cH[ebp]
 002d  89 45 f4                          mov     -0cH[ebp],eax
 0030  8b 45 30                          mov     eax,+30H[ebp]
 0033  89 45 f8                          mov     -8H[ebp],eax
 0036  8b 45 34                          mov     eax,+34H[ebp]
 0039  89 45 d4                          mov     -2cH[ebp],eax
 003c  8b 45 38                          mov     eax,+38H[ebp]
 003f  89 45 d8                          mov     -28H[ebp],eax
 0042  8b 45 3c                          mov     eax,+3cH[ebp]
 0045  89 45 dc                          mov     -24H[ebp],eax
 0048  8b 45 40                          mov     eax,+40H[ebp]
 004b  89 45 e0                          mov     -20H[ebp],eax
 004e  8b 45 44                          mov     eax,+44H[ebp]
 0051  89 45 e4                          mov     -1cH[ebp],eax
 0054  8b 45 48                          mov     eax,+48H[ebp]
 0057  89 45 e8                          mov     -18H[ebp],eax
 005a  6a 34                             push    00000034H
 005c  8d 45 c8                          lea     eax,-38H[ebp]
 005f  50                                push    eax
 0060  68 3e 40 00 00                    push    0000403eH
 0065  8b 45 14                          mov     eax,+14H[ebp]
 0068  50                                push    eax
 0069  e8 00 00 00 00                    call    _ICSendMessage@16
 006e  89 45 fc                          mov     -4H[ebp],eax
 0071  8b 45 fc                          mov     eax,-4H[ebp]
 0074  89 ec                             mov     esp,ebp
 0076  5d                                pop     ebp
 0077  5f                                pop     edi
 0078  5e                                pop     esi
 0079  5b                                pop     ebx
 007a  c2 38 00                          ret     0038H
 007d                    _ICDecompressExBegin@56:
 007d  53                                push    ebx
 007e  56                                push    esi
 007f  57                                push    edi
 0080  55                                push    ebp
 0081  89 e5                             mov     ebp,esp
 0083  81 ec 38 00 00 00                 sub     esp,00000038H
 0089  8b 45 18                          mov     eax,+18H[ebp]
 008c  89 45 c8                          mov     -38H[ebp],eax
 008f  8b 45 1c                          mov     eax,+1cH[ebp]
 0092  89 45 cc                          mov     -34H[ebp],eax
 0095  8b 45 20                          mov     eax,+20H[ebp]
 0098  89 45 d0                          mov     -30H[ebp],eax
 009b  8b 45 24                          mov     eax,+24H[ebp]
 009e  89 45 ec                          mov     -14H[ebp],eax
 00a1  8b 45 28                          mov     eax,+28H[ebp]
 00a4  89 45 f0                          mov     -10H[ebp],eax
 00a7  8b 45 2c                          mov     eax,+2cH[ebp]
 00aa  89 45 f4                          mov     -0cH[ebp],eax
 00ad  8b 45 30                          mov     eax,+30H[ebp]
 00b0  89 45 f8                          mov     -8H[ebp],eax
 00b3  8b 45 34                          mov     eax,+34H[ebp]
 00b6  89 45 d4                          mov     -2cH[ebp],eax
 00b9  8b 45 38                          mov     eax,+38H[ebp]
 00bc  89 45 d8                          mov     -28H[ebp],eax
 00bf  8b 45 3c                          mov     eax,+3cH[ebp]
 00c2  89 45 dc                          mov     -24H[ebp],eax
 00c5  8b 45 40                          mov     eax,+40H[ebp]
 00c8  89 45 e0                          mov     -20H[ebp],eax
 00cb  8b 45 44                          mov     eax,+44H[ebp]
 00ce  89 45 e4                          mov     -1cH[ebp],eax
 00d1  8b 45 48                          mov     eax,+48H[ebp]
 00d4  89 45 e8                          mov     -18H[ebp],eax
 00d7  6a 34                             push    00000034H
 00d9  8d 45 c8                          lea     eax,-38H[ebp]
 00dc  50                                push    eax
 00dd  68 3c 40 00 00                    push    0000403cH
 00e2  8b 45 14                          mov     eax,+14H[ebp]
 00e5  50                                push    eax
 00e6  e8 00 00 00 00                    call    _ICSendMessage@16
 00eb  89 45 fc                          mov     -4H[ebp],eax
 00ee  8b 45 fc                          mov     eax,-4H[ebp]
 00f1  89 ec                             mov     esp,ebp
 00f3  5d                                pop     ebp
 00f4  5f                                pop     edi
 00f5  5e                                pop     esi
 00f6  5b                                pop     ebx
 00f7  c2 38 00                          ret     0038H
 00fa                    _ICDecompressExQuery@56:
 00fa  53                                push    ebx
 00fb  56                                push    esi
 00fc  57                                push    edi
 00fd  55                                push    ebp
 00fe  89 e5                             mov     ebp,esp
 0100  81 ec 38 00 00 00                 sub     esp,00000038H
 0106  8b 45 18                          mov     eax,+18H[ebp]
 0109  89 45 c8                          mov     -38H[ebp],eax
 010c  8b 45 1c                          mov     eax,+1cH[ebp]
 010f  89 45 cc                          mov     -34H[ebp],eax
 0112  8b 45 20                          mov     eax,+20H[ebp]
 0115  89 45 d0                          mov     -30H[ebp],eax
 0118  8b 45 24                          mov     eax,+24H[ebp]
 011b  89 45 ec                          mov     -14H[ebp],eax
 011e  8b 45 28                          mov     eax,+28H[ebp]
 0121  89 45 f0                          mov     -10H[ebp],eax
 0124  8b 45 2c                          mov     eax,+2cH[ebp]
 0127  89 45 f4                          mov     -0cH[ebp],eax
 012a  8b 45 30                          mov     eax,+30H[ebp]
 012d  89 45 f8                          mov     -8H[ebp],eax
 0130  8b 45 34                          mov     eax,+34H[ebp]
 0133  89 45 d4                          mov     -2cH[ebp],eax
 0136  8b 45 38                          mov     eax,+38H[ebp]
 0139  89 45 d8                          mov     -28H[ebp],eax
 013c  8b 45 3c                          mov     eax,+3cH[ebp]
 013f  89 45 dc                          mov     -24H[ebp],eax
 0142  8b 45 40                          mov     eax,+40H[ebp]
 0145  89 45 e0                          mov     -20H[ebp],eax
 0148  8b 45 44                          mov     eax,+44H[ebp]
 014b  89 45 e4                          mov     -1cH[ebp],eax
 014e  8b 45 48                          mov     eax,+48H[ebp]
 0151  89 45 e8                          mov     -18H[ebp],eax
 0154  6a 34                             push    00000034H
 0156  8d 45 c8                          lea     eax,-38H[ebp]
 0159  50                                push    eax
 015a  68 3d 40 00 00                    push    0000403dH
 015f  8b 45 14                          mov     eax,+14H[ebp]
 0162  50                                push    eax
 0163  e8 00 00 00 00                    call    _ICSendMessage@16
 0168  89 45 fc                          mov     -4H[ebp],eax
 016b  8b 45 fc                          mov     eax,-4H[ebp]
 016e  89 ec                             mov     esp,ebp
 0170  5d                                pop     ebp
 0171  5f                                pop     edi
 0172  5e                                pop     esi
 0173  5b                                pop     ebx
 0174  c2 38 00                          ret     0038H
 0177                    _ICDrawSuggestFormat@32:
 0177  53                                push    ebx
 0178  56                                push    esi
 0179  57                                push    edi
 017a  55                                push    ebp
 017b  89 e5                             mov     ebp,esp
 017d  81 ec 20 00 00 00                 sub     esp,00000020H
 0183  8b 45 18                          mov     eax,+18H[ebp]
 0186  89 45 e0                          mov     -20H[ebp],eax
 0189  8b 45 1c                          mov     eax,+1cH[ebp]
 018c  89 45 e4                          mov     -1cH[ebp],eax
 018f  8b 45 20                          mov     eax,+20H[ebp]
 0192  89 45 e8                          mov     -18H[ebp],eax
 0195  8b 45 24                          mov     eax,+24H[ebp]
 0198  89 45 ec                          mov     -14H[ebp],eax
 019b  8b 45 28                          mov     eax,+28H[ebp]
 019e  89 45 f0                          mov     -10H[ebp],eax
 01a1  8b 45 2c                          mov     eax,+2cH[ebp]
 01a4  89 45 f4                          mov     -0cH[ebp],eax
 01a7  8b 45 30                          mov     eax,+30H[ebp]
 01aa  89 45 f8                          mov     -8H[ebp],eax
 01ad  6a 1c                             push    0000001cH
 01af  8d 45 e0                          lea     eax,-20H[ebp]
 01b2  50                                push    eax
 01b3  68 32 40 00 00                    push    00004032H
 01b8  8b 45 14                          mov     eax,+14H[ebp]
 01bb  50                                push    eax
 01bc  e8 00 00 00 00                    call    _ICSendMessage@16
 01c1  89 45 fc                          mov     -4H[ebp],eax
 01c4  8b 45 fc                          mov     eax,-4H[ebp]
 01c7  89 ec                             mov     esp,ebp
 01c9  5d                                pop     ebp
 01ca  5f                                pop     edi
 01cb  5e                                pop     esi
 01cc  5b                                pop     ebx
 01cd  c2 20 00                          ret     0020H
 01d0                    _ICSetStatusProc@16:
 01d0  53                                push    ebx
 01d1  56                                push    esi
 01d2  57                                push    edi
 01d3  55                                push    ebp
 01d4  89 e5                             mov     ebp,esp
 01d6  81 ec 10 00 00 00                 sub     esp,00000010H
 01dc  8b 45 18                          mov     eax,+18H[ebp]
 01df  89 45 f0                          mov     -10H[ebp],eax
 01e2  8b 45 1c                          mov     eax,+1cH[ebp]
 01e5  89 45 f4                          mov     -0cH[ebp],eax
 01e8  8b 45 20                          mov     eax,+20H[ebp]
 01eb  89 45 f8                          mov     -8H[ebp],eax
 01ee  6a 0c                             push    0000000cH
 01f0  8d 45 f0                          lea     eax,-10H[ebp]
 01f3  50                                push    eax
 01f4  68 48 40 00 00                    push    00004048H
 01f9  8b 45 14                          mov     eax,+14H[ebp]
 01fc  50                                push    eax
 01fd  e8 00 00 00 00                    call    _ICSendMessage@16
 0202  89 45 fc                          mov     -4H[ebp],eax
 0205  8b 45 fc                          mov     eax,-4H[ebp]
 0208  89 ec                             mov     esp,ebp
 020a  5d                                pop     ebp
 020b  5f                                pop     edi
 020c  5e                                pop     esi
 020d  5b                                pop     ebx
 020e  c2 10 00                          ret     0010H

#define NAME "WIPEOUT"
#define TITLE "WIPEOUT '95"
#define DBG				0

#define WINVER 0x0400
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <windowsx.h>
#include "c:\msdev\include\mmsystem.h"
#include <vfw.h>
#include <mciavi.h>
#include <ddraw.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include "resource.h"
#include "winh.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <io.h>
#if USE_ATI
#include <math.h>

#include "ati3dcif.h"

#define	BLACK_NOT_DRAWN	1
#define	BLACK1_TRANSL	2
#define	BLACK2_TRANSL	3
#define	BLACK3_TRANSL	4
#define	BLACK4_TRANSL	5
#define	BLACK5_TRANSL	6
#define	BLACK6_TRANSL	7
#define	WHITE1_TRANSL	8
#define	WHITE2_TRANSL	9
#define	WHITE3_TRANSL	10
#define	WHITE4_TRANSL	11
#define	WHITE5_TRANSL	12
#define	WHITE6_TRANSL	13
#define	WHITE7_TRANSL	14
#define	WHITE8_TRANSL	15
#define	RED_TRANSL		16
#define	BRIGHT_RED_TRANSL	17
#define	YELLOW_TRANSL	18
#define	YELLOW_WHITE_TRANSL	19
#define	BLUE_TRANSL		20
#define	PURPLE_TRANSL	21
#define	UNUSED1_TRANSL	22
#define	UNUSED2_TRANSL	23
#define	UNUSED3_TRANSL	24
#define	UNUSED4_TRANSL	25


//#pragma aux randy parm [eax] modify exact [ebx edx] value [eax];

typedef struct {
	LPDIRECTDRAWSURFACE	lpDDSTex;
	DDSURFACEDESC       ddsd;
	C3D_HTX				hTX;
} TEXTURE, * PTEXTURE;

TEXTURE gTex[25];

extern char JJSTextureTable[];

typedef struct
{
	unsigned long   tag;
	unsigned char   r0, g0, b0, code;
	short	   x0, y0;
	short	   x1, y1;
	short	   x2, y2;
	short	   x3, y3;
}	       POLY_F4;	/* Flat Quadrangle */


typedef struct
{
	unsigned long   tag;
	unsigned char   r0, g0, b0, code;
	short	   x0, y0;
	unsigned char   u0, v0;
	unsigned short  clut;
	short	   x1, y1;
	unsigned char   u1, v1;
	unsigned short  tpage;
	short	   x2, y2;
	unsigned char   u2, v2;
	unsigned short  pad1;
	short	   x3, y3;
	unsigned char   u3, v3;
	unsigned short  pad2;
}	       POLY_FT4;       /* Flat Textured Quadrangle */

typedef struct {
	unsigned long	tag;
	unsigned char	r0, g0, b0, code;
	short	x0, 	y0;
	unsigned char	r1, g1, b1, pad1;
	short	x1,	y1;
	unsigned char	r2, g2, b2, pad2;
	short	x2,	y2;
} POLY_G3;				/* Gouraud Triangle */

typedef struct {
	unsigned long	tag;
	unsigned char	r0, g0, b0, code;
	short	x0, 	y0;
	unsigned char	r1, g1, b1, pad1;
	short	x1,	y1;
	unsigned char	r2, g2, b2, pad2;
	short	x2,	y2;
	unsigned char	r3, g3, b3, pad3;
	short	x3,	y3;
} POLY_G4;				/* Gouraud Quadrangle */

typedef struct {
	unsigned long	tag;
	unsigned char	r0, g0, b0, code;
	short	x0, 	y0;
	unsigned char	u0, v0;	unsigned short	clut;
	unsigned char	r1, g1, b1, p1;
	short	x1,	y1;
	unsigned char	u1, v1;	unsigned short	tpage;
	unsigned char	r2, g2, b2, p2;
	short	x2,	y2;
	unsigned char	u2, v2;	unsigned short	pad2;
} POLY_GT3;				/* Gouraud Textured Triangle */

typedef struct {
	unsigned long	tag;
	unsigned char	r0, g0, b0, code;
	short	x0, 	y0;
	unsigned char	u0, v0;	unsigned short	clut;
	unsigned char	r1, g1, b1, p1;
	short	x1,	y1;
	unsigned char	u1, v1;	unsigned short	tpage;
	unsigned char	r2, g2, b2, p2;
	short	x2,	y2;
	unsigned char	u2, v2;	unsigned short	pad2;
	unsigned char	r3, g3, b3, p3;
	short	x3,	y3;
	unsigned char	u3, v3;	unsigned short	pad3;
} POLY_GT4;				/* Gouraud Textured Quadrangle */

typedef struct {
	unsigned long	tag;
	unsigned char	r0, g0, b0, code;
	short	x0, y0;
	unsigned char	u0, v0;
	unsigned short	clut;
	short	x1,	y1;
	unsigned char	u1, v1;
	unsigned short	tpage;
	short	x2,	y2;
	unsigned char	u2, v2;
	unsigned short	pad1;
} POLY_FT3;				/* Flat Textured Triangle */

typedef struct {
	unsigned long	tag;
	unsigned char	r0, g0, b0, code;
	short	x0, 	y0;
	unsigned char	u0, v0;	unsigned short	clut;
	short	w,	h;
} SPRT;					/* free size Sprite */

typedef struct {
	unsigned long	tag;
	unsigned char	r0, g0, b0, code;
	short	x0, 	y0;
	unsigned char	u0, v0;	unsigned short	clut;
} SPRT_8;				/* 8x8 Sprite */
	       
char	    gszErrMsg[64];
BOOL	    gbCIFInit;
C3D_HRC	 ghRC;

#define VBUFSIZE 40
#pragma pack(push)
#pragma pack (8)
C3D_VTCF	testarray[VBUFSIZE];
#pragma pack(pop);

C3D_PVTCF       testlist[VBUFSIZE];
C3D_EPRIM       quad = C3D_EPRIM_NUM;
C3D_ESHADE      shade = C3D_ESH_NUM;
C3D_ETLIGHT	light = C3D_ETL_NONE;
C3D_EADST eDstAlpha = C3D_EADST_ZERO;
C3D_EASRC eSrcAlpha = C3D_EASRC_ONE;
//C3D_ETPERSPCOR ePerspCor = C3D_ETPC_NONE;
C3D_ETPERSPCOR ePerspCor = C3D_ETPC_TWO;
C3D_ETEXFILTER eTexFilter = C3D_ETFILT_MINPNT_MAGPNT;

short texpage=-1;
short numvert=0;
short tester=0;
typedef struct {
	unsigned short blue:5;
	unsigned short green:5;
	unsigned short red:5;
} BIT15;

BIT15 ATIpalette[256];
BOOL Rendering=FALSE;
BOOL bTexEn=FALSE;
BOOL trans = FALSE;
BOOL MPEGplaying;
HWND g_hwndMCIWnd;
DWORD dwMCIWndStyle;
#endif

extern char *DepthFadeTble,WhitePal;
extern short int CurrTrkNo;
short randlist[2000];
short *randnum;
short ctr;
char *SaveDirBase;
//SJR

float joyModVal;
extern short JoyCentreX, JoyCentreY;
extern short	left_scale, right_scale;
extern float	left_scale_factor, right_scale_factor;
extern unsigned short JoyXVal, JoyYVal;
short JoyButton1, JoyButton2;

HANDLE gInstance;

#define	HIGH_SENS	8
#define	MEDIUM_SENS	16
#define	LOW_SENS	32

/* Type/Structure Definitions. */
typedef struct {
	unsigned short int	jX;
	unsigned short int	jY;
	unsigned short int	jDir;
	unsigned short int	jButton1;
	unsigned short int	jButton2;
} JOYSTICK;

typedef struct {
	unsigned short int	mX;
	unsigned short int	mY;
	unsigned short int	mDir;
	unsigned short int	mButton1;
	unsigned short int	mButton2;
	unsigned short int	mButton3;
} MOUSE;

typedef struct {
	long int	JoyUp;
	long int	JoyDown;
	long int	JoyLeft;
	long int	JoyRight;
	long int	JoyButton1;
	long int	JoyButton2;
	long int	JoyButton3;
	long int	JoyButton4;
} JOYSTICK_CONFIG;

typedef struct {
	long int	MouseUp;
	long int	MouseDown;
	long int	MouseLeft;
	long int	MouseRight;
	long int	MouseLeftButton;
	long int	MouseMiddleButton;
	long int	MouseRightButton;
	long int	MouseDummy;
} MOUSE_CONFIG;

#define _DEVICE_ON 1
#define OK 0
#define SONY_PAD 0x41
extern MOUSE etc_Mouse1;
extern JOYSTICK etc_Joy1;
extern unsigned long int etc_Mouse1Register;
extern unsigned long int etc_Joystick1Register;
extern MOUSE_CONFIG etc_Mouse1Config;
extern JOYSTICK_CONFIG etc_Joy1Config;
extern char *etc_TransferBuffer1;
extern char mouse_sensitivity;
extern unsigned char etc_Mouse1Switch;		/* id = 3 */
extern unsigned char etc_Joystick1Switch;
extern unsigned char etc_InputDeviceSelect;

#define TIMER_ID	1
#define TIMER_RATE      1

#define	GAME_WIDTH	320
#define GAME_HEIGHT	240

extern void     Set_Device(int tmp);
extern void     init3d(void);
extern void     oldmain(void);
extern void     QuitToDos(void);
extern void     pmkey(char);
extern void     ResetPitch(void);

extern int      WinPitch;
extern short    WinWidth;
extern short    WinHeight;
extern short    WinHeightX2;
int	     RealPitch;
int	     RealBackPitch;
char	   *DebugScreen, *RealScreen;

LPDIRECTDRAW    lpDD;	   // DirectDraw object
LPDIRECTDRAWSURFACE lpDDSPrimary;       // DirectDraw primary surface
LPDIRECTDRAWSURFACE lpDDSBack;  // DirectDraw back surface
#if !USE_ATI
LPDIRECTDRAWPALETTE lpDDPalette;
#endif
LPDIRECTDRAWSURFACE lpBack_Buffer;      // Directdraw 320X200 Surface for the  menu thing.
BOOL	    bActive;	// is application active?
BOOL backLocked=FALSE;
extern char    *CurBuffer, *CurBufferJ;
PALETTEENTRY    ddPalette[256];
char	   *backscreen;

extern long     NeedKeys;

extern void     finiSndObjects(void);


/*
 * finiObjects
 * 
 * finished with all objects we use; release them
 */
static void     finiObjects(void)
{
#if USE_ATI
	int i;
	
 0211  53                finiObjects_    push    ebx
 0212  51                                push    ecx
 0213  52                                push    edx
 0214  56                                push    esi
 0215  57                                push    edi
 0216  55                                push    ebp
 0217  89 e5                             mov     ebp,esp
 0219  81 ec 04 00 00 00                 sub     esp,00000004H

	CloseATI3DCIF();
#endif
 021f  e8 00 00 00 00                    call    CloseATI3DCIF_

	if (lpDD != NULL)
	{
 0224  83 3d 00 00 00 00 
       00                                cmp     dword ptr _lpDD,00000000H
 022b  0f 84 9c 00 00 00                 je      L8

		if (lpDDSPrimary != NULL)
		{
 0231  83 3d 00 00 00 00 
       00                                cmp     dword ptr _lpDDSPrimary,00000000H
 0238  74 1a                             je      L1

			lpDDSPrimary->lpVtbl->Release(lpDDSPrimary);
 023a  a1 00 00 00 00                    mov     eax,_lpDDSPrimary
 023f  8b 00                             mov     eax,[eax]
 0241  ff 35 00 00 00 00                 push    _lpDDSPrimary
 0247  ff 50 08                          call    dword ptr +8H[eax]

			lpDDSPrimary = NULL;
		}
 024a  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _lpDDSPrimary,00000000H

		if (lpBack_Buffer != NULL)
		{
 0254  83 3d 00 00 00 00 
       00                L1              cmp     dword ptr _lpBack_Buffer,00000000H
 025b  74 1a                             je      L2

			lpBack_Buffer->lpVtbl->Release(lpBack_Buffer);
 025d  a1 00 00 00 00                    mov     eax,_lpBack_Buffer
 0262  8b 00                             mov     eax,[eax]
 0264  ff 35 00 00 00 00                 push    _lpBack_Buffer
 026a  ff 50 08                          call    dword ptr +8H[eax]

			lpBack_Buffer = NULL;
		}
#if USE_ATI
 026d  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _lpBack_Buffer,00000000H

		for(i=0;i<25;++i)
 0277  c7 45 fc 00 00 00 
       00                L2              mov     dword ptr -4H[ebp],00000000H
 027e  83 7d fc 19       L3              cmp     dword ptr -4H[ebp],00000019H
 0282  7c 07                             jl      L5
 0284  eb 2d                             jmp     L7
 0286  ff 45 fc          L4              inc     dword ptr -4H[ebp]
 0289  eb f3                             jmp     L3

			if (gTex[i].lpDDSTex != NULL)
			{
 028b  6b 45 fc 74       L5              imul    eax,-4H[ebp],74H
 028f  83 b8 00 00 00 00 
       00                                cmp     dword ptr _gTex[eax],00000000H
 0296  74 19                             je      L6

				gTex[i].lpDDSTex->lpVtbl->Release(gTex[i].lpDDSTex);
 0298  6b 45 fc 74                       imul    eax,-4H[ebp],74H
 029c  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 02a2  8b 10                             mov     edx,[eax]
 02a4  6b 45 fc 74                       imul    eax,-4H[ebp],74H
 02a8  ff b0 00 00 00 00                 push    _gTex[eax]
 02ae  ff 52 08                          call    dword ptr +8H[edx]

			}
#endif
 02b1  eb d3             L6              jmp     L4

		lpDD->lpVtbl->Release(lpDD);
 02b3  a1 00 00 00 00    L7              mov     eax,_lpDD
 02b8  8b 00                             mov     eax,[eax]
 02ba  ff 35 00 00 00 00                 push    _lpDD
 02c0  ff 50 08                          call    dword ptr +8H[eax]

		lpDD = NULL;
	}
 02c3  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _lpDD,00000000H

}			       /* finiObjects */

char	    szMsg[] = "Page Flipping Test: Press F12 to exit";
char	    szFrontMsg[] = "Front buffer (F12 to quit)";
char	    szBackMsg[] = "Back buffer (F12 to quit)";

 02cd  89 ec             L8              mov     esp,ebp
 02cf  5d                                pop     ebp
 02d0  5f                                pop     edi
 02d1  5e                                pop     esi
 02d2  5a                                pop     edx
 02d3  59                                pop     ecx
 02d4  5b                                pop     ebx
 02d5  c3                                ret     

long FAR PASCAL WindowProc(HWND hWnd, UINT message,
					   WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT     ps;
	// RECT	rc;
	// SIZE	size;
	char	    keyhit;
	short DevID;
	long NotifyMsg;

 02d6  53                _WindowProc@16  push    ebx
 02d7  56                                push    esi
 02d8  57                                push    edi
 02d9  55                                push    ebp
 02da  89 e5                             mov     ebp,esp
 02dc  81 ec 84 00 00 00                 sub     esp,00000084H

	switch (message)
	{
	case WM_ACTIVATEAPP:
 02e2  81 7d 18 04 01 00 
       00                                cmp     dword ptr +18H[ebp],00000104H
 02e9  0f 82 b2 00 00 00                 jb      L13
 02ef  81 7d 18 04 01 00 
       00                                cmp     dword ptr +18H[ebp],00000104H
 02f6  0f 86 22 04 00 00                 jbe     L42
 02fc  81 7d 18 a0 03 00 
       00                                cmp     dword ptr +18H[ebp],000003a0H
 0303  72 62                             jb      L11
 0305  81 7d 18 a0 03 00 
       00                                cmp     dword ptr +18H[ebp],000003a0H
 030c  0f 86 24 01 00 00                 jbe     L21
 0312  81 7d 18 b7 03 00 
       00                                cmp     dword ptr +18H[ebp],000003b7H
 0319  72 3a                             jb      L10
 031b  81 7d 18 b7 03 00 
       00                                cmp     dword ptr +18H[ebp],000003b7H
 0322  0f 86 2a 02 00 00                 jbe     L27
 0328  81 7d 18 b9 03 00 
       00                                cmp     dword ptr +18H[ebp],000003b9H
 032f  72 1f                             jb      L9
 0331  81 7d 18 b9 03 00 
       00                                cmp     dword ptr +18H[ebp],000003b9H
 0338  0f 86 77 04 00 00                 jbe     L47
 033e  81 7d 18 c8 04 00 
       00                                cmp     dword ptr +18H[ebp],000004c8H
 0345  0f 84 6a 04 00 00                 je      L47
 034b  e9 c1 04 00 00                    jmp     L56
 0350  e9 bc 04 00 00    L9              jmp     L56
 0355  81 7d 18 b5 03 00 
       00                L10             cmp     dword ptr +18H[ebp],000003b5H
 035c  0f 84 f0 01 00 00                 je      L27
 0362  e9 aa 04 00 00                    jmp     L56
 0367  81 7d 18 13 01 00 
       00                L11             cmp     dword ptr +18H[ebp],00000113H
 036e  72 1f                             jb      L12
 0370  81 7d 18 13 01 00 
       00                                cmp     dword ptr +18H[ebp],00000113H
 0377  0f 86 b4 00 00 00                 jbe     L20
 037d  81 7d 18 00 02 00 
       00                                cmp     dword ptr +18H[ebp],00000200H
 0384  0f 84 cd 01 00 00                 je      L28
 038a  e9 82 04 00 00                    jmp     L56
 038f  81 7d 18 05 01 00 
       00                L12             cmp     dword ptr +18H[ebp],00000105H
 0396  0f 84 42 03 00 00                 je      L40
 039c  e9 70 04 00 00                    jmp     L56
 03a1  83 7d 18 1c       L13             cmp     dword ptr +18H[ebp],0000001cH
 03a5  72 39                             jb      L15
 03a7  83 7d 18 1c                       cmp     dword ptr +18H[ebp],0000001cH
 03ab  76 5d                             jbe     L17
 03ad  81 7d 18 00 01 00 
       00                                cmp     dword ptr +18H[ebp],00000100H
 03b4  72 1f                             jb      L14
 03b6  81 7d 18 00 01 00 
       00                                cmp     dword ptr +18H[ebp],00000100H
 03bd  0f 86 5b 03 00 00                 jbe     L42
 03c3  81 7d 18 01 01 00 
       00                                cmp     dword ptr +18H[ebp],00000101H
 03ca  0f 84 0e 03 00 00                 je      L40
 03d0  e9 3c 04 00 00                    jmp     L56
 03d5  83 7d 18 20       L14             cmp     dword ptr +18H[ebp],00000020H
 03d9  74 41                             je      L19
 03db  e9 31 04 00 00                    jmp     L56
 03e0  83 7d 18 02       L15             cmp     dword ptr +18H[ebp],00000002H
 03e4  72 19                             jb      L16
 03e6  83 7d 18 02                       cmp     dword ptr +18H[ebp],00000002H
 03ea  0f 86 a8 03 00 00                 jbe     L46
 03f0  83 7d 18 0f                       cmp     dword ptr +18H[ebp],0000000fH
 03f4  0f 84 7b 03 00 00                 je      L45
 03fa  e9 12 04 00 00                    jmp     L56
 03ff  83 7d 18 01       L16             cmp     dword ptr +18H[ebp],00000001H
 0403  74 12                             je      L18
 0405  e9 07 04 00 00                    jmp     L56

		bActive = wParam;
 040a  8b 45 1c          L17             mov     eax,+1cH[ebp]
 040d  a3 00 00 00 00                    mov     _bActive,eax

		break;

	case WM_CREATE:
 0412  e9 fa 03 00 00                    jmp     L56

		break;

	case WM_SETCURSOR:
 0417  e9 f5 03 00 00    L18             jmp     L56

		SetCursor(NULL);
 041c  6a 00             L19             push    00000000H
 041e  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__SetCursor@4

		return TRUE;

	case WM_TIMER:
 0425  c7 45 f4 01 00 00 
       00                                mov     dword ptr -0cH[ebp],00000001H
 042c  e9 fa 03 00 00                    jmp     L57

		break;

	case MM_JOY1MOVE:
 0431  e9 db 03 00 00    L20             jmp     L56

		if (etc_Joystick1Switch == _DEVICE_ON)
		{
			short xpos, buttons;
			char temp;

 0436  80 3d 00 00 00 00 
       01                L21             cmp     byte ptr _etc_Joystick1Switch,01H
 043d  0f 85 0a 01 00 00                 jne     L26

			xpos = LOWORD(lParam);
 0443  8b 45 20                          mov     eax,+20H[ebp]
 0446  89 45 a8                          mov     -58H[ebp],eax

			buttons = wParam;
 0449  8b 45 1c                          mov     eax,+1cH[ebp]
 044c  89 45 a4                          mov     -5cH[ebp],eax

			etc_Joy1.jX = xpos * 0.0039;
 044f  df 45 a8                          fild    word ptr -58H[ebp]
 0452  dc 0d 63 00 00 00                 fmul    qword ptr L322
 0458  e8 00 00 00 00                    call    __CHP
 045d  db 5d a0                          fistp   dword ptr -60H[ebp]
 0460  8b 45 a0                          mov     eax,-60H[ebp]
 0463  66 89 45 a0                       mov     -60H[ebp],ax
 0467  8b 45 a0                          mov     eax,-60H[ebp]
 046a  66 a3 00 00 00 00                 mov     _etc_Joy1,ax

			etc_Joy1.jDir = 0;
 0470  66 c7 05 04 00 00 
       00 00 00                          mov     word ptr _etc_Joy1+4H,0000H

			etc_Joy1.jButton1 = (buttons & JOY_BUTTON1) ? 1 : 0;
 0479  66 f7 45 a4 01 00                 test    word ptr -5cH[ebp],0001H
 047f  74 09                             je      L22
 0481  c7 45 9c 01 00 00 
       00                                mov     dword ptr -64H[ebp],00000001H
 0488  eb 07                             jmp     L23
 048a  c7 45 9c 00 00 00 
       00                L22             mov     dword ptr -64H[ebp],00000000H
 0491  8b 45 9c          L23             mov     eax,-64H[ebp]
 0494  66 a3 06 00 00 00                 mov     _etc_Joy1+6H,ax

			etc_Joy1.jButton2 = (buttons & JOY_BUTTON2) ? 1 : 0;

 049a  66 f7 45 a4 02 00                 test    word ptr -5cH[ebp],0002H
 04a0  74 09                             je      L24
 04a2  c7 45 98 01 00 00 
       00                                mov     dword ptr -68H[ebp],00000001H
 04a9  eb 07                             jmp     L25
 04ab  c7 45 98 00 00 00 
       00                L24             mov     dword ptr -68H[ebp],00000000H
 04b2  8b 45 98          L25             mov     eax,-68H[ebp]
 04b5  66 a3 08 00 00 00                 mov     _etc_Joy1+8H,ax

			etc_Joystick1Register |= etc_Joy1.jDir;
 04bb  31 c0                             xor     eax,eax
 04bd  66 a1 04 00 00 00                 mov     ax,_etc_Joy1+4H
 04c3  09 05 00 00 00 00                 or      _etc_Joystick1Register,eax

			etc_Joystick1Register |= etc_Joy1.jButton1 << etc_Joy1Config.JoyButton1;
 04c9  31 c0                             xor     eax,eax
 04cb  66 a1 06 00 00 00                 mov     ax,_etc_Joy1+6H
 04d1  8a 0d 10 00 00 00                 mov     cl,_etc_Joy1Config+10H
 04d7  d3 e0                             shl     eax,cl
 04d9  09 05 00 00 00 00                 or      _etc_Joystick1Register,eax

			etc_Joystick1Register |= etc_Joy1.jButton2 << etc_Joy1Config.JoyButton2;

			//Transmit data to buffer
 04df  31 c0                             xor     eax,eax
 04e1  66 a1 08 00 00 00                 mov     ax,_etc_Joy1+8H
 04e7  8a 0d 14 00 00 00                 mov     cl,_etc_Joy1Config+14H
 04ed  d3 e0                             shl     eax,cl
 04ef  09 05 00 00 00 00                 or      _etc_Joystick1Register,eax

			etc_TransferBuffer1[0] = OK;
 04f5  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 04fa  c6 00 00                          mov     byte ptr [eax],00H

			etc_TransferBuffer1[1] = SONY_PAD;
 04fd  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 0502  c6 40 01 41                       mov     byte ptr +1H[eax],41H

			etc_TransferBuffer1[2] = (char) ~(etc_Joystick1Register >> 8);

 0506  a1 00 00 00 00                    mov     eax,_etc_Joystick1Register
 050b  c1 e8 08                          shr     eax,08H
 050e  f7 d0                             not     eax
 0510  88 c2                             mov     dl,al
 0512  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 0517  88 50 02                          mov     +2H[eax],dl

			temp = ~etc_TransferBuffer1[3];			// This lot preserves the
 051a  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 051f  8a 40 03                          mov     al,+3H[eax]
 0522  88 45 ac                          mov     -54H[ebp],al
 0525  f6 55 ac                          not     byte ptr -54H[ebp]

			temp &= 0x9F;					// brake bits, which get
 0528  80 65 ac 9f                       and     byte ptr -54H[ebp],9fH

			temp |= (char) (etc_Joystick1Register  & 0xFF);	// lost somehow otherwise
 052c  a0 00 00 00 00                    mov     al,_etc_Joystick1Register
 0531  08 45 ac                          or      -54H[ebp],al

			etc_TransferBuffer1[3] = ~temp;
 0534  8a 55 ac                          mov     dl,-54H[ebp]
 0537  f6 d2                             not     dl
 0539  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 053e  88 50 03                          mov     +3H[eax],dl

			return(0);
		}
 0541  c7 45 f4 00 00 00 
       00                                mov     dword ptr -0cH[ebp],00000000H
 0548  e9 de 02 00 00                    jmp     L57

		break;
	case 	MM_JOY1BUTTONDOWN:
	case MM_JOY1BUTTONUP:
 054d  e9 bf 02 00 00    L26             jmp     L56

		break;


	case WM_MOUSEMOVE:
 0552  e9 ba 02 00 00    L27             jmp     L56

		etc_Mouse1Register = 0;
 0557  c7 05 00 00 00 00 
       00 00 00 00       L28             mov     dword ptr _etc_Mouse1Register,00000000H

		if(etc_Mouse1Switch == _DEVICE_ON)
		{
			short xtemp,fwKeys;
			char temp;

 0561  80 3d 00 00 00 00 
       01                                cmp     byte ptr _etc_Mouse1Switch,01H
 0568  0f 85 6b 01 00 00                 jne     L39

			xtemp=LOWORD(lParam);
 056e  8b 45 20                          mov     eax,+20H[ebp]
 0571  89 45 8c                          mov     -74H[ebp],eax

			xtemp-=160;
 0574  81 45 8c 60 ff ff 
       ff                                add     dword ptr -74H[ebp],0ffffff60H

			switch(mouse_sensitivity)
			{
				case MEDIUM_SENS:
 057b  a0 00 00 00 00                    mov     al,_mouse_sensitivity
 0580  88 45 94                          mov     -6cH[ebp],al
 0583  80 7d 94 10                       cmp     byte ptr -6cH[ebp],10H
 0587  72 0e                             jb      L29
 0589  80 7d 94 10                       cmp     byte ptr -6cH[ebp],10H
 058d  76 0a                             jbe     L30
 058f  80 7d 94 20                       cmp     byte ptr -6cH[ebp],20H
 0593  74 14                             je      L31
 0595  eb 25                             jmp     L32
 0597  eb 23             L29             jmp     L32

					xtemp/=2;
 0599  8b 45 8c          L30             mov     eax,-74H[ebp]
 059c  66 99                             cwd     
 059e  66 2b c2                          sub     ax,dx
 05a1  66 d1 f8                          sar     ax,1
 05a4  89 45 8c                          mov     -74H[ebp],eax

					break;
				case LOW_SENS:
 05a7  eb 13                             jmp     L32

					xtemp/=4;
					break;
			}
 05a9  8b 45 8c          L31             mov     eax,-74H[ebp]
 05ac  66 99                             cwd     
 05ae  66 c1 e2 02                       shl     dx,02H
 05b2  66 1b c2                          sbb     ax,dx
 05b5  66 c1 f8 02                       sar     ax,02H
 05b9  89 45 8c                          mov     -74H[ebp],eax

			fwKeys = wParam;
 05bc  8b 45 1c          L32             mov     eax,+1cH[ebp]
 05bf  89 45 88                          mov     -78H[ebp],eax

			etc_Mouse1.mX = xtemp+160;

 05c2  8b 45 8c                          mov     eax,-74H[ebp]
 05c5  05 a0 00 00 00                    add     eax,000000a0H
 05ca  66 a3 00 00 00 00                 mov     _etc_Mouse1,ax

			etc_Mouse1.mDir = 0;
 05d0  66 c7 05 04 00 00 
       00 00 00                          mov     word ptr _etc_Mouse1+4H,0000H

			etc_Mouse1.mButton1 = (fwKeys & MK_LBUTTON) ? 1 : 0;
 05d9  66 f7 45 88 01 00                 test    word ptr -78H[ebp],0001H
 05df  74 09                             je      L33
 05e1  c7 45 84 01 00 00 
       00                                mov     dword ptr -7cH[ebp],00000001H
 05e8  eb 07                             jmp     L34
 05ea  c7 45 84 00 00 00 
       00                L33             mov     dword ptr -7cH[ebp],00000000H
 05f1  8b 45 84          L34             mov     eax,-7cH[ebp]
 05f4  66 a3 06 00 00 00                 mov     _etc_Mouse1+6H,ax

			etc_Mouse1.mButton2 = (fwKeys & MK_MBUTTON) ? 1 : 0;
 05fa  66 f7 45 88 10 00                 test    word ptr -78H[ebp],0010H
 0600  74 09                             je      L35
 0602  c7 45 80 01 00 00 
       00                                mov     dword ptr -80H[ebp],00000001H
 0609  eb 07                             jmp     L36
 060b  c7 45 80 00 00 00 
       00                L35             mov     dword ptr -80H[ebp],00000000H
 0612  8b 45 80          L36             mov     eax,-80H[ebp]
 0615  66 a3 08 00 00 00                 mov     _etc_Mouse1+8H,ax

			etc_Mouse1.mButton3 = (fwKeys & MK_RBUTTON) ? 1 : 0;


 061b  66 f7 45 88 02 00                 test    word ptr -78H[ebp],0002H
 0621  74 0c                             je      L37
 0623  c7 85 7c ff ff ff 
       01 00 00 00                       mov     dword ptr -84H[ebp],00000001H
 062d  eb 0a                             jmp     L38
 062f  c7 85 7c ff ff ff 
       00 00 00 00       L37             mov     dword ptr -84H[ebp],00000000H
 0639  8b 85 7c ff ff ff L38             mov     eax,-84H[ebp]
 063f  66 a3 0a 00 00 00                 mov     _etc_Mouse1+0aH,ax

			etc_Mouse1Register |= etc_Mouse1.mDir;
 0645  31 c0                             xor     eax,eax
 0647  66 a1 04 00 00 00                 mov     ax,_etc_Mouse1+4H
 064d  09 05 00 00 00 00                 or      _etc_Mouse1Register,eax

			etc_Mouse1Register |= etc_Mouse1.mButton1 << etc_Mouse1Config.MouseLeftButton;
 0653  31 c0                             xor     eax,eax
 0655  66 a1 06 00 00 00                 mov     ax,_etc_Mouse1+6H
 065b  8a 0d 10 00 00 00                 mov     cl,_etc_Mouse1Config+10H
 0661  d3 e0                             shl     eax,cl
 0663  09 05 00 00 00 00                 or      _etc_Mouse1Register,eax

			etc_Mouse1Register |= etc_Mouse1.mButton2 << etc_Mouse1Config.MouseMiddleButton;
 0669  31 c0                             xor     eax,eax
 066b  66 a1 08 00 00 00                 mov     ax,_etc_Mouse1+8H
 0671  8a 0d 14 00 00 00                 mov     cl,_etc_Mouse1Config+14H
 0677  d3 e0                             shl     eax,cl
 0679  09 05 00 00 00 00                 or      _etc_Mouse1Register,eax

			etc_Mouse1Register |= etc_Mouse1.mButton3 << etc_Mouse1Config.MouseRightButton;

			/* Transmit Data to data buffer. */
 067f  31 c0                             xor     eax,eax
 0681  66 a1 0a 00 00 00                 mov     ax,_etc_Mouse1+0aH
 0687  8a 0d 18 00 00 00                 mov     cl,_etc_Mouse1Config+18H
 068d  d3 e0                             shl     eax,cl
 068f  09 05 00 00 00 00                 or      _etc_Mouse1Register,eax

			etc_TransferBuffer1[0] = OK;
 0695  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 069a  c6 00 00                          mov     byte ptr [eax],00H

			etc_TransferBuffer1[1] = SONY_PAD;
	//		etc_TransferBuffer1[2] = (char) ~(etc_Mouse1Register >> 8);

 069d  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 06a2  c6 40 01 41                       mov     byte ptr +1H[eax],41H

			temp = ~etc_TransferBuffer1[3];			// This lot preserves the
 06a6  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 06ab  8a 40 03                          mov     al,+3H[eax]
 06ae  88 45 90                          mov     -70H[ebp],al
 06b1  f6 55 90                          not     byte ptr -70H[ebp]

			temp &= 0x9F;					// brake bits, which get
 06b4  80 65 90 9f                       and     byte ptr -70H[ebp],9fH

			temp |= (char) (etc_Mouse1Register & 0xFF);	// lost somehow otherwise
 06b8  a0 00 00 00 00                    mov     al,_etc_Mouse1Register
 06bd  08 45 90                          or      -70H[ebp],al

			etc_TransferBuffer1[3] = ~temp;
 06c0  8a 55 90                          mov     dl,-70H[ebp]
 06c3  f6 d2                             not     dl
 06c5  a1 00 00 00 00                    mov     eax,_etc_TransferBuffer1
 06ca  88 50 03                          mov     +3H[eax],dl

			return(0);
		}
 06cd  c7 45 f4 00 00 00 
       00                                mov     dword ptr -0cH[ebp],00000000H
 06d4  e9 52 01 00 00                    jmp     L57

		break;
	case WM_KEYUP:
	case WM_SYSKEYUP:
 06d9  e9 33 01 00 00    L39             jmp     L56

		if (HIWORD(lParam) & 0x100)
		{
 06de  8b 45 20          L40             mov     eax,+20H[ebp]
 06e1  c1 e8 10                          shr     eax,10H
 06e4  25 ff ff 00 00                    and     eax,0000ffffH
 06e9  f6 c4 01                          test    ah,01H
 06ec  74 0a                             je      L41

			pmkey(0xe0);
		}
 06ee  b8 e0 00 00 00                    mov     eax,000000e0H
 06f3  e8 00 00 00 00                    call    pmkey_

		keyhit = (char) (HIWORD(lParam) & 0x7f);
 06f8  8b 45 20          L41             mov     eax,+20H[ebp]
 06fb  c1 e8 10                          shr     eax,10H
 06fe  25 ff ff 00 00                    and     eax,0000ffffH
 0703  25 7f 00 00 00                    and     eax,0000007fH
 0708  88 45 fc                          mov     -4H[ebp],al

		keyhit |= 0x80;
 070b  80 4d fc 80                       or      byte ptr -4H[ebp],80H

		pmkey(keyhit);

 070f  31 c0                             xor     eax,eax
 0711  8a 45 fc                          mov     al,-4H[ebp]
 0714  e8 00 00 00 00                    call    pmkey_

		break;

	case WM_KEYDOWN:
	case WM_SYSKEYDOWN:
 0719  e9 f3 00 00 00                    jmp     L56

		if (HIWORD(lParam) & 0x100)
		{
 071e  8b 45 20          L42             mov     eax,+20H[ebp]
 0721  c1 e8 10                          shr     eax,10H
 0724  25 ff ff 00 00                    and     eax,0000ffffH
 0729  f6 c4 01                          test    ah,01H
 072c  74 0a                             je      L43

			pmkey(0xe0);
		}
 072e  b8 e0 00 00 00                    mov     eax,000000e0H
 0733  e8 00 00 00 00                    call    pmkey_

		keyhit = (char) (HIWORD(lParam) & 0x7f);
 0738  8b 45 20          L43             mov     eax,+20H[ebp]
 073b  c1 e8 10                          shr     eax,10H
 073e  25 ff ff 00 00                    and     eax,0000ffffH
 0743  25 7f 00 00 00                    and     eax,0000007fH
 0748  88 45 fc                          mov     -4H[ebp],al

		keyhit &= 0x7f;
 074b  80 65 fc 7f                       and     byte ptr -4H[ebp],7fH

		pmkey(keyhit);

 074f  31 c0                             xor     eax,eax
 0751  8a 45 fc                          mov     al,-4H[ebp]
 0754  e8 00 00 00 00                    call    pmkey_

		switch (wParam)
		{
		case VK_F12:
 0759  83 7d 1c 7b                       cmp     dword ptr +1cH[ebp],0000007bH
 075d  75 11                             jne     L44

			PostMessage(hWnd, WM_CLOSE, 0, 0);
			break;
		}
//		if(MPEGplaying)
//			MPEGplaying=FALSE;
 075f  6a 00                             push    00000000H
 0761  6a 00                             push    00000000H
 0763  6a 10                             push    00000010H
 0765  8b 45 14                          mov     eax,+14H[ebp]
 0768  50                                push    eax
 0769  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__PostMessageA@16

		break;

	case WM_PAINT:
 0770  e9 9c 00 00 00    L44             jmp     L56

		BeginPaint(hWnd, &ps);
		/*
		 * GetClientRect(hWnd, &rc); GetTextExtentPoint( ps.hdc,
		 * szMsg, lstrlen(szMsg), &size ); SetBkColor( ps.hdc, RGB(
		 * 0, 0, 255 ) ); SetTextColor( ps.hdc, RGB( 255, 255, 0 ) );
		 * TextOut( ps.hdc, (rc.right - size.cx)/2, (rc.bottom -
		 * size.cy)/2, szMsg, sizeof( szMsg )-1 );
		 */
 0775  8d 45 b0          L45             lea     eax,-50H[ebp]
 0778  50                                push    eax
 0779  8b 45 14                          mov     eax,+14H[ebp]
 077c  50                                push    eax
 077d  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__BeginPaint@8

		EndPaint(hWnd, &ps);
 0784  8d 45 b0                          lea     eax,-50H[ebp]
 0787  50                                push    eax
 0788  8b 45 14                          mov     eax,+14H[ebp]
 078b  50                                push    eax
 078c  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__EndPaint@8

		break;

	case WM_DESTROY:
 0793  e9 79 00 00 00                    jmp     L56

		finiObjects();
 0798  e8 00 00 00 00    L46             call    finiObjects_

		finiSndObjects();
 079d  e8 00 00 00 00                    call    finiSndObjects_

		PostQuitMessage(0);
 07a2  6a 00                             push    00000000H
 07a4  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__PostQuitMessage@4

		QuitToDos();
 07ab  e8 00 00 00 00                    call    QuitToDos_

		break;
#if USE_ATI
	case MM_MCINOTIFY:
	case MCIWNDM_NOTIFYMODE:
 07b0  e9 5c 00 00 00                    jmp     L56

		DevID = LOWORD(lParam);
 07b5  8b 45 20          L47             mov     eax,+20H[ebp]
 07b8  89 45 f8                          mov     -8H[ebp],eax

		NotifyMsg = wParam;
 07bb  8b 45 1c                          mov     eax,+1cH[ebp]
 07be  89 45 f0                          mov     -10H[ebp],eax

		switch (NotifyMsg)
		{
			case MCI_NOTIFY_ABORTED://stopped for some reason
 07c1  83 7d f0 02                       cmp     dword ptr -10H[ebp],00000002H
 07c5  72 1c                             jb      L49
 07c7  83 7d f0 02                       cmp     dword ptr -10H[ebp],00000002H
 07cb  76 38                             jbe     L54
 07cd  83 7d f0 04                       cmp     dword ptr -10H[ebp],00000004H
 07d1  72 0e                             jb      L48
 07d3  83 7d f0 04                       cmp     dword ptr -10H[ebp],00000004H
 07d7  76 12                             jbe     L50
 07d9  83 7d f0 08                       cmp     dword ptr -10H[ebp],00000008H
 07dd  74 0e                             je      L51
 07df  eb 26                             jmp     L55
 07e1  eb 24             L48             jmp     L55
 07e3  83 7d f0 01       L49             cmp     dword ptr -10H[ebp],00000001H
 07e7  74 06                             je      L52
 07e9  eb 1c                             jmp     L55

				break;
			case MCI_NOTIFY_FAILURE://device error
 07eb  eb 24             L50             jmp     L56

				break;
			case MCI_NOTIFY_SUCCESSFUL://horay!
 07ed  eb 22             L51             jmp     L56

				if (DevID == 1)
				{
 07ef  66 83 7d f8 01    L52             cmp     word ptr -8H[ebp],0001H
 07f4  75 0d                             jne     L53

					CDPlay(CurrTrkNo);
				}
 07f6  a1 fe ff ff ff                    mov     eax,_CurrTrkNo-2H
 07fb  c1 f8 10                          sar     eax,10H
 07fe  e8 00 00 00 00                    call    CDPlay_

				break;
			case MCI_NOTIFY_SUPERSEDED://not needed any more
 0803  eb 0c             L53             jmp     L56

				break;
			default:
 0805  eb 0a             L54             jmp     L56

				MPEGplaying = FALSE;
				break;
		}
		break;
#endif
	}

 0807  c7 05 00 00 00 00 
       00 00 00 00       L55             mov     dword ptr _MPEGplaying,00000000H

	return DefWindowProc(hWnd, message, wParam, lParam);

 0811  8b 45 20          L56             mov     eax,+20H[ebp]
 0814  50                                push    eax
 0815  8b 45 1c                          mov     eax,+1cH[ebp]
 0818  50                                push    eax
 0819  8b 45 18                          mov     eax,+18H[ebp]
 081c  50                                push    eax
 081d  8b 45 14                          mov     eax,+14H[ebp]
 0820  50                                push    eax
 0821  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__DefWindowProcA@16
 0828  89 45 f4                          mov     -0cH[ebp],eax

}			       /* WindowProc */


/*  SetSurfaceIntoATI3DCIF - sets direct draw surface to CIF
 *  Parameters : lpDDS long point to the direct draw surface to select
 */
 082b  8b 45 f4          L57             mov     eax,-0cH[ebp]
 082e  89 ec                             mov     esp,ebp
 0830  5d                                pop     ebp
 0831  5f                                pop     edi
 0832  5e                                pop     esi
 0833  5b                                pop     ebx
 0834  c2 10 00                          ret     0010H

BOOL SetSurfaceIntoATI3DCIF(LPDIRECTDRAWSURFACE lpDDS)
{
	// set the pointer to the frame buffer address of the back surface
	// for the rendering context
	DDSURFACEDESC ddsd;
	HRESULT       ddretval;
 0837                    SetSurfaceIntoATI3DCIF_:
 0837  53                                push    ebx
 0838  51                                push    ecx
 0839  52                                push    edx
 083a  56                                push    esi
 083b  57                                push    edi
 083c  55                                push    ebp
 083d  89 e5                             mov     ebp,esp
 083f  81 ec 7c 00 00 00                 sub     esp,0000007cH
 0845  89 45 f0                          mov     -10H[ebp],eax

	C3D_EPIXFMT ePixF = C3D_EPF_RGB565;

 0848  c7 45 f8 04 00 00 
       00                                mov     dword ptr -8H[ebp],00000004H

	ZeroMemory(&ddsd, sizeof(DDSURFACEDESC));
 084f  bb 6c 00 00 00                    mov     ebx,0000006cH
 0854  31 d2                             xor     edx,edx
 0856  8d 45 84                          lea     eax,-7cH[ebp]
 0859  e8 00 00 00 00                    call    memset_

	ddsd.dwSize = sizeof (ddsd);
 085e  c7 45 84 6c 00 00 
       00                                mov     dword ptr -7cH[ebp],0000006cH

	ddsd.ddpfPixelFormat.dwSize = sizeof( DDPIXELFORMAT );

 0865  c7 45 cc 20 00 00 
       00                                mov     dword ptr -34H[ebp],00000020H

	ddretval = lpDDS->lpVtbl->GetSurfaceDesc(lpDDS, &ddsd);
 086c  8b 45 f0                          mov     eax,-10H[ebp]
 086f  8b 00                             mov     eax,[eax]
 0871  8d 55 84                          lea     edx,-7cH[ebp]
 0874  52                                push    edx
 0875  8b 55 f0                          mov     edx,-10H[ebp]
 0878  52                                push    edx
 0879  ff 50 58                          call    dword ptr +58H[eax]
 087c  89 45 f4                          mov     -0cH[ebp],eax

	ddretval = lpDDS->lpVtbl->Lock (lpDDS, NULL,
							&ddsd,
							DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,
							NULL);
 087f  8b 45 f0                          mov     eax,-10H[ebp]
 0882  8b 00                             mov     eax,[eax]
 0884  6a 00                             push    00000000H
 0886  6a 01                             push    00000001H
 0888  8d 55 84                          lea     edx,-7cH[ebp]
 088b  52                                push    edx
 088c  6a 00                             push    00000000H
 088e  8b 55 f0                          mov     edx,-10H[ebp]
 0891  52                                push    edx
 0892  ff 50 64                          call    dword ptr +64H[eax]
 0895  89 45 f4                          mov     -0cH[ebp],eax

	if (ddretval == DDERR_SURFACELOST) lpDDS->lpVtbl->Restore (lpDDS);
	
 0898  81 7d f4 c2 01 76 
       88                                cmp     dword ptr -0cH[ebp],887601c2H
 089f  75 0c                             jne     L58
 08a1  8b 45 f0                          mov     eax,-10H[ebp]
 08a4  8b 00                             mov     eax,[eax]
 08a6  8b 55 f0                          mov     edx,-10H[ebp]
 08a9  52                                push    edx
 08aa  ff 50 6c                          call    dword ptr +6cH[eax]

	ddretval = lpDDS->lpVtbl->Unlock (lpDDS, NULL);

 08ad  8b 45 f0          L58             mov     eax,-10H[ebp]
 08b0  8b 00                             mov     eax,[eax]
 08b2  6a 00                             push    00000000H
 08b4  8b 55 f0                          mov     edx,-10H[ebp]
 08b7  52                                push    edx
 08b8  ff 90 80 00 00 00                 call    dword ptr +80H[eax]
 08be  89 45 f4                          mov     -0cH[ebp],eax

	ATI3DCIF_ContextSetState (ghRC, C3D_ERS_SURF_DRAW_PTR, (C3D_PRSDATA) &(ddsd.lpSurface));
 08c1  8d 45 a8                          lea     eax,-58H[ebp]
 08c4  50                                push    eax
 08c5  6a 0d                             push    0000000dH
 08c7  ff 35 00 00 00 00                 push    _ghRC
 08cd  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

	switch(ddsd.ddpfPixelFormat.dwRGBBitCount)
	{ // select pixel format from bpp of surface!
		case 8:
 08d2  83 7d d8 10                       cmp     dword ptr -28H[ebp],00000010H
 08d6  72 0e                             jb      L59
 08d8  83 7d d8 10                       cmp     dword ptr -28H[ebp],00000010H
 08dc  76 17                             jbe     L60
 08de  83 7d d8 20                       cmp     dword ptr -28H[ebp],00000020H
 08e2  74 31                             je      L63
 08e4  eb 36                             jmp     L64
 08e6  83 7d d8 08       L59             cmp     dword ptr -28H[ebp],00000008H
 08ea  75 30                             jne     L64

			ePixF = C3D_EPF_RGB332;
 08ec  c7 45 f8 07 00 00 
       00                                mov     dword ptr -8H[ebp],00000007H

			break;
		case 16:
 08f3  eb 27                             jmp     L64

			if ((((ddsd.ddpfPixelFormat.dwRBitMask) |
				  (ddsd.ddpfPixelFormat.dwGBitMask) |
				  (ddsd.ddpfPixelFormat.dwBBitMask)) &
				 (0x8000)) != 0)
			{ // check for 15 / 16 bpp through alpha bit!
 08f5  8b 45 dc          L60             mov     eax,-24H[ebp]
 08f8  0b 45 e0                          or      eax,-20H[ebp]
 08fb  0b 45 e4                          or      eax,-1cH[ebp]
 08fe  f6 c4 80                          test    ah,80H
 0901  74 09                             je      L61

				ePixF = C3D_EPF_RGB565;
 0903  c7 45 f8 04 00 00 
       00                                mov     dword ptr -8H[ebp],00000004H

			} else
			{
 090a  eb 07                             jmp     L62

				ePixF = C3D_EPF_RGB1555;
			}
 090c  c7 45 f8 03 00 00 
       00                L61             mov     dword ptr -8H[ebp],00000003H

			break;
		case 32:
 0913  eb 07             L62             jmp     L64

			ePixF = C3D_EPF_RGB8888;
			break;
		default:
			break;
	}
	
 0915  c7 45 f8 06 00 00 
       00                L63             mov     dword ptr -8H[ebp],00000006H

	ATI3DCIF_ContextSetState (ghRC, C3D_ERS_SURF_DRAW_PITCH, (C3D_PRSDATA)&(ddsd.dwWidth));
 091c  8d 45 90          L64             lea     eax,-70H[ebp]
 091f  50                                push    eax
 0920  6a 0e                             push    0000000eH
 0922  ff 35 00 00 00 00                 push    _ghRC
 0928  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

	ATI3DCIF_ContextSetState (ghRC, C3D_ERS_SURF_DRAW_PF, (C3D_PRSDATA)&(ePixF));

 092d  8d 45 f8                          lea     eax,-8H[ebp]
 0930  50                                push    eax
 0931  6a 0f                             push    0000000fH
 0933  ff 35 00 00 00 00                 push    _ghRC
 0939  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

	return(TRUE);
 093e  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H

}

/*
 * doInit - do work required for every instance of the application: create
 * the window, initialize data
 */
HWND	    hwnd;
 0945  8b 45 fc                          mov     eax,-4H[ebp]
 0948  89 ec                             mov     esp,ebp
 094a  5d                                pop     ebp
 094b  5f                                pop     edi
 094c  5e                                pop     esi
 094d  5a                                pop     edx
 094e  59                                pop     ecx
 094f  5b                                pop     ebx
 0950  c3                                ret     

static BOOL     doInit(HANDLE hInstance, int nCmdShow)
{
	WNDCLASS	wc;
	DDSURFACEDESC   ddsd;
	DDSCAPS	 ddscaps;
	DDCAPS	  ddcaps;
	DDCAPS	  ddcaps2;
	HRESULT	 ddrval,ddretval;
	// HDC		 hdc;
	// char		buf[256];
	int	     i;
	char	    StatBankSwitched;
	char	    StatBltStretch;
	char	    StatBlt;

	/*
	 * Initialise palette
	 */

 0951  53                doInit_         push    ebx
 0952  51                                push    ecx
 0953  56                                push    esi
 0954  57                                push    edi
 0955  55                                push    ebp
 0956  89 e5                             mov     ebp,esp
 0958  81 ec 30 02 00 00                 sub     esp,00000230H
 095e  89 45 d8                          mov     -28H[ebp],eax
 0961  89 55 dc                          mov     -24H[ebp],edx

	for (i = 0; i < 256; i++)
	{
 0964  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 096b  81 7d ec 00 01 00 
       00                L65             cmp     dword ptr -14H[ebp],00000100H
 0972  7c 0a                             jl      L67
 0974  eb 44                             jmp     L68
 0976  8b 45 ec          L66             mov     eax,-14H[ebp]
 0979  ff 45 ec                          inc     dword ptr -14H[ebp]
 097c  eb ed                             jmp     L65

		ddPalette[i].peRed = i;
 097e  8b 55 ec          L67             mov     edx,-14H[ebp]
 0981  c1 e2 02                          shl     edx,02H
 0984  8a 45 ec                          mov     al,-14H[ebp]
 0987  88 82 00 00 00 00                 mov     _ddPalette[edx],al

		ddPalette[i].peGreen = i;
 098d  8b 55 ec                          mov     edx,-14H[ebp]
 0990  c1 e2 02                          shl     edx,02H
 0993  8a 45 ec                          mov     al,-14H[ebp]
 0996  88 82 01 00 00 00                 mov     _ddPalette+1H[edx],al

		ddPalette[i].peBlue = i;
 099c  8b 55 ec                          mov     edx,-14H[ebp]
 099f  c1 e2 02                          shl     edx,02H
 09a2  8a 45 ec                          mov     al,-14H[ebp]
 09a5  88 82 02 00 00 00                 mov     _ddPalette+2H[edx],al

		ddPalette[i].peFlags = 0;
 09ab  8b 55 ec                          mov     edx,-14H[ebp]
 09ae  c1 e2 02                          shl     edx,02H
 09b1  c6 82 03 00 00 00 
       00                                mov     byte ptr _ddPalette+3H[edx],00H

	}

	/*
	 * set up and register window class
	 */
 09b8  eb bc                             jmp     L66

	wc.style = CS_HREDRAW | CS_VREDRAW;
 09ba  c7 45 b0 03 00 00 
       00                L68             mov     dword ptr -50H[ebp],00000003H

	wc.lpfnWndProc = WindowProc;
 09c1  c7 45 b4 00 00 00 
       00                                mov     dword ptr -4cH[ebp],offset _WindowProc@16

	wc.cbClsExtra = 0;
 09c8  c7 45 b8 00 00 00 
       00                                mov     dword ptr -48H[ebp],00000000H

	wc.cbWndExtra = 0;
 09cf  c7 45 bc 00 00 00 
       00                                mov     dword ptr -44H[ebp],00000000H

	wc.hInstance = hInstance;
 09d6  8b 45 d8                          mov     eax,-28H[ebp]
 09d9  89 45 c0                          mov     -40H[ebp],eax

	wc.hIcon = LoadIcon(hInstance, IDI_APPLICATION);
 09dc  68 00 7f 00 00                    push    00007f00H
 09e1  8b 45 d8                          mov     eax,-28H[ebp]
 09e4  50                                push    eax
 09e5  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__LoadIconA@8
 09ec  89 45 c4                          mov     -3cH[ebp],eax

	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
 09ef  68 00 7f 00 00                    push    00007f00H
 09f4  6a 00                             push    00000000H
 09f6  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__LoadCursorA@8
 09fd  89 45 c8                          mov     -38H[ebp],eax

	wc.hbrBackground = NULL;
 0a00  c7 45 cc 00 00 00 
       00                                mov     dword ptr -34H[ebp],00000000H

	wc.lpszMenuName = NAME;
 0a07  c7 45 d0 6b 00 00 
       00                                mov     dword ptr -30H[ebp],offset L323

	wc.lpszClassName = NAME;
 0a0e  c7 45 d4 6b 00 00 
       00                                mov     dword ptr -2cH[ebp],offset L323

	RegisterClass(&wc);

	/*
	 * create a window
	 */
 0a15  8d 45 b0                          lea     eax,-50H[ebp]
 0a18  50                                push    eax
 0a19  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__RegisterClassA@4

	hwnd = CreateWindowEx(
			      WS_EX_TOPMOST,
			      NAME,
			      TITLE,
			      WS_POPUP,
			      0, 0,
			      GetSystemMetrics(SM_CXSCREEN),
			      GetSystemMetrics(SM_CYSCREEN),
			      NULL,
			      NULL,
			      hInstance,
			      NULL);

 0a20  6a 00                             push    00000000H
 0a22  8b 45 d8                          mov     eax,-28H[ebp]
 0a25  50                                push    eax
 0a26  6a 00                             push    00000000H
 0a28  6a 00                             push    00000000H
 0a2a  6a 01                             push    00000001H
 0a2c  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetSystemMetrics@4
 0a33  50                                push    eax
 0a34  6a 00                             push    00000000H
 0a36  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetSystemMetrics@4
 0a3d  50                                push    eax
 0a3e  6a 00                             push    00000000H
 0a40  6a 00                             push    00000000H
 0a42  68 00 00 00 80                    push    80000000H
 0a47  b8 73 00 00 00                    mov     eax,offset L324
 0a4c  50                                push    eax
 0a4d  b8 6b 00 00 00                    mov     eax,offset L323
 0a52  50                                push    eax
 0a53  6a 08                             push    00000008H
 0a55  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CreateWindowExA@48
 0a5c  a3 00 00 00 00                    mov     _hwnd,eax

	if (!hwnd)
	{
 0a61  83 3d 00 00 00 00 
       00                                cmp     dword ptr _hwnd,00000000H
 0a68  75 0c                             jne     L69

		return FALSE;
	}
 0a6a  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 0a71  e9 37 05 00 00                    jmp     L103

	gInstance = hInstance;

 0a76  8b 45 d8          L69             mov     eax,-28H[ebp]
 0a79  a3 00 00 00 00                    mov     _gInstance,eax

	ShowWindow(hwnd, nCmdShow);
 0a7e  8b 45 dc                          mov     eax,-24H[ebp]
 0a81  50                                push    eax
 0a82  ff 35 00 00 00 00                 push    _hwnd
 0a88  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__ShowWindow@8

	UpdateWindow(hwnd);

	/*
	 * create the main DirectDraw object
	 */
 0a8f  ff 35 00 00 00 00                 push    _hwnd
 0a95  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__UpdateWindow@4

	ddrval = DirectDrawCreate(NULL, &lpDD, NULL);
 0a9c  6a 00                             push    00000000H
 0a9e  b8 00 00 00 00                    mov     eax,offset _lpDD
 0aa3  50                                push    eax
 0aa4  6a 00                             push    00000000H
 0aa6  e8 00 00 00 00                    call    _DirectDrawCreate@12
 0aab  89 45 e4                          mov     -1cH[ebp],eax

	if (ddrval == DD_OK)
	{
		// Get exclusive mode
#if USE_ATI
 0aae  83 7d e4 00                       cmp     dword ptr -1cH[ebp],00000000H
 0ab2  0f 85 ee 04 00 00                 jne     L102

		ddrval = lpDD->lpVtbl->SetCooperativeLevel(lpDD, hwnd,
					DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN);
#else
		ddrval = lpDD->lpVtbl->SetCooperativeLevel(lpDD, hwnd,
			DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN | DDSCL_ALLOWMODEX );
#endif
 0ab8  a1 00 00 00 00                    mov     eax,_lpDD
 0abd  8b 00                             mov     eax,[eax]
 0abf  6a 11                             push    00000011H
 0ac1  ff 35 00 00 00 00                 push    _hwnd
 0ac7  ff 35 00 00 00 00                 push    _lpDD
 0acd  ff 50 50                          call    dword ptr +50H[eax]
 0ad0  89 45 e4                          mov     -1cH[ebp],eax

		if (ddrval == DD_OK)
		{
#if USE_ATI
 0ad3  83 7d e4 00                       cmp     dword ptr -1cH[ebp],00000000H
 0ad7  0f 85 78 04 00 00                 jne     L96

			ddrval = lpDD->lpVtbl->SetDisplayMode(lpDD, WinWidth, WinHeight, 16);
#else
			ddrval = lpDD->lpVtbl->SetDisplayMode(lpDD, WinWidth, WinHeight, 8);
#endif
 0add  a1 00 00 00 00                    mov     eax,_lpDD
 0ae2  8b 00                             mov     eax,[eax]
 0ae4  6a 10                             push    00000010H
 0ae6  8b 15 fe ff ff ff                 mov     edx,_WinHeight-2H
 0aec  c1 fa 10                          sar     edx,10H
 0aef  52                                push    edx
 0af0  8b 15 fe ff ff ff                 mov     edx,_WinWidth-2H
 0af6  c1 fa 10                          sar     edx,10H
 0af9  52                                push    edx
 0afa  ff 35 00 00 00 00                 push    _lpDD
 0b00  ff 50 54                          call    dword ptr +54H[eax]
 0b03  89 45 e4                          mov     -1cH[ebp],eax

			if (ddrval == DD_OK)
			{
#if !USE_ATI
				ddrval = lpDD->lpVtbl->CreatePalette(lpDD, DDPCAPS_8BIT, ddPalette, &lpDDPalette, NULL);
				if (ddrval == DD_OK)
				{
#endif
					// Create the primary surface with 1 back buffer
 0b06  83 7d e4 00                       cmp     dword ptr -1cH[ebp],00000000H
 0b0a  0f 85 45 04 00 00                 jne     L96

					memset(&ddsd, 0, sizeof(ddsd));
 0b10  bb 6c 00 00 00                    mov     ebx,0000006cH
 0b15  31 d2                             xor     edx,edx
 0b17  8d 85 44 ff ff ff                 lea     eax,-0bcH[ebp]
 0b1d  e8 00 00 00 00                    call    memset_

					ddsd.dwSize = sizeof(ddsd);
 0b22  c7 85 44 ff ff ff 
       6c 00 00 00                       mov     dword ptr -0bcH[ebp],0000006cH

					ddsd.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT;
						//DDSD_PIXELFORMAT;
					//ddsd.ddpfPixelFormat.dwSize = sizeof( DDPIXELFORMAT );
					//ddsd.ddpfPixelFormat.dwRGBBitCount = 16;
					//ddsd.ddpfPixelFormat.dwFlags = DDPF_RGB;
					//ddsd.ddpfPixelFormat.dwRBitMask = 0x1f << 11;
					//ddsd.ddpfPixelFormat.dwGBitMask = 0x3f << 5;
					//ddsd.ddpfPixelFormat.dwBBitMask = 0x1f << 0;
 0b2c  c7 85 48 ff ff ff 
       20 00 00 00                       mov     dword ptr -0b8H[ebp],00000020H

					ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE |
						DDSCAPS_FLIP |
						DDSCAPS_VIDEOMEMORY |
						DDSCAPS_COMPLEX;
#if USE_ATI
 0b36  c7 45 ac 18 42 00 
       00                                mov     dword ptr -54H[ebp],00004218H

					ddsd.dwBackBufferCount = 1;
#else
					ddsd.dwBackBufferCount = 2;
#endif
 0b3d  c7 85 58 ff ff ff 
       01 00 00 00                       mov     dword ptr -0a8H[ebp],00000001H

					ddrval = lpDD->lpVtbl->CreateSurface(lpDD, &ddsd, &lpDDSPrimary, NULL);

//#if USE_ATI
 0b47  a1 00 00 00 00                    mov     eax,_lpDD
 0b4c  8b 00                             mov     eax,[eax]
 0b4e  6a 00                             push    00000000H
 0b50  ba 00 00 00 00                    mov     edx,offset _lpDDSPrimary
 0b55  52                                push    edx
 0b56  8d 95 44 ff ff ff                 lea     edx,-0bcH[ebp]
 0b5c  52                                push    edx
 0b5d  ff 35 00 00 00 00                 push    _lpDD
 0b63  ff 50 18                          call    dword ptr +18H[eax]
 0b66  89 45 e4                          mov     -1cH[ebp],eax

				SetSurfaceIntoATI3DCIF(lpDDSPrimary);
//#endif

#if !USE_ATI
					if (ddrval != DD_OK)
					{
						// Want at least 1 BackBuffer
						//   in VRAM
						ddsd.dwBackBufferCount = 1;
						ddrval = lpDD->lpVtbl->CreateSurface(
					}
					if (ddrval != DD_OK)
					{
						// Settle for what we can get
						ddsd.ddsCaps.dwCaps &= ~DDSCAPS_VIDEOMEMORY;
						ddrval = lpDD->lpVtbl->CreateSurface(lpDD, &ddsd, &lpDDSPrimary, NULL);
					}
#endif
 0b69  a1 00 00 00 00                    mov     eax,_lpDDSPrimary
 0b6e  e8 00 00 00 00                    call    SetSurfaceIntoATI3DCIF_

					if (ddrval != DD_OK)
					{
 0b73  83 7d e4 00                       cmp     dword ptr -1cH[ebp],00000000H
 0b77  74 05                             je      L70

						QuitToDos();    // Sorry punter your cards shite
					}
#if !USE_ATI
					/* set palette for this surface */
					lpDDSPrimary->lpVtbl->SetPalette(lpDDSPrimary, lpDDPalette);
#endif
 0b79  e8 00 00 00 00                    call    QuitToDos_

					memset(&ddcaps, 0, sizeof(ddcaps));
 0b7e  bb ac 00 00 00    L70             mov     ebx,000000acH
 0b83  31 d2                             xor     edx,edx
 0b85  8d 85 98 fe ff ff                 lea     eax,-168H[ebp]
 0b8b  e8 00 00 00 00                    call    memset_

					ddcaps.dwSize = sizeof(ddcaps);
 0b90  c7 85 98 fe ff ff 
       ac 00 00 00                       mov     dword ptr -168H[ebp],000000acH

					if (lpDDSPrimary->lpVtbl->GetCaps(lpDDSPrimary, &ddcaps) == DD_OK)
					{
 0b9a  a1 00 00 00 00                    mov     eax,_lpDDSPrimary
 0b9f  8b 00                             mov     eax,[eax]
 0ba1  8d 95 98 fe ff ff                 lea     edx,-168H[ebp]
 0ba7  52                                push    edx
 0ba8  ff 35 00 00 00 00                 push    _lpDDSPrimary
 0bae  ff 50 38                          call    dword ptr +38H[eax]
 0bb1  85 c0                             test    eax,eax
 0bb3  0f 85 81 00 00 00                 jne     L77

						StatBankSwitched = ((ddcaps.dwCaps & DDCAPS_BANKSWITCHED) ? 1 : 0);
 0bb9  f7 85 9c fe ff ff 
       00 00 00 08                       test    dword ptr -164H[ebp],08000000H
 0bc3  74 0c                             je      L71
 0bc5  c7 85 e8 fd ff ff 
       01 00 00 00                       mov     dword ptr -218H[ebp],00000001H
 0bcf  eb 0a                             jmp     L72
 0bd1  c7 85 e8 fd ff ff 
       00 00 00 00       L71             mov     dword ptr -218H[ebp],00000000H
 0bdb  8a 85 e8 fd ff ff L72             mov     al,-218H[ebp]
 0be1  88 45 f4                          mov     -0cH[ebp],al

						StatBltStretch = ((ddcaps.dwCaps & DDCAPS_BLTSTRETCH) ? 1 : 0);
 0be4  f7 85 9c fe ff ff 
       00 02 00 00                       test    dword ptr -164H[ebp],00000200H
 0bee  74 0c                             je      L73
 0bf0  c7 85 e4 fd ff ff 
       01 00 00 00                       mov     dword ptr -21cH[ebp],00000001H
 0bfa  eb 0a                             jmp     L74
 0bfc  c7 85 e4 fd ff ff 
       00 00 00 00       L73             mov     dword ptr -21cH[ebp],00000000H
 0c06  8a 85 e4 fd ff ff L74             mov     al,-21cH[ebp]
 0c0c  88 45 fc                          mov     -4H[ebp],al

						StatBlt = ((ddcaps.dwCaps & DDCAPS_BLT) ? 1 : 0);
					}
					// Get a pointer to the back buffer
 0c0f  f7 85 9c fe ff ff 
       40 00 00 00                       test    dword ptr -164H[ebp],00000040H
 0c19  74 0c                             je      L75
 0c1b  c7 85 e0 fd ff ff 
       01 00 00 00                       mov     dword ptr -220H[ebp],00000001H
 0c25  eb 0a                             jmp     L76
 0c27  c7 85 e0 fd ff ff 
       00 00 00 00       L75             mov     dword ptr -220H[ebp],00000000H
 0c31  8a 85 e0 fd ff ff L76             mov     al,-220H[ebp]
 0c37  88 45 f8                          mov     -8H[ebp],al

					memset(&ddscaps, 0, sizeof(ddscaps));
 0c3a  bb 04 00 00 00    L77             mov     ebx,00000004H
 0c3f  31 d2                             xor     edx,edx
 0c41  8d 45 e0                          lea     eax,-20H[ebp]
 0c44  e8 00 00 00 00                    call    memset_

					ddscaps.dwCaps = DDSCAPS_BACKBUFFER;
 0c49  c7 45 e0 04 00 00 
       00                                mov     dword ptr -20H[ebp],00000004H

					ddrval = lpDDSPrimary->lpVtbl->GetAttachedSurface(lpDDSPrimary,
								   &ddscaps,
								&lpDDSBack);
 0c50  a1 00 00 00 00                    mov     eax,_lpDDSPrimary
 0c55  8b 00                             mov     eax,[eax]
 0c57  ba 00 00 00 00                    mov     edx,offset _lpDDSBack
 0c5c  52                                push    edx
 0c5d  8d 55 e0                          lea     edx,-20H[ebp]
 0c60  52                                push    edx
 0c61  ff 35 00 00 00 00                 push    _lpDDSPrimary
 0c67  ff 50 30                          call    dword ptr +30H[eax]
 0c6a  89 45 e4                          mov     -1cH[ebp],eax

					memset(&ddcaps2, 0, sizeof(ddcaps2));
 0c6d  bb ac 00 00 00                    mov     ebx,000000acH
 0c72  31 d2                             xor     edx,edx
 0c74  8d 85 ec fd ff ff                 lea     eax,-214H[ebp]
 0c7a  e8 00 00 00 00                    call    memset_

					ddcaps2.dwSize = sizeof(ddcaps2);
 0c7f  c7 85 ec fd ff ff 
       ac 00 00 00                       mov     dword ptr -214H[ebp],000000acH

					if (lpDDSBack->lpVtbl->GetCaps(lpDDSBack, &ddcaps2) == DD_OK)
					{
 0c89  a1 00 00 00 00                    mov     eax,_lpDDSBack
 0c8e  8b 00                             mov     eax,[eax]
 0c90  8d 95 ec fd ff ff                 lea     edx,-214H[ebp]
 0c96  52                                push    edx
 0c97  ff 35 00 00 00 00                 push    _lpDDSBack
 0c9d  ff 50 38                          call    dword ptr +38H[eax]
 0ca0  85 c0                             test    eax,eax
 0ca2  0f 85 81 00 00 00                 jne     L84

						StatBankSwitched = ((ddcaps.dwCaps & DDCAPS_BANKSWITCHED) ? 1 : 0);
 0ca8  f7 85 9c fe ff ff 
       00 00 00 08                       test    dword ptr -164H[ebp],08000000H
 0cb2  74 0c                             je      L78
 0cb4  c7 85 dc fd ff ff 
       01 00 00 00                       mov     dword ptr -224H[ebp],00000001H
 0cbe  eb 0a                             jmp     L79
 0cc0  c7 85 dc fd ff ff 
       00 00 00 00       L78             mov     dword ptr -224H[ebp],00000000H
 0cca  8a 85 dc fd ff ff L79             mov     al,-224H[ebp]
 0cd0  88 45 f4                          mov     -0cH[ebp],al

						StatBltStretch = ((ddcaps.dwCaps & DDCAPS_BLTSTRETCH) ? 1 : 0);
 0cd3  f7 85 9c fe ff ff 
       00 02 00 00                       test    dword ptr -164H[ebp],00000200H
 0cdd  74 0c                             je      L80
 0cdf  c7 85 d8 fd ff ff 
       01 00 00 00                       mov     dword ptr -228H[ebp],00000001H
 0ce9  eb 0a                             jmp     L81
 0ceb  c7 85 d8 fd ff ff 
       00 00 00 00       L80             mov     dword ptr -228H[ebp],00000000H
 0cf5  8a 85 d8 fd ff ff L81             mov     al,-228H[ebp]
 0cfb  88 45 fc                          mov     -4H[ebp],al

						StatBlt = ((ddcaps.dwCaps & DDCAPS_BLT) ? 1 : 0);
					}
 0cfe  f7 85 9c fe ff ff 
       40 00 00 00                       test    dword ptr -164H[ebp],00000040H
 0d08  74 0c                             je      L82
 0d0a  c7 85 d4 fd ff ff 
       01 00 00 00                       mov     dword ptr -22cH[ebp],00000001H
 0d14  eb 0a                             jmp     L83
 0d16  c7 85 d4 fd ff ff 
       00 00 00 00       L82             mov     dword ptr -22cH[ebp],00000000H
 0d20  8a 85 d4 fd ff ff L83             mov     al,-22cH[ebp]
 0d26  88 45 f8                          mov     -8H[ebp],al

					if (ddrval != DD_OK)
					{
 0d29  83 7d e4 00       L84             cmp     dword ptr -1cH[ebp],00000000H
 0d2d  74 0c                             je      L85

						return (FALSE);

					}
 0d2f  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 0d36  e9 72 02 00 00                    jmp     L103

					memset(&ddsd, 0, sizeof(ddsd));
 0d3b  bb 6c 00 00 00    L85             mov     ebx,0000006cH
 0d40  31 d2                             xor     edx,edx
 0d42  8d 85 44 ff ff ff                 lea     eax,-0bcH[ebp]
 0d48  e8 00 00 00 00                    call    memset_

					ddsd.dwSize = sizeof(ddsd);
 0d4d  c7 85 44 ff ff ff 
       6c 00 00 00                       mov     dword ptr -0bcH[ebp],0000006cH

					ddsd.dwFlags = DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT;
 0d57  c7 85 48 ff ff ff 
       06 00 00 00                       mov     dword ptr -0b8H[ebp],00000006H

					ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN;
 0d61  c7 45 ac 40 00 00 
       00                                mov     dword ptr -54H[ebp],00000040H

					ddsd.dwWidth = 320;
#if USE_ATI
 0d68  c7 85 50 ff ff ff 
       40 01 00 00                       mov     dword ptr -0b0H[ebp],00000140H

					ddsd.dwHeight = 240;
#else
					ddsd.dwHeight = 200;
#endif
 0d72  c7 85 4c ff ff ff 
       f0 00 00 00                       mov     dword ptr -0b4H[ebp],000000f0H

					ddrval = lpDD->lpVtbl->CreateSurface(lpDD, &ddsd, &lpBack_Buffer, NULL);
 0d7c  a1 00 00 00 00                    mov     eax,_lpDD
 0d81  8b 00                             mov     eax,[eax]
 0d83  6a 00                             push    00000000H
 0d85  ba 00 00 00 00                    mov     edx,offset _lpBack_Buffer
 0d8a  52                                push    edx
 0d8b  8d 95 44 ff ff ff                 lea     edx,-0bcH[ebp]
 0d91  52                                push    edx
 0d92  ff 35 00 00 00 00                 push    _lpDD
 0d98  ff 50 18                          call    dword ptr +18H[eax]
 0d9b  89 45 e4                          mov     -1cH[ebp],eax

					if (ddrval != DD_OK)
					{
 0d9e  83 7d e4 00                       cmp     dword ptr -1cH[ebp],00000000H
 0da2  74 0c                             je      L86

						return (FALSE);
					}
#if USE_ATI
					// create 22 offscreen surfaces to cache the texture maps
 0da4  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 0dab  e9 fd 01 00 00                    jmp     L103

					for(i=0;i<22;++i)
					{
 0db0  c7 45 ec 00 00 00 
       00                L86             mov     dword ptr -14H[ebp],00000000H
 0db7  83 7d ec 16       L87             cmp     dword ptr -14H[ebp],00000016H
 0dbb  7c 0a                             jl      L89
 0dbd  e9 c2 00 00 00                    jmp     L91
 0dc2  ff 45 ec          L88             inc     dword ptr -14H[ebp]
 0dc5  eb f0                             jmp     L87

						ZeroMemory (&(gTex[i].ddsd), sizeof (gTex[i].ddsd));
 0dc7  bb 6c 00 00 00    L89             mov     ebx,0000006cH
 0dcc  31 d2                             xor     edx,edx
 0dce  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0dd2  b9 00 00 00 00                    mov     ecx,offset _gTex
 0dd7  01 c8                             add     eax,ecx
 0dd9  83 c0 04                          add     eax,00000004H
 0ddc  e8 00 00 00 00                    call    memset_

						gTex[i].ddsd.dwSize = sizeof (gTex[i].ddsd);
 0de1  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0de5  c7 80 04 00 00 00 
       6c 00 00 00                       mov     dword ptr _gTex+4H[eax],0000006cH

						gTex[i].ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH;
 0def  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0df3  c7 80 08 00 00 00 
       06 00 00 00                       mov     dword ptr _gTex+8H[eax],00000006H

						gTex[i].ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_VIDEOMEMORY;
 0dfd  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0e01  c7 80 6c 00 00 00 
       40 40 00 00                       mov     dword ptr _gTex+6cH[eax],00004040H

						gTex[i].ddsd.dwWidth = 128;//SJR	// standard texture size
 0e0b  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0e0f  c7 80 10 00 00 00 
       80 00 00 00                       mov     dword ptr _gTex+10H[eax],00000080H

						gTex[i].ddsd.dwHeight = 128;//SJR	// standard height
 0e19  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0e1d  c7 80 0c 00 00 00 
       80 00 00 00                       mov     dword ptr _gTex+0cH[eax],00000080H

						ddretval = lpDD->lpVtbl->CreateSurface (lpDD,&(gTex[i].ddsd), &gTex[i].lpDDSTex, NULL);
 0e27  a1 00 00 00 00                    mov     eax,_lpDD
 0e2c  8b 00                             mov     eax,[eax]
 0e2e  6a 00                             push    00000000H
 0e30  6b 55 ec 74                       imul    edx,-14H[ebp],74H
 0e34  bb 00 00 00 00                    mov     ebx,offset _gTex
 0e39  01 da                             add     edx,ebx
 0e3b  52                                push    edx
 0e3c  6b 55 ec 74                       imul    edx,-14H[ebp],74H
 0e40  bb 00 00 00 00                    mov     ebx,offset _gTex
 0e45  01 da                             add     edx,ebx
 0e47  83 c2 04                          add     edx,00000004H
 0e4a  52                                push    edx
 0e4b  ff 35 00 00 00 00                 push    _lpDD
 0e51  ff 50 18                          call    dword ptr +18H[eax]
 0e54  89 45 e8                          mov     -18H[ebp],eax

						if (ddretval != DD_OK)
						{
 0e57  83 7d e8 00                       cmp     dword ptr -18H[ebp],00000000H
 0e5b  74 22                             je      L90

							wsprintf (gszErrMsg, "Could not create texture surface");
 0e5d  b8 7f 00 00 00                    mov     eax,offset L325
 0e62  50                                push    eax
 0e63  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 0e68  50                                push    eax
 0e69  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 0e70  83 c4 08                          add     esp,00000008H

							return FALSE;
						}
 0e73  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 0e7a  e9 2e 01 00 00                    jmp     L103

					}
					// create 3 offscreen surfaces to cache the sprite maps
 0e7f  e9 3e ff ff ff    L90             jmp     L88

					for(i=22;i<25;++i)
					{
 0e84  c7 45 ec 16 00 00 
       00                L91             mov     dword ptr -14H[ebp],00000016H
 0e8b  83 7d ec 19       L92             cmp     dword ptr -14H[ebp],00000019H
 0e8f  7c 0a                             jl      L94
 0e91  e9 bf 00 00 00                    jmp     L96
 0e96  ff 45 ec          L93             inc     dword ptr -14H[ebp]
 0e99  eb f0                             jmp     L92

						ZeroMemory (&(gTex[i].ddsd), sizeof (gTex[i].ddsd));
 0e9b  bb 6c 00 00 00    L94             mov     ebx,0000006cH
 0ea0  31 d2                             xor     edx,edx
 0ea2  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0ea6  b9 00 00 00 00                    mov     ecx,offset _gTex
 0eab  01 c8                             add     eax,ecx
 0ead  83 c0 04                          add     eax,00000004H
 0eb0  e8 00 00 00 00                    call    memset_

						gTex[i].ddsd.dwSize = sizeof (gTex[i].ddsd);
 0eb5  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0eb9  c7 80 04 00 00 00 
       6c 00 00 00                       mov     dword ptr _gTex+4H[eax],0000006cH

						gTex[i].ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH;
 0ec3  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0ec7  c7 80 08 00 00 00 
       06 00 00 00                       mov     dword ptr _gTex+8H[eax],00000006H

						gTex[i].ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_VIDEOMEMORY;
 0ed1  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0ed5  c7 80 6c 00 00 00 
       40 40 00 00                       mov     dword ptr _gTex+6cH[eax],00004040H

						gTex[i].ddsd.dwWidth = 256;//SJR	// standard texture size
 0edf  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0ee3  c7 80 10 00 00 00 
       00 01 00 00                       mov     dword ptr _gTex+10H[eax],00000100H

						gTex[i].ddsd.dwHeight = 256;//SJR	// standard height
 0eed  6b 45 ec 74                       imul    eax,-14H[ebp],74H
 0ef1  c7 80 0c 00 00 00 
       00 01 00 00                       mov     dword ptr _gTex+0cH[eax],00000100H

						ddretval = lpDD->lpVtbl->CreateSurface (lpDD,&(gTex[i].ddsd), &gTex[i].lpDDSTex, NULL);
 0efb  a1 00 00 00 00                    mov     eax,_lpDD
 0f00  8b 00                             mov     eax,[eax]
 0f02  6a 00                             push    00000000H
 0f04  6b 55 ec 74                       imul    edx,-14H[ebp],74H
 0f08  bb 00 00 00 00                    mov     ebx,offset _gTex
 0f0d  01 da                             add     edx,ebx
 0f0f  52                                push    edx
 0f10  6b 55 ec 74                       imul    edx,-14H[ebp],74H
 0f14  bb 00 00 00 00                    mov     ebx,offset _gTex
 0f19  01 da                             add     edx,ebx
 0f1b  83 c2 04                          add     edx,00000004H
 0f1e  52                                push    edx
 0f1f  ff 35 00 00 00 00                 push    _lpDD
 0f25  ff 50 18                          call    dword ptr +18H[eax]
 0f28  89 45 e8                          mov     -18H[ebp],eax

						if (ddretval != DD_OK)
						{
 0f2b  83 7d e8 00                       cmp     dword ptr -18H[ebp],00000000H
 0f2f  74 1f                             je      L95

							wsprintf (gszErrMsg, "Could not create texture surface");
 0f31  b8 a0 00 00 00                    mov     eax,offset L326
 0f36  50                                push    eax
 0f37  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 0f3c  50                                push    eax
 0f3d  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 0f44  83 c4 08                          add     esp,00000008H

							return FALSE;
						}
 0f47  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 0f4e  eb 5d                             jmp     L103

					}
#endif
#if !USE_ATI
				}
#endif
			}
		}
#if USE_ATI
		// create an ATI CIF redering context:
 0f50  e9 41 ff ff ff    L95             jmp     L93

		if (!InitATI3DCIF())
		{
 0f55  e8 00 00 00 00    L96             call    InitATI3DCIF_
 0f5a  85 c0                             test    eax,eax
 0f5c  75 09                             jne     L97

			return FALSE;
		}
		{
			C3D_PVTCF *p;
 0f5e  c7 45 f0 00 00 00 
       00                                mov     dword ptr -10H[ebp],00000000H
 0f65  eb 46                             jmp     L103

			for (i = 0, p = testlist;i<VBUFSIZE;++i)
 0f67  c7 45 ec 00 00 00 
       00                L97             mov     dword ptr -14H[ebp],00000000H
 0f6e  c7 85 d0 fd ff ff 
       00 00 00 00                       mov     dword ptr -230H[ebp],offset _testlist
 0f78  83 7d ec 28       L98             cmp     dword ptr -14H[ebp],00000028H
 0f7c  7c 07                             jl      L100
 0f7e  eb 21                             jmp     L101
 0f80  ff 45 ec          L99             inc     dword ptr -14H[ebp]
 0f83  eb f3                             jmp     L98

				*p++=&testarray[i];
		}	

 0f85  6b 45 ec 28       L100            imul    eax,-14H[ebp],28H
 0f89  ba 00 00 00 00                    mov     edx,offset _testarray
 0f8e  01 c2                             add     edx,eax
 0f90  8b 85 d0 fd ff ff                 mov     eax,-230H[ebp]
 0f96  83 85 d0 fd ff ff 
       04                                add     dword ptr -230H[ebp],00000004H
 0f9d  89 10                             mov     [eax],edx
 0f9f  eb df                             jmp     L99

		JJSLoadSprites();
#endif

	}

 0fa1  e8 00 00 00 00    L101            call    JJSLoadSprites_

	return TRUE;
 0fa6  c7 45 f0 01 00 00 
       00                L102            mov     dword ptr -10H[ebp],00000001H

}			       /* doInit */

 0fad  8b 45 f0          L103            mov     eax,-10H[ebp]
 0fb0  89 ec                             mov     esp,ebp
 0fb2  5d                                pop     ebp
 0fb3  5f                                pop     edi
 0fb4  5e                                pop     esi
 0fb5  59                                pop     ecx
 0fb6  5b                                pop     ebx
 0fb7  c3                                ret     

void	    CopyPal(char *palette, short start, short end)
{
	HRESULT	 ddrval;
	int	     i;

 0fb8  51                CopyPal_        push    ecx
 0fb9  56                                push    esi
 0fba  57                                push    edi
 0fbb  55                                push    ebp
 0fbc  89 e5                             mov     ebp,esp
 0fbe  81 ec 14 00 00 00                 sub     esp,00000014H
 0fc4  89 45 ec                          mov     -14H[ebp],eax
 0fc7  89 55 f8                          mov     -8H[ebp],edx
 0fca  89 5d fc                          mov     -4H[ebp],ebx

	for (i = start; i <= end; i++)
	{
 0fcd  0f bf 45 f8                       movsx   eax,word ptr -8H[ebp]
 0fd1  89 45 f4                          mov     -0cH[ebp],eax
 0fd4  0f bf 45 fc       L104            movsx   eax,word ptr -4H[ebp]
 0fd8  3b 45 f4                          cmp     eax,-0cH[ebp]
 0fdb  7d 0d                             jge     L106
 0fdd  e9 df 00 00 00                    jmp     L107
 0fe2  8b 45 f4          L105            mov     eax,-0cH[ebp]
 0fe5  ff 45 f4                          inc     dword ptr -0cH[ebp]
 0fe8  eb ea                             jmp     L104

		ddPalette[i].peRed = *palette++;
 0fea  8b 45 ec          L106            mov     eax,-14H[ebp]
 0fed  ff 45 ec                          inc     dword ptr -14H[ebp]
 0ff0  8b 55 f4                          mov     edx,-0cH[ebp]
 0ff3  c1 e2 02                          shl     edx,02H
 0ff6  8a 00                             mov     al,[eax]
 0ff8  88 82 00 00 00 00                 mov     _ddPalette[edx],al

		ddPalette[i].peGreen = *palette++;
 0ffe  8b 45 ec                          mov     eax,-14H[ebp]
 1001  ff 45 ec                          inc     dword ptr -14H[ebp]
 1004  8b 55 f4                          mov     edx,-0cH[ebp]
 1007  c1 e2 02                          shl     edx,02H
 100a  8a 00                             mov     al,[eax]
 100c  88 82 01 00 00 00                 mov     _ddPalette+1H[edx],al

		ddPalette[i].peBlue = *palette++;
 1012  8b 45 ec                          mov     eax,-14H[ebp]
 1015  ff 45 ec                          inc     dword ptr -14H[ebp]
 1018  8b 55 f4                          mov     edx,-0cH[ebp]
 101b  c1 e2 02                          shl     edx,02H
 101e  8a 00                             mov     al,[eax]
 1020  88 82 02 00 00 00                 mov     _ddPalette+2H[edx],al

		ddPalette[i].peFlags = 0;
#if USE_ATI
 1026  8b 45 f4                          mov     eax,-0cH[ebp]
 1029  c1 e0 02                          shl     eax,02H
 102c  c6 80 03 00 00 00 
       00                                mov     byte ptr _ddPalette+3H[eax],00H

		ATIpalette[i].red=(ddPalette[i].peRed)>>3;
 1033  8b 45 f4                          mov     eax,-0cH[ebp]
 1036  01 c0                             add     eax,eax
 1038  8b 55 f4                          mov     edx,-0cH[ebp]
 103b  c1 e2 02                          shl     edx,02H
 103e  8a 92 00 00 00 00                 mov     dl,_ddPalette[edx]
 1044  81 e2 ff 00 00 00                 and     edx,000000ffH
 104a  c1 fa 03                          sar     edx,03H
 104d  83 e2 1f                          and     edx,0000001fH
 1050  80 a0 01 00 00 00 
       83                                and     byte ptr _ATIpalette+1H[eax],83H
 1057  c1 e2 0a                          shl     edx,0aH
 105a  66 09 90 00 00 00 
       00                                or      _ATIpalette[eax],dx

		ATIpalette[i].green=(ddPalette[i].peGreen)>>3;
 1061  8b 45 f4                          mov     eax,-0cH[ebp]
 1064  01 c0                             add     eax,eax
 1066  8b 55 f4                          mov     edx,-0cH[ebp]
 1069  c1 e2 02                          shl     edx,02H
 106c  8a 92 01 00 00 00                 mov     dl,_ddPalette+1H[edx]
 1072  81 e2 ff 00 00 00                 and     edx,000000ffH
 1078  c1 fa 03                          sar     edx,03H
 107b  83 e2 1f                          and     edx,0000001fH
 107e  66 81 a0 00 00 00 
       00 1f fc                          and     word ptr _ATIpalette[eax],0fc1fH
 1087  c1 e2 05                          shl     edx,05H
 108a  66 09 90 00 00 00 
       00                                or      _ATIpalette[eax],dx

		ATIpalette[i].blue=(ddPalette[i].peBlue)>>3;
#endif
 1091  8b 45 f4                          mov     eax,-0cH[ebp]
 1094  01 c0                             add     eax,eax
 1096  8b 55 f4                          mov     edx,-0cH[ebp]
 1099  c1 e2 02                          shl     edx,02H
 109c  8a 92 02 00 00 00                 mov     dl,_ddPalette+2H[edx]
 10a2  81 e2 ff 00 00 00                 and     edx,000000ffH
 10a8  c1 fa 03                          sar     edx,03H
 10ab  83 e2 1f                          and     edx,0000001fH
 10ae  80 a0 00 00 00 00 
       e0                                and     byte ptr _ATIpalette[eax],0e0H
 10b5  66 09 90 00 00 00 
       00                                or      _ATIpalette[eax],dx

	}
#if !USE_ATI
	ddrval = lpDDPalette->lpVtbl->SetEntries(lpDDPalette,
						 DDSETPAL_IMMEDIATE,
						 start,
						 (end - start) + 1,
						 ddPalette);
#endif
 10bc  e9 21 ff ff ff                    jmp     L105

}

 10c1  89 ec             L107            mov     esp,ebp
 10c3  5d                                pop     ebp
 10c4  5f                                pop     edi
 10c5  5e                                pop     esi
 10c6  59                                pop     ecx
 10c7  c3                                ret     

void initrandy()
{
	short i;

 10c8  53                initrandy_      push    ebx
 10c9  51                                push    ecx
 10ca  52                                push    edx
 10cb  56                                push    esi
 10cc  57                                push    edi
 10cd  55                                push    ebp
 10ce  89 e5                             mov     ebp,esp
 10d0  81 ec 04 00 00 00                 sub     esp,00000004H

	for (i = 0; i < 2000; i++)
 10d6  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 10dd  66 81 7d fc d0 07 L108            cmp     word ptr -4H[ebp],07d0H
 10e3  7c 0a                             jl      L110
 10e5  eb 21                             jmp     L111
 10e7  8b 45 fc          L109            mov     eax,-4H[ebp]
 10ea  ff 45 fc                          inc     dword ptr -4H[ebp]
 10ed  eb ee                             jmp     L108

		randlist[i] = rand() & 0x7FFF;

 10ef  e8 00 00 00 00    L110            call    rand_
 10f4  80 e4 7f                          and     ah,7fH
 10f7  89 c2                             mov     edx,eax
 10f9  0f bf 45 fc                       movsx   eax,word ptr -4H[ebp]
 10fd  01 c0                             add     eax,eax
 10ff  66 89 90 00 00 00 
       00                                mov     _randlist[eax],dx
 1106  eb df                             jmp     L109

	randnum = &randlist[0];;
 1108  c7 05 00 00 00 00 
       00 00 00 00       L111            mov     dword ptr _randnum,offset _randlist

	ctr = 0;
 1112  66 c7 05 00 00 00 
       00 00 00                          mov     word ptr _ctr,0000H

}

 111b  89 ec                             mov     esp,ebp
 111d  5d                                pop     ebp
 111e  5f                                pop     edi
 111f  5e                                pop     esi
 1120  5a                                pop     edx
 1121  59                                pop     ecx
 1122  5b                                pop     ebx
 1123  c3                                ret     

short randy()
{
	short num;

 1124  53                randy_          push    ebx
 1125  51                                push    ecx
 1126  52                                push    edx
 1127  56                                push    esi
 1128  57                                push    edi
 1129  55                                push    ebp
 112a  89 e5                             mov     ebp,esp
 112c  81 ec 08 00 00 00                 sub     esp,00000008H

	num = *randnum++;

 1132  a1 00 00 00 00                    mov     eax,_randnum
 1137  83 05 00 00 00 00 
       02                                add     dword ptr _randnum,00000002H
 113e  66 8b 00                          mov     ax,[eax]
 1141  89 45 f8                          mov     -8H[ebp],eax

	ctr++;
 1144  66 ff 05 00 00 00 
       00                                inc     word ptr _ctr

	if (ctr == 2000)
	{
 114b  66 81 3d 00 00 00 
       00 d0 07                          cmp     word ptr _ctr,07d0H
 1154  75 13                             jne     L112

		randnum = &randlist[0];;
 1156  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _randnum,offset _randlist

		ctr = 0;
	}

 1160  66 c7 05 00 00 00 
       00 00 00                          mov     word ptr _ctr,0000H

	return num;

 1169  8b 45 f8          L112            mov     eax,-8H[ebp]
 116c  89 45 fc                          mov     -4H[ebp],eax

}

/*
 * WinMain - initialization, message loop
 */
 116f  8b 45 fc                          mov     eax,-4H[ebp]
 1172  89 ec                             mov     esp,ebp
 1174  5d                                pop     ebp
 1175  5f                                pop     edi
 1176  5e                                pop     esi
 1177  5a                                pop     edx
 1178  59                                pop     ecx
 1179  5b                                pop     ebx
 117a  c3                                ret     

int PASCAL      WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
					LPSTR lpCmdLine, int nCmdShow)
{
	long tmp;
	int retval;

 117b  53                _WinMain@16     push    ebx
 117c  56                                push    esi
 117d  57                                push    edi
 117e  55                                push    ebp
 117f  89 e5                             mov     ebp,esp
 1181  81 ec 0c 00 00 00                 sub     esp,0000000cH

	initrandy();
 1187  e8 00 00 00 00                    call    initrandy_

	tmp = randy();
	lpCmdLine = lpCmdLine;
	hPrevInstance = hPrevInstance;
 118c  e8 00 00 00 00                    call    randy_
 1191  98                                cwde    
 1192  89 45 f4                          mov     -0cH[ebp],eax

	DebugScreen = (char *) malloc(640 * 480);
 1195  b8 00 b0 04 00                    mov     eax,0004b000H
 119a  e8 00 00 00 00                    call    malloc_
 119f  a3 00 00 00 00                    mov     _DebugScreen,eax

	WinWidth = GAME_WIDTH;
 11a4  66 c7 05 00 00 00 
       00 40 01                          mov     word ptr _WinWidth,0140H

	WinHeight = GAME_HEIGHT;
 11ad  66 c7 05 00 00 00 
       00 f0 00                          mov     word ptr _WinHeight,00f0H

	WinHeightX2 = WinHeight * 2;
	// Initialise Direct Draw
 11b6  66 a1 00 00 00 00                 mov     ax,_WinHeight
 11bc  01 c0                             add     eax,eax
 11be  66 a3 00 00 00 00                 mov     _WinHeightX2,ax

	if (!doInit(hInstance, nCmdShow))
	{
 11c4  8b 55 20                          mov     edx,+20H[ebp]
 11c7  8b 45 14                          mov     eax,+14H[ebp]
 11ca  e8 00 00 00 00                    call    doInit_
 11cf  85 c0                             test    eax,eax
 11d1  75 09                             jne     L113

		return FALSE;
	}

 11d3  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 11da  eb 70                             jmp     L115

	SaveDirBase = (char *)malloc(120);
 11dc  b8 78 00 00 00    L113            mov     eax,00000078H
 11e1  e8 00 00 00 00                    call    malloc_
 11e6  a3 00 00 00 00                    mov     _SaveDirBase,eax

	retval = ShellGetGameDirectory(SaveDirBase);
 11eb  a1 00 00 00 00                    mov     eax,_SaveDirBase
 11f0  e8 00 00 00 00                    call    ShellGetGameDirectory_
 11f5  89 45 f8                          mov     -8H[ebp],eax

	if (retval != ERROR_SUCCESS)
 11f8  83 7d f8 00                       cmp     dword ptr -8H[ebp],00000000H
 11fc  74 0f                             je      L114

		strcpy(SaveDirBase, "c:\wipeout");

 11fe  ba c1 00 00 00                    mov     edx,offset L327
 1203  a1 00 00 00 00                    mov     eax,_SaveDirBase
 1208  e8 00 00 00 00                    call    strcpy_

	CDStop();
 120d  e8 00 00 00 00    L114            call    CDStop_

	joySetCapture(hwnd, JOYSTICKID1, 50, TRUE);
 1212  6a 01                             push    00000001H
 1214  6a 32                             push    00000032H
 1216  6a 00                             push    00000000H
 1218  ff 35 00 00 00 00                 push    _hwnd
 121e  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__joySetCapture@16

	ShowCursor(FALSE);
 1225  6a 00                             push    00000000H
 1227  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__ShowCursor@4

	oldmain();
 122e  e8 00 00 00 00                    call    oldmain_

  	ShowCursor(TRUE);
 1233  6a 01                             push    00000001H
 1235  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__ShowCursor@4

  	joyReleaseCapture(JOYSTICKID1);
 123c  6a 00                             push    00000000H
 123e  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__joyReleaseCapture@4

	return (0);

 1245  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H

}			       /* WinMain */

 124c  8b 45 fc          L115            mov     eax,-4H[ebp]
 124f  89 ec                             mov     esp,ebp
 1251  5d                                pop     ebp
 1252  5f                                pop     edi
 1253  5e                                pop     esi
 1254  5b                                pop     ebx
 1255  c2 10 00                          ret     0010H

int	     ProcessMessages(void)
{
	MSG	     msg;
 1258                    ProcessMessages_:
 1258  53                                push    ebx
 1259  51                                push    ecx
 125a  52                                push    edx
 125b  56                                push    esi
 125c  57                                push    edi
 125d  55                                push    ebp
 125e  89 e5                             mov     ebp,esp
 1260  81 ec 20 00 00 00                 sub     esp,00000020H

	while (PeekMessage(&msg, NULL, 0, 0, PM_NOREMOVE))      // Clear all outstanding messages
	{
 1266  6a 00                             push    00000000H
 1268  6a 00                             push    00000000H
 126a  6a 00                             push    00000000H
 126c  6a 00                             push    00000000H
 126e  8d 45 e0                          lea     eax,-20H[ebp]
 1271  50                                push    eax
 1272  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__PeekMessageA@20
 1279  85 c0                             test    eax,eax
 127b  74 3d                             je      L117

		if (GetMessage(&msg, NULL, 0, 0))
		{
 127d  6a 00                             push    00000000H
 127f  6a 00                             push    00000000H
 1281  6a 00                             push    00000000H
 1283  8d 45 e0                          lea     eax,-20H[ebp]
 1286  50                                push    eax
 1287  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetMessageA@16
 128e  85 c0                             test    eax,eax
 1290  74 1f                             je      L116

			TranslateMessage(&msg);
 1292  8d 45 e0                          lea     eax,-20H[ebp]
 1295  50                                push    eax
 1296  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__TranslateMessage@4

			DispatchMessage(&msg);
 129d  8d 45 e0                          lea     eax,-20H[ebp]
 12a0  50                                push    eax
 12a1  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__DispatchMessageA@4

			return (0);
		}
		else
		{
 12a8  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 12af  eb 10                             jmp     L118

			return (1);
		}
	}
 12b1  c7 45 fc 01 00 00 
       00                L116            mov     dword ptr -4H[ebp],00000001H
 12b8  eb 07                             jmp     L118

	return (0);
 12ba  c7 45 fc 00 00 00 
       00                L117            mov     dword ptr -4H[ebp],00000000H

}

DDSURFACEDESC   ddsd;
DDSURFACEDESC   backDdsd;
int	     old_pitch = 0;

 12c1  8b 45 fc          L118            mov     eax,-4H[ebp]
 12c4  89 ec                             mov     esp,ebp
 12c6  5d                                pop     ebp
 12c7  5f                                pop     edi
 12c8  5e                                pop     esi
 12c9  5a                                pop     edx
 12ca  59                                pop     ecx
 12cb  5b                                pop     ebx
 12cc  c3                                ret     

int	     LockBackBuffer(void)
{
	LPBYTE	  ptr;
	// int			i;
	HRESULT	 ddrval;
 12cd  53                LockBackBuffer_ push    ebx
 12ce  51                                push    ecx
 12cf  52                                push    edx
 12d0  56                                push    esi
 12d1  57                                push    edi
 12d2  55                                push    ebp
 12d3  89 e5                             mov     ebp,esp
 12d5  81 ec 0c 00 00 00                 sub     esp,0000000cH

	if (bActive && !backLocked)
	{
 12db  83 3d 00 00 00 00 
       00                                cmp     dword ptr _bActive,00000000H
 12e2  74 09                             je      L119
 12e4  83 3d 00 00 00 00 
       00                                cmp     dword ptr _backLocked,00000000H
 12eb  74 05                             je      L120
 12ed  e9 d7 00 00 00    L119            jmp     L125

		ZeroMemory(&ddsd, sizeof(ddsd));
 12f2  bb 6c 00 00 00    L120            mov     ebx,0000006cH
 12f7  31 d2                             xor     edx,edx
 12f9  b8 00 00 00 00                    mov     eax,offset _ddsd
 12fe  e8 00 00 00 00                    call    memset_

		ddsd.dwSize = sizeof(ddsd);

 1303  c7 05 00 00 00 00 
       6c 00 00 00                       mov     dword ptr _ddsd,0000006cH

		ddrval = lpDDSBack->lpVtbl->Lock(lpDDSBack, NULL, &ddsd, DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT, NULL);
#if DEBUG_LOCKED
		WinPitch = WinWidth;
		RealPitch = ddsd.lPitch;
#else
 130d  a1 00 00 00 00                    mov     eax,_lpDDSBack
 1312  8b 00                             mov     eax,[eax]
 1314  6a 00                             push    00000000H
 1316  6a 01                             push    00000001H
 1318  ba 00 00 00 00                    mov     edx,offset _ddsd
 131d  52                                push    edx
 131e  6a 00                             push    00000000H
 1320  ff 35 00 00 00 00                 push    _lpDDSBack
 1326  ff 50 64                          call    dword ptr +64H[eax]
 1329  89 45 f8                          mov     -8H[ebp],eax

		WinPitch = ddsd.lPitch;
#endif
 132c  a1 10 00 00 00                    mov     eax,_ddsd+10H
 1331  a3 00 00 00 00                    mov     _WinPitch,eax

		if (WinPitch != old_pitch)      // pitch has changed
		{
 1336  a1 00 00 00 00                    mov     eax,_WinPitch
 133b  3b 05 00 00 00 00                 cmp     eax,_old_pitch
 1341  74 0f                             je      L121

			ResetPitch();
 1343  e8 00 00 00 00                    call    ResetPitch_

			old_pitch = WinPitch;
		}

 1348  a1 00 00 00 00                    mov     eax,_WinPitch
 134d  a3 00 00 00 00                    mov     _old_pitch,eax

		if (ddrval == DDERR_SURFACEBUSY)
		{
 1352  81 7d f8 ae 01 76 
       88                L121            cmp     dword ptr -8H[ebp],887601aeH
 1359  75 12                             jne     L122

			MessageBeep(0);
 135b  6a 00                             push    00000000H
 135d  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

			return (1);
		}
 1364  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H
 136b  eb 63                             jmp     L126

		if (ddrval == DDERR_SURFACELOST)
		{
 136d  81 7d f8 c2 01 76 
       88                L122            cmp     dword ptr -8H[ebp],887601c2H
 1374  75 22                             jne     L123

			MessageBeep(0);
 1376  6a 00                             push    00000000H
 1378  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

			lpDDSBack->lpVtbl->Restore(lpDDSBack);
 137f  a1 00 00 00 00                    mov     eax,_lpDDSBack
 1384  8b 00                             mov     eax,[eax]
 1386  ff 35 00 00 00 00                 push    _lpDDSBack
 138c  ff 50 6c                          call    dword ptr +6cH[eax]

			return (1);
		}

 138f  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H
 1396  eb 38                             jmp     L126

		ptr = (LPBYTE) ddsd.lpSurface;
 1398  a1 24 00 00 00    L123            mov     eax,_ddsd+24H
 139d  89 45 f4                          mov     -0cH[ebp],eax

		if (ptr == NULL)
 13a0  83 7d f4 00                       cmp     dword ptr -0cH[ebp],00000000H
 13a4  75 09                             jne     L124

			return (1);
		// Set my render buffers to the back screen
#if DEBUG_LOCKED
		CurBuffer = (char *) DebugScreen;
		CurBufferJ = (char *) DebugScreen;
		RealScreen = (char *) ptr;
#else
 13a6  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H
 13ad  eb 21                             jmp     L126

		CurBuffer = (char *) ptr;
 13af  8b 45 f4          L124            mov     eax,-0cH[ebp]
 13b2  a3 00 00 00 00                    mov     _CurBuffer,eax

		CurBufferJ = (char *) ptr;
#endif
 13b7  8b 45 f4                          mov     eax,-0cH[ebp]
 13ba  a3 00 00 00 00                    mov     _CurBufferJ,eax

		backLocked=TRUE;
	}

 13bf  c7 05 00 00 00 00 
       01 00 00 00                       mov     dword ptr _backLocked,00000001H

	return (0);

 13c9  c7 45 fc 00 00 00 
       00                L125            mov     dword ptr -4H[ebp],00000000H

}

 13d0  8b 45 fc          L126            mov     eax,-4H[ebp]
 13d3  89 ec                             mov     esp,ebp
 13d5  5d                                pop     ebp
 13d6  5f                                pop     edi
 13d7  5e                                pop     esi
 13d8  5a                                pop     edx
 13d9  59                                pop     ecx
 13da  5b                                pop     ebx
 13db  c3                                ret     

void	    WinBeep(void)
{
 13dc  53                WinBeep_        push    ebx
 13dd  51                                push    ecx
 13de  52                                push    edx
 13df  56                                push    esi
 13e0  57                                push    edi
 13e1  55                                push    ebp
 13e2  89 e5                             mov     ebp,esp
 13e4  81 ec 00 00 00 00                 sub     esp,00000000H

	MessageBeep(0);
 13ea  6a 00                             push    00000000H
 13ec  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

}
 13f3  5d                                pop     ebp
 13f4  5f                                pop     edi
 13f5  5e                                pop     esi
 13f6  5a                                pop     edx
 13f7  59                                pop     ecx
 13f8  5b                                pop     ebx
 13f9  c3                                ret     

void	    UnlockBackBuffer(void)
{
#if DEBUG_LOCKED
	RECT	    rect;

	rect.left = 0;
	rect.top = 0;
	rect.right = WinWidth;
	rect.bottom = WinHeight;

	// memcpy(RealScreen, (DebugScreen + (640*150)), ((WinHeight - 150) *	   WinWidth));
	PitchMemCpy(RealScreen, DebugScreen, &rect);
	memset(DebugScreen, 0, (WinHeight * WinWidth));
#endif
 13fa                    UnlockBackBuffer_:
 13fa  53                                push    ebx
 13fb  51                                push    ecx
 13fc  52                                push    edx
 13fd  56                                push    esi
 13fe  57                                push    edi
 13ff  55                                push    ebp
 1400  89 e5                             mov     ebp,esp
 1402  81 ec 00 00 00 00                 sub     esp,00000000H

	if (bActive && backLocked)
	{
 1408  83 3d 00 00 00 00 
       00                                cmp     dword ptr _bActive,00000000H
 140f  74 09                             je      L127
 1411  83 3d 00 00 00 00 
       00                                cmp     dword ptr _backLocked,00000000H
 1418  75 02                             jne     L128
 141a  eb 23             L127            jmp     L129

		lpDDSBack->lpVtbl->Unlock(lpDDSBack, ddsd.lpSurface);
 141c  a1 00 00 00 00    L128            mov     eax,_lpDDSBack
 1421  8b 00                             mov     eax,[eax]
 1423  ff 35 24 00 00 00                 push    _ddsd+24H
 1429  ff 35 00 00 00 00                 push    _lpDDSBack
 142f  ff 90 80 00 00 00                 call    dword ptr +80H[eax]

		backLocked = FALSE;
	}
 1435  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _backLocked,00000000H

}


 143f  5d                L129            pop     ebp
 1440  5f                                pop     edi
 1441  5e                                pop     esi
 1442  5a                                pop     edx
 1443  59                                pop     ecx
 1444  5b                                pop     ebx
 1445  c3                                ret     

int	     LockClearBuffer(void)
{
	LPBYTE	  ptr;
	// int			i;
	HRESULT	 ddrval;
 1446                    LockClearBuffer_:
 1446  53                                push    ebx
 1447  51                                push    ecx
 1448  52                                push    edx
 1449  56                                push    esi
 144a  57                                push    edi
 144b  55                                push    ebp
 144c  89 e5                             mov     ebp,esp
 144e  81 ec 0c 00 00 00                 sub     esp,0000000cH

	if (bActive)
	{
 1454  83 3d 00 00 00 00 
       00                                cmp     dword ptr _bActive,00000000H
 145b  0f 84 a9 00 00 00                 je      L133

		ZeroMemory(&backDdsd, sizeof(backDdsd));
 1461  bb 6c 00 00 00                    mov     ebx,0000006cH
 1466  31 d2                             xor     edx,edx
 1468  b8 00 00 00 00                    mov     eax,offset _backDdsd
 146d  e8 00 00 00 00                    call    memset_

		backDdsd.dwSize = sizeof(backDdsd);

 1472  c7 05 00 00 00 00 
       6c 00 00 00                       mov     dword ptr _backDdsd,0000006cH

		ddrval = lpBack_Buffer->lpVtbl->Lock(lpBack_Buffer, NULL, &backDdsd, DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT, NULL);

 147c  a1 00 00 00 00                    mov     eax,_lpBack_Buffer
 1481  8b 00                             mov     eax,[eax]
 1483  6a 00                             push    00000000H
 1485  6a 01                             push    00000001H
 1487  ba 00 00 00 00                    mov     edx,offset _backDdsd
 148c  52                                push    edx
 148d  6a 00                             push    00000000H
 148f  ff 35 00 00 00 00                 push    _lpBack_Buffer
 1495  ff 50 64                          call    dword ptr +64H[eax]
 1498  89 45 f8                          mov     -8H[ebp],eax

		if (ddrval == DDERR_SURFACEBUSY)
		{
 149b  81 7d f8 ae 01 76 
       88                                cmp     dword ptr -8H[ebp],887601aeH
 14a2  75 12                             jne     L130

			MessageBeep(0);
 14a4  6a 00                             push    00000000H
 14a6  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

			return (1);
		}
 14ad  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H
 14b4  eb 5b                             jmp     L134

		if (ddrval == DDERR_SURFACELOST)
		{
 14b6  81 7d f8 c2 01 76 
       88                L130            cmp     dword ptr -8H[ebp],887601c2H
 14bd  75 22                             jne     L131

			MessageBeep(0);
 14bf  6a 00                             push    00000000H
 14c1  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

			lpBack_Buffer->lpVtbl->Restore(lpBack_Buffer);
 14c8  a1 00 00 00 00                    mov     eax,_lpBack_Buffer
 14cd  8b 00                             mov     eax,[eax]
 14cf  ff 35 00 00 00 00                 push    _lpBack_Buffer
 14d5  ff 50 6c                          call    dword ptr +6cH[eax]

			return (1);
		}

 14d8  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H
 14df  eb 30                             jmp     L134

		RealBackPitch = backDdsd.lPitch;
 14e1  a1 10 00 00 00    L131            mov     eax,_backDdsd+10H
 14e6  a3 00 00 00 00                    mov     _RealBackPitch,eax

		ptr = (LPBYTE) backDdsd.lpSurface;
 14eb  a1 24 00 00 00                    mov     eax,_backDdsd+24H
 14f0  89 45 f4                          mov     -0cH[ebp],eax

		if (ptr == NULL)
 14f3  83 7d f4 00                       cmp     dword ptr -0cH[ebp],00000000H
 14f7  75 09                             jne     L132

			return (1);
		// Set my render buffers to the back screen
#if DEBUG_LOCKED
		backscreen = (char *) DebugScreen;
#else
 14f9  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H
 1500  eb 0f                             jmp     L134

		backscreen = (char *) ptr;
#endif
	}

 1502  8b 45 f4          L132            mov     eax,-0cH[ebp]
 1505  a3 00 00 00 00                    mov     _backscreen,eax

	return (0);

 150a  c7 45 fc 00 00 00 
       00                L133            mov     dword ptr -4H[ebp],00000000H

}

 1511  8b 45 fc          L134            mov     eax,-4H[ebp]
 1514  89 ec                             mov     esp,ebp
 1516  5d                                pop     ebp
 1517  5f                                pop     edi
 1518  5e                                pop     esi
 1519  5a                                pop     edx
 151a  59                                pop     ecx
 151b  5b                                pop     ebx
 151c  c3                                ret     

void	    UnlockClearBuffer(void)
{
#if DEBUG_LOCKED
	memcpy(RealScreen, DebugScreen, 320 * 240);
#endif
 151d                    UnlockClearBuffer_:
 151d  53                                push    ebx
 151e  51                                push    ecx
 151f  52                                push    edx
 1520  56                                push    esi
 1521  57                                push    edi
 1522  55                                push    ebp
 1523  89 e5                             mov     ebp,esp
 1525  81 ec 00 00 00 00                 sub     esp,00000000H

	if (bActive)
	{
 152b  83 3d 00 00 00 00 
       00                                cmp     dword ptr _bActive,00000000H
 1532  74 19                             je      L135

		lpBack_Buffer->lpVtbl->Unlock(lpBack_Buffer, backDdsd.lpSurface);
	}
 1534  a1 00 00 00 00                    mov     eax,_lpBack_Buffer
 1539  8b 00                             mov     eax,[eax]
 153b  ff 35 24 00 00 00                 push    _backDdsd+24H
 1541  ff 35 00 00 00 00                 push    _lpBack_Buffer
 1547  ff 90 80 00 00 00                 call    dword ptr +80H[eax]

}

 154d  5d                L135            pop     ebp
 154e  5f                                pop     edi
 154f  5e                                pop     esi
 1550  5a                                pop     edx
 1551  59                                pop     ecx
 1552  5b                                pop     ebx
 1553  c3                                ret     

void	    BltClearToScreen(void)
{
	RECT	    dest_rect, src_rect;
	DWORD	   dwFlags;
	DDBLTFX	 DDBltFX;
	HRESULT	 ddrval;

 1554                    BltClearToScreen_:
 1554  53                                push    ebx
 1555  51                                push    ecx
 1556  52                                push    edx
 1557  56                                push    esi
 1558  57                                push    edi
 1559  55                                push    ebp
 155a  89 e5                             mov     ebp,esp
 155c  81 ec 8c 00 00 00                 sub     esp,0000008cH

	dest_rect.top = dest_rect.left = 0;
#if USE_ATI
 1562  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 1569  8b 45 d8                          mov     eax,-28H[ebp]
 156c  89 45 dc                          mov     -24H[ebp],eax

	dest_rect.bottom = 239; //WinHeight;
#else
	dest_rect.bottom = 199; //WinHeight;
#endif
 156f  c7 45 e4 ef 00 00 
       00                                mov     dword ptr -1cH[ebp],000000efH

	dest_rect.right = 319; //WinWidth;

 1576  c7 45 e0 3f 01 00 
       00                                mov     dword ptr -20H[ebp],0000013fH

	src_rect.top = src_rect.left = 0;
#if USE_ATI
 157d  c7 45 e8 00 00 00 
       00                                mov     dword ptr -18H[ebp],00000000H
 1584  8b 45 e8                          mov     eax,-18H[ebp]
 1587  89 45 ec                          mov     -14H[ebp],eax

	src_rect.bottom = 239;
#else
	src_rect.bottom = 199;
#endif
 158a  c7 45 f4 ef 00 00 
       00                                mov     dword ptr -0cH[ebp],000000efH

	src_rect.right = 319;

 1591  c7 45 f0 3f 01 00 
       00                                mov     dword ptr -10H[ebp],0000013fH

	DDBltFX.dwSize = sizeof(DDBltFX);

 1598  c7 85 74 ff ff ff 
       64 00 00 00                       mov     dword ptr -8cH[ebp],00000064H

	dwFlags = DDBLT_WAIT;

 15a2  c7 45 f8 00 00 00 
       01                                mov     dword ptr -8H[ebp],01000000H

	ddrval = lpDDSBack->lpVtbl->Blt(lpDDSBack, &dest_rect, lpBack_Buffer, &src_rect, dwFlags, &DDBltFX);
 15a9  a1 00 00 00 00                    mov     eax,_lpDDSBack
 15ae  8b 00                             mov     eax,[eax]
 15b0  8d 95 74 ff ff ff                 lea     edx,-8cH[ebp]
 15b6  52                                push    edx
 15b7  8b 55 f8                          mov     edx,-8H[ebp]
 15ba  52                                push    edx
 15bb  8d 55 e8                          lea     edx,-18H[ebp]
 15be  52                                push    edx
 15bf  ff 35 00 00 00 00                 push    _lpBack_Buffer
 15c5  8d 55 d8                          lea     edx,-28H[ebp]
 15c8  52                                push    edx
 15c9  ff 35 00 00 00 00                 push    _lpDDSBack
 15cf  ff 50 14                          call    dword ptr +14H[eax]
 15d2  89 45 fc                          mov     -4H[ebp],eax

	if (ddrval != DD_OK)
	{
		// Msg("Blt copy failed err=%d", ddrval);
 15d5  83 7d fc 00                       cmp     dword ptr -4H[ebp],00000000H
 15d9  74 33                             je      L139

		switch (ddrval)
		{
		case DDERR_SURFACELOST:
 15db  81 7d fc ae 01 76 
       88                                cmp     dword ptr -4H[ebp],887601aeH
 15e2  72 14                             jb      L136
 15e4  81 7d fc ae 01 76 
       88                                cmp     dword ptr -4H[ebp],887601aeH
 15eb  76 18                             jbe     L138
 15ed  81 7d fc c2 01 76 
       88                                cmp     dword ptr -4H[ebp],887601c2H
 15f4  74 04                             je      L137
 15f6  eb 16                             jmp     L139
 15f8  eb 14             L136            jmp     L139

			MessageBeep(0);
 15fa  6a 00             L137            push    00000000H
 15fc  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

			break;
		case DDERR_SURFACEBUSY:
 1603  eb 09                             jmp     L139

			MessageBeep(0);
			break;
		}
		;
	}
 1605  6a 00             L138            push    00000000H
 1607  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

}

 160e  89 ec             L139            mov     esp,ebp
 1610  5d                                pop     ebp
 1611  5f                                pop     edi
 1612  5e                                pop     esi
 1613  5a                                pop     edx
 1614  59                                pop     ecx
 1615  5b                                pop     ebx
 1616  c3                                ret     

void	    DDSwap(void)
{
 1617  53                DDSwap_         push    ebx
 1618  51                                push    ecx
 1619  52                                push    edx
 161a  56                                push    esi
 161b  57                                push    edi
 161c  55                                push    ebp
 161d  89 e5                             mov     ebp,esp
 161f  81 ec 04 00 00 00                 sub     esp,00000004H

	if (bActive)
	{
		while (1)
		{
			HRESULT	 ddrval;
 1625  83 3d 00 00 00 00 
       00                                cmp     dword ptr _bActive,00000000H
 162c  74 48                             je      L142

			ddrval = lpDDSPrimary->lpVtbl->Flip(lpDDSPrimary, NULL, 0);
 162e  a1 00 00 00 00    L140            mov     eax,_lpDDSPrimary
 1633  8b 00                             mov     eax,[eax]
 1635  6a 00                             push    00000000H
 1637  6a 00                             push    00000000H
 1639  ff 35 00 00 00 00                 push    _lpDDSPrimary
 163f  ff 50 2c                          call    dword ptr +2cH[eax]
 1642  89 45 fc                          mov     -4H[ebp],eax

			if (ddrval == DD_OK)
			{
				break;
			}
 1645  83 7d fc 00                       cmp     dword ptr -4H[ebp],00000000H
 1649  74 2b                             je      L142

			if (ddrval == DDERR_SURFACELOST)
			{
 164b  81 7d fc c2 01 76 
       88                                cmp     dword ptr -4H[ebp],887601c2H
 1652  75 19                             jne     L141

				ddrval = lpDDSPrimary->lpVtbl->Restore(lpDDSPrimary);
 1654  a1 00 00 00 00                    mov     eax,_lpDDSPrimary
 1659  8b 00                             mov     eax,[eax]
 165b  ff 35 00 00 00 00                 push    _lpDDSPrimary
 1661  ff 50 6c                          call    dword ptr +6cH[eax]
 1664  89 45 fc                          mov     -4H[ebp],eax

				if (ddrval != DD_OK)
				{
					break;
				}
			}
 1667  83 7d fc 00                       cmp     dword ptr -4H[ebp],00000000H
 166b  75 09                             jne     L142

			if (ddrval != DDERR_WASSTILLDRAWING)
			{
				break;
			}
		}
	}
 166d  81 7d fc 1c 02 76 
       88                L141            cmp     dword ptr -4H[ebp],8876021cH
 1674  74 b8                             je      L140

}

 1676  89 ec             L142            mov     esp,ebp
 1678  5d                                pop     ebp
 1679  5f                                pop     edi
 167a  5e                                pop     esi
 167b  5a                                pop     edx
 167c  59                                pop     ecx
 167d  5b                                pop     ebx
 167e  c3                                ret     

void	    DrawIT(void)
{
	DDSURFACEDESC   ddsd;
	LPBYTE	  ptr;
	// int			i;
	HRESULT	 ddrval;
	static int      err_count = 0;

	// Flip surfaces
 167f  53                DrawIT_         push    ebx
 1680  51                                push    ecx
 1681  52                                push    edx
 1682  56                                push    esi
 1683  57                                push    edi
 1684  55                                push    ebp
 1685  89 e5                             mov     ebp,esp
 1687  81 ec 78 00 00 00                 sub     esp,00000078H

	if (bActive)
	{
 168d  83 3d 00 00 00 00 
       00                                cmp     dword ptr _bActive,00000000H
 1694  0f 84 e3 00 00 00                 je      L147

		ZeroMemory(&ddsd, sizeof(ddsd));
 169a  bb 6c 00 00 00                    mov     ebx,0000006cH
 169f  31 d2                             xor     edx,edx
 16a1  8d 45 8c                          lea     eax,-74H[ebp]
 16a4  e8 00 00 00 00                    call    memset_

		ddsd.dwSize = sizeof(ddsd);

 16a9  c7 45 8c 6c 00 00 
       00                                mov     dword ptr -74H[ebp],0000006cH

		ddrval = lpDDSBack->lpVtbl->Lock(lpDDSBack, NULL, &ddsd, DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT, NULL);

 16b0  a1 00 00 00 00                    mov     eax,_lpDDSBack
 16b5  8b 00                             mov     eax,[eax]
 16b7  6a 00                             push    00000000H
 16b9  6a 01                             push    00000001H
 16bb  8d 55 8c                          lea     edx,-74H[ebp]
 16be  52                                push    edx
 16bf  6a 00                             push    00000000H
 16c1  ff 35 00 00 00 00                 push    _lpDDSBack
 16c7  ff 50 64                          call    dword ptr +64H[eax]
 16ca  89 45 fc                          mov     -4H[ebp],eax

		if (ddrval == DDERR_SURFACEBUSY)
		{
 16cd  81 7d fc ae 01 76 
       88                                cmp     dword ptr -4H[ebp],887601aeH
 16d4  75 06                             jne     L143

			err_count++;
		}
 16d6  ff 05 91 00 00 00                 inc     dword ptr L359

		if (ddrval == DDERR_SURFACELOST)
		{
 16dc  81 7d fc c2 01 76 
       88                L143            cmp     dword ptr -4H[ebp],887601c2H
 16e3  75 19                             jne     L144

			MessageBeep(0);
 16e5  6a 00                             push    00000000H
 16e7  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MessageBeep@4

			lpDDSBack->lpVtbl->Restore(lpDDSBack);
		}

 16ee  a1 00 00 00 00                    mov     eax,_lpDDSBack
 16f3  8b 00                             mov     eax,[eax]
 16f5  ff 35 00 00 00 00                 push    _lpDDSBack
 16fb  ff 50 6c                          call    dword ptr +6cH[eax]

		ptr = (LPBYTE) ddsd.lpSurface;
 16fe  8b 45 b0          L144            mov     eax,-50H[ebp]
 1701  89 45 f8                          mov     -8H[ebp],eax

		if (ptr == NULL)
			return;
		// Set my render buffers to the back screen
 1704  83 7d f8 00                       cmp     dword ptr -8H[ebp],00000000H
 1708  0f 84 6f 00 00 00                 je      L147

		CurBuffer = (char *) ptr;
 170e  8b 45 f8                          mov     eax,-8H[ebp]
 1711  a3 00 00 00 00                    mov     _CurBuffer,eax

		CurBufferJ = (char *) ptr;

		// Render_Triangles();
		// Move_Triangles();
 1716  8b 45 f8                          mov     eax,-8H[ebp]
 1719  a3 00 00 00 00                    mov     _CurBufferJ,eax

		lpDDSBack->lpVtbl->Unlock(lpDDSBack, ddsd.lpSurface);

		while (1)
		{
			HRESULT	 ddrval;
 171e  a1 00 00 00 00                    mov     eax,_lpDDSBack
 1723  8b 00                             mov     eax,[eax]
 1725  8b 55 b0                          mov     edx,-50H[ebp]
 1728  52                                push    edx
 1729  ff 35 00 00 00 00                 push    _lpDDSBack
 172f  ff 90 80 00 00 00                 call    dword ptr +80H[eax]

			ddrval = lpDDSPrimary->lpVtbl->Flip(lpDDSPrimary, NULL, 0);
 1735  a1 00 00 00 00    L145            mov     eax,_lpDDSPrimary
 173a  8b 00                             mov     eax,[eax]
 173c  6a 00                             push    00000000H
 173e  6a 00                             push    00000000H
 1740  ff 35 00 00 00 00                 push    _lpDDSPrimary
 1746  ff 50 2c                          call    dword ptr +2cH[eax]
 1749  89 45 88                          mov     -78H[ebp],eax

			if (ddrval == DD_OK)
			{
				break;
			}
 174c  83 7d 88 00                       cmp     dword ptr -78H[ebp],00000000H
 1750  74 2b                             je      L147

			if (ddrval == DDERR_SURFACELOST)
			{
 1752  81 7d 88 c2 01 76 
       88                                cmp     dword ptr -78H[ebp],887601c2H
 1759  75 19                             jne     L146

				ddrval = lpDDSPrimary->lpVtbl->Restore(lpDDSPrimary);
 175b  a1 00 00 00 00                    mov     eax,_lpDDSPrimary
 1760  8b 00                             mov     eax,[eax]
 1762  ff 35 00 00 00 00                 push    _lpDDSPrimary
 1768  ff 50 6c                          call    dword ptr +6cH[eax]
 176b  89 45 88                          mov     -78H[ebp],eax

				if (ddrval != DD_OK)
				{
					break;
				}
			}
 176e  83 7d 88 00                       cmp     dword ptr -78H[ebp],00000000H
 1772  75 09                             jne     L147

			if (ddrval != DDERR_WASSTILLDRAWING)
			{
				break;
			}
		}
	}




 1774  81 7d 88 1c 02 76 
       88                L146            cmp     dword ptr -78H[ebp],8876021cH
 177b  74 b8                             je      L145

}

 177d  89 ec             L147            mov     esp,ebp
 177f  5d                                pop     ebp
 1780  5f                                pop     edi
 1781  5e                                pop     esi
 1782  5a                                pop     edx
 1783  59                                pop     ecx
 1784  5b                                pop     ebx
 1785  c3                                ret     

void	    WinQuit(void)
{
#if DEBUG_LOCKED
	free(DebugScreen);
#endif
 1786  53                WinQuit_        push    ebx
 1787  51                                push    ecx
 1788  52                                push    edx
 1789  56                                push    esi
 178a  57                                push    edi
 178b  55                                push    ebp
 178c  89 e5                             mov     ebp,esp
 178e  81 ec 00 00 00 00                 sub     esp,00000000H

	finiObjects();
 1794  e8 00 00 00 00                    call    finiObjects_

	finiSndObjects();
 1799  e8 00 00 00 00                    call    finiSndObjects_

	PostQuitMessage(0);
 179e  6a 00                             push    00000000H
 17a0  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__PostQuitMessage@4

}

 17a7  5d                                pop     ebp
 17a8  5f                                pop     edi
 17a9  5e                                pop     esi
 17aa  5a                                pop     edx
 17ab  59                                pop     ecx
 17ac  5b                                pop     ebx
 17ad  c3                                ret     

void	    WinClearScreen(char colour)
{
	DDBLTFX	 ddbltfx;

 17ae  53                WinClearScreen_ push    ebx
 17af  51                                push    ecx
 17b0  52                                push    edx
 17b1  56                                push    esi
 17b2  57                                push    edi
 17b3  55                                push    ebp
 17b4  89 e5                             mov     ebp,esp
 17b6  81 ec 68 00 00 00                 sub     esp,00000068H
 17bc  88 45 fc                          mov     -4H[ebp],al

	memset(&ddbltfx,0,sizeof(ddbltfx));
 17bf  bb 64 00 00 00                    mov     ebx,00000064H
 17c4  31 d2                             xor     edx,edx
 17c6  8d 45 98                          lea     eax,-68H[ebp]
 17c9  e8 00 00 00 00                    call    memset_

	ddbltfx.dwSize = sizeof(ddbltfx);
 17ce  c7 45 98 64 00 00 
       00                                mov     dword ptr -68H[ebp],00000064H

	ddbltfx.dwFillColor = colour;
 17d5  31 c0                             xor     eax,eax
 17d7  8a 45 fc                          mov     al,-4H[ebp]
 17da  89 45 e8                          mov     -18H[ebp],eax

	lpDDSBack->lpVtbl->Blt(lpDDSBack, NULL, NULL, NULL, DDBLT_COLORFILL | DDBLT_WAIT, &ddbltfx);
 17dd  a1 00 00 00 00                    mov     eax,_lpDDSBack
 17e2  8b 00                             mov     eax,[eax]
 17e4  8d 55 98                          lea     edx,-68H[ebp]
 17e7  52                                push    edx
 17e8  68 00 04 00 01                    push    01000400H
 17ed  6a 00                             push    00000000H
 17ef  6a 00                             push    00000000H
 17f1  6a 00                             push    00000000H
 17f3  ff 35 00 00 00 00                 push    _lpDDSBack
 17f9  ff 50 14                          call    dword ptr +14H[eax]

}

 17fc  89 ec                             mov     esp,ebp
 17fe  5d                                pop     ebp
 17ff  5f                                pop     edi
 1800  5e                                pop     esi
 1801  5a                                pop     edx
 1802  59                                pop     ecx
 1803  5b                                pop     ebx
 1804  c3                                ret     

void	    PitchMemCpy(char *dest, char *source, RECT * rect)
{
	int	     loop;

 1805  51                PitchMemCpy_    push    ecx
 1806  56                                push    esi
 1807  57                                push    edi
 1808  55                                push    ebp
 1809  89 e5                             mov     ebp,esp
 180b  81 ec 10 00 00 00                 sub     esp,00000010H
 1811  89 45 f0                          mov     -10H[ebp],eax
 1814  89 55 f4                          mov     -0cH[ebp],edx
 1817  89 5d f8                          mov     -8H[ebp],ebx

	for (loop = 0; loop < (rect->bottom - rect->top); loop++)
	{
 181a  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 1821  8b 45 f8          L148            mov     eax,-8H[ebp]
 1824  8b 40 0c                          mov     eax,+0cH[eax]
 1827  8b 55 f8                          mov     edx,-8H[ebp]
 182a  2b 42 04                          sub     eax,+4H[edx]
 182d  3b 45 fc                          cmp     eax,-4H[ebp]
 1830  7f 0a                             jg      L150
 1832  eb 3a                             jmp     L151
 1834  8b 45 fc          L149            mov     eax,-4H[ebp]
 1837  ff 45 fc                          inc     dword ptr -4H[ebp]
 183a  eb e5                             jmp     L148

		memcpy(dest, source, (rect->right - rect->left));
 183c  8b 45 f8          L150            mov     eax,-8H[ebp]
 183f  8b 40 08                          mov     eax,+8H[eax]
 1842  8b 55 f8                          mov     edx,-8H[ebp]
 1845  2b 02                             sub     eax,[edx]
 1847  8b 55 f4                          mov     edx,-0cH[ebp]
 184a  8b 4d f0                          mov     ecx,-10H[ebp]
 184d  89 c3                             mov     ebx,eax
 184f  89 c8                             mov     eax,ecx
 1851  e8 00 00 00 00                    call    memcpy_

		dest += RealPitch;
 1856  a1 00 00 00 00                    mov     eax,_RealPitch
 185b  01 45 f0                          add     -10H[ebp],eax

		source += (rect->right - rect->left);
 185e  8b 45 f8                          mov     eax,-8H[ebp]
 1861  8b 40 08                          mov     eax,+8H[eax]
 1864  8b 55 f8                          mov     edx,-8H[ebp]
 1867  2b 02                             sub     eax,[edx]
 1869  01 45 f4                          add     -0cH[ebp],eax

	}
 186c  eb c6                             jmp     L149

}

 186e  89 ec             L151            mov     esp,ebp
 1870  5d                                pop     ebp
 1871  5f                                pop     edi
 1872  5e                                pop     esi
 1873  59                                pop     ecx
 1874  c3                                ret     

void	    PitchMemCpy320X200(char *dest, char *source)
{
	RECT	    rect;
	int	     loop;

 1875                    PitchMemCpy320X200_:
 1875  53                                push    ebx
 1876  51                                push    ecx
 1877  56                                push    esi
 1878  57                                push    edi
 1879  55                                push    ebp
 187a  89 e5                             mov     ebp,esp
 187c  81 ec 1c 00 00 00                 sub     esp,0000001cH
 1882  89 45 f8                          mov     -8H[ebp],eax
 1885  89 55 f4                          mov     -0cH[ebp],edx

	rect.left = 0;
 1888  c7 45 e4 00 00 00 
       00                                mov     dword ptr -1cH[ebp],00000000H

	rect.right = 320;
 188f  c7 45 ec 40 01 00 
       00                                mov     dword ptr -14H[ebp],00000140H

	rect.top = 0;
 1896  c7 45 e8 00 00 00 
       00                                mov     dword ptr -18H[ebp],00000000H

	rect.bottom = 199;
 189d  c7 45 f0 c7 00 00 
       00                                mov     dword ptr -10H[ebp],000000c7H

	for (loop = 0; loop < (rect.bottom - rect.top); loop++)
	{
 18a4  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 18ab  8b 45 f0          L152            mov     eax,-10H[ebp]
 18ae  2b 45 e8                          sub     eax,-18H[ebp]
 18b1  3b 45 fc                          cmp     eax,-4H[ebp]
 18b4  7f 0a                             jg      L154
 18b6  eb 2c                             jmp     L155
 18b8  8b 45 fc          L153            mov     eax,-4H[ebp]
 18bb  ff 45 fc                          inc     dword ptr -4H[ebp]
 18be  eb eb                             jmp     L152

		memcpy(dest, source, (rect.right - rect.left));
 18c0  8b 5d ec          L154            mov     ebx,-14H[ebp]
 18c3  2b 5d e4                          sub     ebx,-1cH[ebp]
 18c6  8b 55 f4                          mov     edx,-0cH[ebp]
 18c9  8b 45 f8                          mov     eax,-8H[ebp]
 18cc  e8 00 00 00 00                    call    memcpy_

		dest += RealBackPitch;
 18d1  a1 00 00 00 00                    mov     eax,_RealBackPitch
 18d6  01 45 f8                          add     -8H[ebp],eax

		source += (rect.right - rect.left);
 18d9  8b 45 ec                          mov     eax,-14H[ebp]
 18dc  2b 45 e4                          sub     eax,-1cH[ebp]
 18df  01 45 f4                          add     -0cH[ebp],eax

	}
 18e2  eb d4                             jmp     L153

}

#if USE_ATI

 18e4  89 ec             L155            mov     esp,ebp
 18e6  5d                                pop     ebp
 18e7  5f                                pop     edi
 18e8  5e                                pop     esi
 18e9  59                                pop     ecx
 18ea  5b                                pop     ebx
 18eb  c3                                ret     

void SetContext(void)
{
 18ec  53                SetContext_     push    ebx
 18ed  51                                push    ecx
 18ee  52                                push    edx
 18ef  56                                push    esi
 18f0  57                                push    edi
 18f1  55                                push    ebp
 18f2  89 e5                             mov     ebp,esp
 18f4  81 ec 00 00 00 00                 sub     esp,00000000H

	ATI3DCIF_ContextSetState(ghRC, C3D_ERS_SURF_DRAW_PTR,
					   (C3D_PRSDATA) & CurBuffer);
 18fa  b8 00 00 00 00                    mov     eax,offset _CurBuffer
 18ff  50                                push    eax
 1900  6a 0d                             push    0000000dH
 1902  ff 35 00 00 00 00                 push    _ghRC
 1908  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

}

/*
 *  CloseATI3DCIF - destroy the rendering context and unload the ATI3DCIF module
 */
 190d  5d                                pop     ebp
 190e  5f                                pop     edi
 190f  5e                                pop     esi
 1910  5a                                pop     edx
 1911  59                                pop     ecx
 1912  5b                                pop     ebx
 1913  c3                                ret     

void CloseATI3DCIF (void)
{
	// destroy ATI 3D rendering context
 1914  53                CloseATI3DCIF_  push    ebx
 1915  51                                push    ecx
 1916  52                                push    edx
 1917  56                                push    esi
 1918  57                                push    edi
 1919  55                                push    ebp
 191a  89 e5                             mov     ebp,esp
 191c  81 ec 00 00 00 00                 sub     esp,00000000H

	if (ghRC) ATI3DCIF_ContextDestroy (ghRC);

	// terminate the ATI 3D driver
 1922  83 3d 00 00 00 00 
       00                                cmp     dword ptr _ghRC,00000000H
 1929  74 0b                             je      L156
 192b  ff 35 00 00 00 00                 push    _ghRC
 1931  e8 00 00 00 00                    call    _ATI3DCIF_ContextDestroy@4

	if (gbCIFInit) ATI3DCIF_Term ();
 1936  83 3d 00 00 00 00 
       00                L156            cmp     dword ptr _gbCIFInit,00000000H
 193d  74 05                             je      L157
 193f  e8 00 00 00 00                    call    _ATI3DCIF_Term@0

}

/*
 * InitATI3DCIF - create and initialize the ATI 3D rendering context
 */
 1944  5d                L157            pop     ebp
 1945  5f                                pop     edi
 1946  5e                                pop     esi
 1947  5a                                pop     edx
 1948  59                                pop     ecx
 1949  5b                                pop     ebx
 194a  c3                                ret     

BOOL	    InitATI3DCIF(void)
{
	// initialize the CIF driver
 194b  53                InitATI3DCIF_   push    ebx
 194c  51                                push    ecx
 194d  52                                push    edx
 194e  56                                push    esi
 194f  57                                push    edi
 1950  55                                push    ebp
 1951  89 e5                             mov     ebp,esp
 1953  81 ec 04 00 00 00                 sub     esp,00000004H

	if (ATI3DCIF_Init() != C3D_EC_OK)
	{
 1959  e8 00 00 00 00                    call    _ATI3DCIF_Init@0
 195e  85 c0                             test    eax,eax
 1960  74 1f                             je      L158

		wsprintf(gszErrMsg, "Could not initialize 3D driver");
 1962  b8 cb 00 00 00                    mov     eax,offset L328
 1967  50                                push    eax
 1968  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 196d  50                                push    eax
 196e  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 1975  83 c4 08                          add     esp,00000008H

		return FALSE;
	}
	// set flag indicating driver is loaded
 1978  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 197f  eb 3a                             jmp     L159

	gbCIFInit = TRUE;

	// create the rendering context
 1981  c7 05 00 00 00 00 
       01 00 00 00       L158            mov     dword ptr _gbCIFInit,00000001H

	ghRC = ATI3DCIF_ContextCreate();
 198b  e8 00 00 00 00                    call    _ATI3DCIF_ContextCreate@0
 1990  a3 00 00 00 00                    mov     _ghRC,eax

	if (!ghRC)
	{
 1995  83 3d 00 00 00 00 
       00                                cmp     dword ptr _ghRC,00000000H
 199c  75 1d                             jne     L159

		wsprintf(gszErrMsg, "Could not create 3D rendering context");
 199e  b8 ea 00 00 00                    mov     eax,offset L329
 19a3  50                                push    eax
 19a4  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 19a9  50                                push    eax
 19aa  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 19b1  83 c4 08                          add     esp,00000008H

		return FALSE;
	}
 19b4  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H

}

 19bb  8b 45 fc          L159            mov     eax,-4H[ebp]
 19be  89 ec                             mov     esp,ebp
 19c0  5d                                pop     ebp
 19c1  5f                                pop     edi
 19c2  5e                                pop     esi
 19c3  5a                                pop     edx
 19c4  59                                pop     ecx
 19c5  5b                                pop     ebx
 19c6  c3                                ret     

void setRenderBegin(void)
{
 19c7  53                setRenderBegin_ push    ebx
 19c8  51                                push    ecx
 19c9  52                                push    edx
 19ca  56                                push    esi
 19cb  57                                push    edi
 19cc  55                                push    ebp
 19cd  89 e5                             mov     ebp,esp
 19cf  81 ec 00 00 00 00                 sub     esp,00000000H

	if(!Rendering)
	{
 19d5  83 3d 00 00 00 00 
       00                                cmp     dword ptr _Rendering,00000000H
 19dc  75 74                             jne     L160

		ATI3DCIF_RenderBegin(ghRC);
 19de  ff 35 00 00 00 00                 push    _ghRC
 19e4  e8 00 00 00 00                    call    _ATI3DCIF_RenderBegin@4

		Rendering=TRUE;
 19e9  c7 05 00 00 00 00 
       01 00 00 00                       mov     dword ptr _Rendering,00000001H

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_PRIM_TYPE,
						   &quad);
 19f3  b8 00 00 00 00                    mov     eax,offset _quad
 19f8  50                                push    eax
 19f9  6a 02                             push    00000002H
 19fb  ff 35 00 00 00 00                 push    _ghRC
 1a01  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_SHADE_MODE,
						   &shade);
 1a06  b8 00 00 00 00                    mov     eax,offset _shade
 1a0b  50                                push    eax
 1a0c  6a 04                             push    00000004H
 1a0e  ff 35 00 00 00 00                 push    _ghRC
 1a14  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_TMAP_EN, &bTexEn);
	//	ATI3DCIF_ContextSetState (ghRC, C3D_ERS_ALPHA_DST, &eDstAlpha);
	//	ATI3DCIF_ContextSetState (ghRC, C3D_ERS_ALPHA_SRC, &eSrcAlpha);
 1a19  b8 00 00 00 00                    mov     eax,offset _bTexEn
 1a1e  50                                push    eax
 1a1f  6a 05                             push    00000005H
 1a21  ff 35 00 00 00 00                 push    _ghRC
 1a27  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_TMAP_PERSP_COR, &ePerspCor);
 1a2c  b8 00 00 00 00                    mov     eax,offset _ePerspCor
 1a31  50                                push    eax
 1a32  6a 08                             push    00000008H
 1a34  ff 35 00 00 00 00                 push    _ghRC
 1a3a  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_TMAP_FILTER, &eTexFilter);
	}
 1a3f  b8 00 00 00 00                    mov     eax,offset _eTexFilter
 1a44  50                                push    eax
 1a45  6a 09                             push    00000009H
 1a47  ff 35 00 00 00 00                 push    _ghRC
 1a4d  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

}

 1a52  5d                L160            pop     ebp
 1a53  5f                                pop     edi
 1a54  5e                                pop     esi
 1a55  5a                                pop     edx
 1a56  59                                pop     ecx
 1a57  5b                                pop     ebx
 1a58  c3                                ret     

void setRenderEnd(void)
{
 1a59  53                setRenderEnd_   push    ebx
 1a5a  51                                push    ecx
 1a5b  52                                push    edx
 1a5c  56                                push    esi
 1a5d  57                                push    edi
 1a5e  55                                push    ebp
 1a5f  89 e5                             mov     ebp,esp
 1a61  81 ec 00 00 00 00                 sub     esp,00000000H

	if(Rendering)
	{
 1a67  83 3d 00 00 00 00 
       00                                cmp     dword ptr _Rendering,00000000H
 1a6e  74 0f                             je      L161

		ATI3DCIF_RenderEnd();
 1a70  e8 00 00 00 00                    call    _ATI3DCIF_RenderEnd@0

		Rendering=FALSE;
	}
 1a75  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _Rendering,00000000H

}

 1a7f  5d                L161            pop     ebp
 1a80  5f                                pop     edi
 1a81  5e                                pop     esi
 1a82  5a                                pop     edx
 1a83  59                                pop     ecx
 1a84  5b                                pop     ebx
 1a85  c3                                ret     

void sendList(void)
{

 1a86  53                sendList_       push    ebx
 1a87  51                                push    ecx
 1a88  52                                push    edx
 1a89  56                                push    esi
 1a8a  57                                push    edi
 1a8b  55                                push    ebp
 1a8c  89 e5                             mov     ebp,esp
 1a8e  81 ec 00 00 00 00                 sub     esp,00000000H

	if(numvert)
	{
 1a94  66 83 3d 00 00 00 
       00 00                             cmp     word ptr _numvert,0000H
 1a9c  74 3d                             je      L163

		if(numvert>tester)
 1a9e  66 a1 00 00 00 00                 mov     ax,_numvert
 1aa4  66 3b 05 00 00 00 
       00                                cmp     ax,_tester
 1aab  7e 0c                             jle     L162

			tester=numvert;
 1aad  66 a1 00 00 00 00                 mov     ax,_numvert
 1ab3  66 a3 00 00 00 00                 mov     _tester,ax

		setRenderBegin();
 1ab9  e8 00 00 00 00    L162            call    setRenderBegin_

		ATI3DCIF_RenderPrimList(
					  testlist,
					 numvert);
		
 1abe  a1 fe ff ff ff                    mov     eax,_numvert-2H
 1ac3  c1 f8 10                          sar     eax,10H
 1ac6  50                                push    eax
 1ac7  b8 00 00 00 00                    mov     eax,offset _testlist
 1acc  50                                push    eax
 1acd  e8 00 00 00 00                    call    _ATI3DCIF_RenderPrimList@8

	numvert=0;
	}
 1ad2  66 c7 05 00 00 00 
       00 00 00                          mov     word ptr _numvert,0000H

}

short jjstestsrc=0,jjstestdst=0,jjstest3=128;


 1adb  5d                L163            pop     ebp
 1adc  5f                                pop     edi
 1add  5e                                pop     esi
 1ade  5a                                pop     edx
 1adf  59                                pop     ecx
 1ae0  5b                                pop     ebx
 1ae1  c3                                ret     

BOOL SetState(C3D_EPRIM Quad, C3D_ESHADE Shade, BOOL BTexEn, BOOL Trans, C3D_ETLIGHT Light)
{
 1ae2  56                SetState_       push    esi
 1ae3  57                                push    edi
 1ae4  55                                push    ebp
 1ae5  89 e5                             mov     ebp,esp
 1ae7  81 ec 20 00 00 00                 sub     esp,00000020H
 1aed  89 45 e4                          mov     -1cH[ebp],eax
 1af0  89 55 e8                          mov     -18H[ebp],edx
 1af3  89 5d ec                          mov     -14H[ebp],ebx
 1af6  89 4d f0                          mov     -10H[ebp],ecx

	BOOL change=FALSE;
 1af9  c7 45 f4 00 00 00 
       00                                mov     dword ptr -0cH[ebp],00000000H

	C3D_PRSDATA chkey = C3D_ETEXOP_NONE;
	
 1b00  c7 45 f8 00 00 00 
       00                                mov     dword ptr -8H[ebp],00000000H

	if(Quad!=quad)
	{
 1b07  8b 45 e4                          mov     eax,-1cH[ebp]
 1b0a  3b 05 00 00 00 00                 cmp     eax,_quad
 1b10  74 27                             je      L164

		sendList();
 1b12  e8 00 00 00 00                    call    sendList_

		quad = Quad;
 1b17  8b 45 e4                          mov     eax,-1cH[ebp]
 1b1a  a3 00 00 00 00                    mov     _quad,eax

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_PRIM_TYPE,
						   &quad);
 1b1f  b8 00 00 00 00                    mov     eax,offset _quad
 1b24  50                                push    eax
 1b25  6a 02                             push    00000002H
 1b27  ff 35 00 00 00 00                 push    _ghRC
 1b2d  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		change = TRUE;
	}
 1b32  c7 45 f4 01 00 00 
       00                                mov     dword ptr -0cH[ebp],00000001H

	if(Shade != shade)
	{
 1b39  8b 45 e8          L164            mov     eax,-18H[ebp]
 1b3c  3b 05 00 00 00 00                 cmp     eax,_shade
 1b42  74 2d                             je      L166

		if(!change)
 1b44  83 7d f4 00                       cmp     dword ptr -0cH[ebp],00000000H
 1b48  75 05                             jne     L165

			sendList();
 1b4a  e8 00 00 00 00                    call    sendList_

		shade = Shade;
 1b4f  8b 45 e8          L165            mov     eax,-18H[ebp]
 1b52  a3 00 00 00 00                    mov     _shade,eax

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_SHADE_MODE,
						   &shade);
 1b57  b8 00 00 00 00                    mov     eax,offset _shade
 1b5c  50                                push    eax
 1b5d  6a 04                             push    00000004H
 1b5f  ff 35 00 00 00 00                 push    _ghRC
 1b65  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		change = TRUE;
	}
 1b6a  c7 45 f4 01 00 00 
       00                                mov     dword ptr -0cH[ebp],00000001H

	if(BTexEn != bTexEn)
	{
 1b71  8b 45 ec          L166            mov     eax,-14H[ebp]
 1b74  3b 05 00 00 00 00                 cmp     eax,_bTexEn
 1b7a  74 2d                             je      L168

		if(!change)
 1b7c  83 7d f4 00                       cmp     dword ptr -0cH[ebp],00000000H
 1b80  75 05                             jne     L167

			sendList();
 1b82  e8 00 00 00 00                    call    sendList_

		bTexEn = BTexEn;
 1b87  8b 45 ec          L167            mov     eax,-14H[ebp]
 1b8a  a3 00 00 00 00                    mov     _bTexEn,eax

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_TMAP_EN, &bTexEn);
 1b8f  b8 00 00 00 00                    mov     eax,offset _bTexEn
 1b94  50                                push    eax
 1b95  6a 05                             push    00000005H
 1b97  ff 35 00 00 00 00                 push    _ghRC
 1b9d  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		change = TRUE;
	}
 1ba2  c7 45 f4 01 00 00 
       00                                mov     dword ptr -0cH[ebp],00000001H

	if(Light != light)
	{
 1ba9  8b 45 10          L168            mov     eax,+10H[ebp]
 1bac  3b 05 00 00 00 00                 cmp     eax,_light
 1bb2  74 2d                             je      L170

		if(!change)
 1bb4  83 7d f4 00                       cmp     dword ptr -0cH[ebp],00000000H
 1bb8  75 05                             jne     L169

			sendList();
 1bba  e8 00 00 00 00                    call    sendList_

		light = Light;
 1bbf  8b 45 10          L169            mov     eax,+10H[ebp]
 1bc2  a3 00 00 00 00                    mov     _light,eax

		ATI3DCIF_ContextSetState(ghRC, C3D_ERS_TMAP_LIGHT, &light);
 1bc7  b8 00 00 00 00                    mov     eax,offset _light
 1bcc  50                                push    eax
 1bcd  6a 07                             push    00000007H
 1bcf  ff 35 00 00 00 00                 push    _ghRC
 1bd5  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		change = TRUE;
	}
 1bda  c7 45 f4 01 00 00 
       00                                mov     dword ptr -0cH[ebp],00000001H

	if(Trans != trans)
	{
 1be1  8b 45 f0          L170            mov     eax,-10H[ebp]
 1be4  3b 05 00 00 00 00                 cmp     eax,_trans
 1bea  0f 84 ec 00 00 00                 je      L178

		if(!change)
 1bf0  83 7d f4 00                       cmp     dword ptr -0cH[ebp],00000000H
 1bf4  75 05                             jne     L171

			sendList();
 1bf6  e8 00 00 00 00                    call    sendList_

		trans = Trans;
 1bfb  8b 45 f0          L171            mov     eax,-10H[ebp]
 1bfe  a3 00 00 00 00                    mov     _trans,eax

		if(trans)
		{
 1c03  83 3d 00 00 00 00 
       00                                cmp     dword ptr _trans,00000000H
 1c0a  0f 84 7a 00 00 00                 je      L176

			switch(trans)
			{
				case BLACK_NOT_DRAWN:
 1c10  a1 00 00 00 00                    mov     eax,_trans
 1c15  89 45 e0                          mov     -20H[ebp],eax
 1c18  83 7d e0 02                       cmp     dword ptr -20H[ebp],00000002H
 1c1c  72 16                             jb      L172
 1c1e  83 7d e0 07                       cmp     dword ptr -20H[ebp],00000007H
 1c22  76 33                             jbe     L173
 1c24  83 7d e0 0f                       cmp     dword ptr -20H[ebp],0000000fH
 1c28  76 4a                             jbe     L174
 1c2a  83 7d e0 10                       cmp     dword ptr -20H[ebp],00000010H
 1c2e  74 27                             je      L173
 1c30  eb 42                             jmp     L174
 1c32  eb 40                             jmp     L174
 1c34  83 7d e0 01       L172            cmp     dword ptr -20H[ebp],00000001H
 1c38  75 3a                             jne     L174

					chkey = C3D_ETEXOP_CHROMAKEY;//SJR - make 0,0,0 trans
 1c3a  c7 45 f8 01 00 00 
       00                                mov     dword ptr -8H[ebp],00000001H

					eDstAlpha = C3D_EADST_ZERO;
 1c41  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _eDstAlpha,00000000H

					eSrcAlpha = C3D_EASRC_ONE;
 1c4b  c7 05 00 00 00 00 
       01 00 00 00                       mov     dword ptr _eSrcAlpha,00000001H

					break;
				case BLACK5_TRANSL:
				case BLACK1_TRANSL:
				case BLACK2_TRANSL:
				case BLACK3_TRANSL:
				case BLACK4_TRANSL:		
				case BLACK6_TRANSL:
				case RED_TRANSL:
 1c55  eb 31                             jmp     L175

					chkey = C3D_ETEXOP_CHROMAKEY;//SJR - make 0,0,0 trans
 1c57  c7 45 f8 01 00 00 
       00                L173            mov     dword ptr -8H[ebp],00000001H

					eDstAlpha = C3D_EADST_ZERO;
 1c5e  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _eDstAlpha,00000000H

					eSrcAlpha = C3D_EASRC_DSTCLR;
 1c68  c7 05 00 00 00 00 
       02 00 00 00                       mov     dword ptr _eSrcAlpha,00000002H

					break;
				case WHITE1_TRANSL:
				case WHITE2_TRANSL:
				case WHITE3_TRANSL:
				case WHITE4_TRANSL:
				case WHITE5_TRANSL:
				case WHITE6_TRANSL:
				case WHITE7_TRANSL:
				case WHITE8_TRANSL:
				default:
 1c72  eb 14                             jmp     L175

					eDstAlpha = C3D_EADST_ONE;
 1c74  c7 05 00 00 00 00 
       01 00 00 00       L174            mov     dword ptr _eDstAlpha,00000001H

					eSrcAlpha = C3D_EASRC_INVDSTCLR;
					
					break;
			}
		}
 1c7e  c7 05 00 00 00 00 
       03 00 00 00                       mov     dword ptr _eSrcAlpha,00000003H

		else
		{
 1c88  eb 14             L175            jmp     L177

			eDstAlpha = C3D_EADST_ZERO;
 1c8a  c7 05 00 00 00 00 
       00 00 00 00       L176            mov     dword ptr _eDstAlpha,00000000H

			eSrcAlpha = C3D_EASRC_ONE;
		}
 1c94  c7 05 00 00 00 00 
       01 00 00 00                       mov     dword ptr _eSrcAlpha,00000001H

		ATI3DCIF_ContextSetState (ghRC, C3D_ERS_TMAP_TEXOP, &chkey);
 1c9e  8d 45 f8          L177            lea     eax,-8H[ebp]
 1ca1  50                                push    eax
 1ca2  6a 0a                             push    0000000aH
 1ca4  ff 35 00 00 00 00                 push    _ghRC
 1caa  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		ATI3DCIF_ContextSetState (ghRC, C3D_ERS_ALPHA_DST, &eDstAlpha);
 1caf  b8 00 00 00 00                    mov     eax,offset _eDstAlpha
 1cb4  50                                push    eax
 1cb5  6a 0c                             push    0000000cH
 1cb7  ff 35 00 00 00 00                 push    _ghRC
 1cbd  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		ATI3DCIF_ContextSetState (ghRC, C3D_ERS_ALPHA_SRC, &eSrcAlpha);

 1cc2  b8 00 00 00 00                    mov     eax,offset _eSrcAlpha
 1cc7  50                                push    eax
 1cc8  6a 0b                             push    0000000bH
 1cca  ff 35 00 00 00 00                 push    _ghRC
 1cd0  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

		change = TRUE;
	}
 1cd5  c7 45 f4 01 00 00 
       00                                mov     dword ptr -0cH[ebp],00000001H

	return(change);
 1cdc  8b 45 f4          L178            mov     eax,-0cH[ebp]
 1cdf  89 45 fc                          mov     -4H[ebp],eax

}

 1ce2  8b 45 fc                          mov     eax,-4H[ebp]
 1ce5  89 ec                             mov     esp,ebp
 1ce7  5d                                pop     ebp
 1ce8  5f                                pop     edi
 1ce9  5e                                pop     esi
 1cea  c2 04 00                          ret     0004H

void JJSDrawSprite(SPRT_8 *sp,short w, short h)
{
	C3D_PVTCF       v;
	C3D_PRSDATA chkey;
	short tpage,transl;

 1ced  51                JJSDrawSprite_  push    ecx
 1cee  56                                push    esi
 1cef  57                                push    edi
 1cf0  55                                push    ebp
 1cf1  89 e5                             mov     ebp,esp
 1cf3  81 ec 30 00 00 00                 sub     esp,00000030H
 1cf9  89 45 e4                          mov     -1cH[ebp],eax
 1cfc  89 55 f4                          mov     -0cH[ebp],edx
 1cff  89 5d f0                          mov     -10H[ebp],ebx

	if(sp->g0 || sp->b0 == RED_TRANSL)
 1d02  8b 45 e4                          mov     eax,-1cH[ebp]
 1d05  80 78 05 00                       cmp     byte ptr +5H[eax],00H
 1d09  75 09                             jne     L179
 1d0b  8b 45 e4                          mov     eax,-1cH[ebp]
 1d0e  80 78 06 10                       cmp     byte ptr +6H[eax],10H
 1d12  75 09                             jne     L180

		transl=1;
 1d14  c7 45 fc 01 00 00 
       00                L179            mov     dword ptr -4H[ebp],00000001H

	else
 1d1b  eb 07                             jmp     L181

		transl=0;

 1d1d  c7 45 fc 00 00 00 
       00                L180            mov     dword ptr -4H[ebp],00000000H

	if(!SetState(C3D_EPRIM_QUAD,C3D_ESH_FLAT,TRUE,sp->b0==RED_TRANSL?RED_TRANSL:BLACK_NOT_DRAWN,transl?C3D_ETL_MODULATE:C3D_ETL_NONE))
 1d24  66 83 7d fc 00    L181            cmp     word ptr -4H[ebp],0000H
 1d29  74 09                             je      L182
 1d2b  c7 45 e0 01 00 00 
       00                                mov     dword ptr -20H[ebp],00000001H
 1d32  eb 07                             jmp     L183
 1d34  c7 45 e0 00 00 00 
       00                L182            mov     dword ptr -20H[ebp],00000000H
 1d3b  ff 75 e0          L183            push    -20H[ebp]
 1d3e  8b 45 e4                          mov     eax,-1cH[ebp]
 1d41  80 78 06 10                       cmp     byte ptr +6H[eax],10H
 1d45  75 09                             jne     L184
 1d47  c7 45 dc 10 00 00 
       00                                mov     dword ptr -24H[ebp],00000010H
 1d4e  eb 07                             jmp     L185
 1d50  c7 45 dc 01 00 00 
       00                L184            mov     dword ptr -24H[ebp],00000001H
 1d57  8b 4d dc          L185            mov     ecx,-24H[ebp]
 1d5a  bb 01 00 00 00                    mov     ebx,00000001H
 1d5f  ba 02 00 00 00                    mov     edx,00000002H
 1d64  b8 02 00 00 00                    mov     eax,00000002H
 1d69  e8 00 00 00 00                    call    SetState_
 1d6e  85 c0                             test    eax,eax
 1d70  75 0f                             jne     L186

		if(numvert>(VBUFSIZE-4))
 1d72  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 1d7a  7e 05                             jle     L186

			sendList();
 1d7c  e8 00 00 00 00                    call    sendList_

	tpage=JJSTextureTable[sp->clut&0x1f];
 1d81  8b 45 e4          L186            mov     eax,-1cH[ebp]
 1d84  66 8b 40 0e                       mov     ax,+0eH[eax]
 1d88  25 1f 00 00 00                    and     eax,0000001fH
 1d8d  31 d2                             xor     edx,edx
 1d8f  66 89 c2                          mov     dx,ax
 1d92  31 c0                             xor     eax,eax
 1d94  8a 82 00 00 00 00                 mov     al,_JJSTextureTable[edx]
 1d9a  89 45 f8                          mov     -8H[ebp],eax

	switch(tpage)
	{
		case 12:
 1d9d  8b 45 f8                          mov     eax,-8H[ebp]
 1da0  89 45 d8                          mov     -28H[ebp],eax
 1da3  66 83 7d d8 0c                    cmp     word ptr -28H[ebp],000cH
 1da8  72 10                             jb      L187
 1daa  66 83 7d d8 0c                    cmp     word ptr -28H[ebp],000cH
 1daf  76 0b                             jbe     L188
 1db1  66 83 7d d8 0f                    cmp     word ptr -28H[ebp],000fH
 1db6  74 0d                             je      L189
 1db8  eb 14                             jmp     L190
 1dba  eb 12             L187            jmp     L190

			tpage=22;
 1dbc  c7 45 f8 16 00 00 
       00                L188            mov     dword ptr -8H[ebp],00000016H

			break;
		case 15:
 1dc3  eb 10                             jmp     L191

			tpage=23;
 1dc5  c7 45 f8 17 00 00 
       00                L189            mov     dword ptr -8H[ebp],00000017H

			break;
		default:
 1dcc  eb 07                             jmp     L191

			tpage=24;
			break;
	}
 1dce  c7 45 f8 18 00 00 
       00                L190            mov     dword ptr -8H[ebp],00000018H

	if(texpage !=tpage)
	{
 1dd5  66 a1 00 00 00 00 L191            mov     ax,_texpage
 1ddb  66 3b 45 f8                       cmp     ax,-8H[ebp]
 1ddf  74 31                             je      L192

		sendList();
 1de1  e8 00 00 00 00                    call    sendList_

		texpage=tpage;
 1de6  8b 45 f8                          mov     eax,-8H[ebp]
 1de9  66 a3 00 00 00 00                 mov     _texpage,ax

		ATI3DCIF_ContextSetState (ghRC, C3D_ERS_TMAP_SELECT, &(gTex[texpage].hTX));
	}

 1def  a1 fe ff ff ff                    mov     eax,_texpage-2H
 1df4  c1 f8 10                          sar     eax,10H
 1df7  6b c0 74                          imul    eax,74H
 1dfa  ba 00 00 00 00                    mov     edx,offset _gTex
 1dff  01 d0                             add     eax,edx
 1e01  83 c0 70                          add     eax,00000070H
 1e04  50                                push    eax
 1e05  6a 06                             push    00000006H
 1e07  ff 35 00 00 00 00                 push    _ghRC
 1e0d  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

	v = &testarray[numvert++];
 1e12  66 a1 00 00 00 00 L192            mov     ax,_numvert
 1e18  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 1e1f  98                                cwde    
 1e20  6b c0 28                          imul    eax,28H
 1e23  ba 00 00 00 00                    mov     edx,offset _testarray
 1e28  01 c2                             add     edx,eax
 1e2a  89 55 ec                          mov     -14H[ebp],edx

	v->x = sp->x0;
 1e2d  8b 45 e4                          mov     eax,-1cH[ebp]
 1e30  df 40 08                          fild    word ptr +8H[eax]
 1e33  8b 45 ec                          mov     eax,-14H[ebp]
 1e36  d9 18                             fstp    dword ptr [eax]

	v->y = sp->y0;
 1e38  8b 45 e4                          mov     eax,-1cH[ebp]
 1e3b  df 40 0a                          fild    word ptr +0aH[eax]
 1e3e  8b 45 ec                          mov     eax,-14H[ebp]
 1e41  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 1e44  8b 45 ec                          mov     eax,-14H[ebp]
 1e47  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = sp->u0/256.0;
 1e4e  31 c0                             xor     eax,eax
 1e50  8b 55 e4                          mov     edx,-1cH[ebp]
 1e53  8a 42 0c                          mov     al,+0cH[edx]
 1e56  89 45 d4                          mov     -2cH[ebp],eax
 1e59  df 45 d4                          fild    word ptr -2cH[ebp]
 1e5c  dc 0d 10 01 00 00                 fmul    qword ptr L330
 1e62  8b 45 ec                          mov     eax,-14H[ebp]
 1e65  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = sp->v0/256.0;
 1e68  31 c0                             xor     eax,eax
 1e6a  8b 55 e4                          mov     edx,-1cH[ebp]
 1e6d  8a 42 0d                          mov     al,+0dH[edx]
 1e70  89 45 d4                          mov     -2cH[ebp],eax
 1e73  df 45 d4                          fild    word ptr -2cH[ebp]
 1e76  dc 0d 10 01 00 00                 fmul    qword ptr L330
 1e7c  8b 45 ec                          mov     eax,-14H[ebp]
 1e7f  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 1e82  8b 45 ec                          mov     eax,-14H[ebp]
 1e85  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 1e8c  66 a1 00 00 00 00                 mov     ax,_numvert
 1e92  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 1e99  98                                cwde    
 1e9a  6b c0 28                          imul    eax,28H
 1e9d  ba 00 00 00 00                    mov     edx,offset _testarray
 1ea2  01 c2                             add     edx,eax
 1ea4  89 55 ec                          mov     -14H[ebp],edx

	v->x = sp->x0+w;
 1ea7  8b 45 e4                          mov     eax,-1cH[ebp]
 1eaa  8b 50 06                          mov     edx,+6H[eax]
 1ead  c1 fa 10                          sar     edx,10H
 1eb0  0f bf 45 f4                       movsx   eax,word ptr -0cH[ebp]
 1eb4  01 c2                             add     edx,eax
 1eb6  89 55 d0                          mov     -30H[ebp],edx
 1eb9  8b 45 ec                          mov     eax,-14H[ebp]
 1ebc  db 45 d0                          fild    dword ptr -30H[ebp]
 1ebf  d9 18                             fstp    dword ptr [eax]

	v->y = sp->y0;
 1ec1  8b 45 e4                          mov     eax,-1cH[ebp]
 1ec4  df 40 0a                          fild    word ptr +0aH[eax]
 1ec7  8b 45 ec                          mov     eax,-14H[ebp]
 1eca  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 1ecd  8b 45 ec                          mov     eax,-14H[ebp]
 1ed0  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = (sp->u0+w)/256.0;
 1ed7  8b 45 e4                          mov     eax,-1cH[ebp]
 1eda  31 d2                             xor     edx,edx
 1edc  8a 50 0c                          mov     dl,+0cH[eax]
 1edf  0f bf 45 f4                       movsx   eax,word ptr -0cH[ebp]
 1ee3  01 c2                             add     edx,eax
 1ee5  89 55 d0                          mov     -30H[ebp],edx
 1ee8  db 45 d0                          fild    dword ptr -30H[ebp]
 1eeb  dc 0d 10 01 00 00                 fmul    qword ptr L330
 1ef1  8b 45 ec                          mov     eax,-14H[ebp]
 1ef4  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = sp->v0/256.0;
 1ef7  31 c0                             xor     eax,eax
 1ef9  8b 55 e4                          mov     edx,-1cH[ebp]
 1efc  8a 42 0d                          mov     al,+0dH[edx]
 1eff  89 45 d0                          mov     -30H[ebp],eax
 1f02  df 45 d0                          fild    word ptr -30H[ebp]
 1f05  dc 0d 10 01 00 00                 fmul    qword ptr L330
 1f0b  8b 45 ec                          mov     eax,-14H[ebp]
 1f0e  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 1f11  8b 45 ec                          mov     eax,-14H[ebp]
 1f14  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 1f1b  66 a1 00 00 00 00                 mov     ax,_numvert
 1f21  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 1f28  98                                cwde    
 1f29  6b c0 28                          imul    eax,28H
 1f2c  ba 00 00 00 00                    mov     edx,offset _testarray
 1f31  01 c2                             add     edx,eax
 1f33  89 55 ec                          mov     -14H[ebp],edx

	v->x = sp->x0+w;
 1f36  8b 55 e4                          mov     edx,-1cH[ebp]
 1f39  8b 52 06                          mov     edx,+6H[edx]
 1f3c  c1 fa 10                          sar     edx,10H
 1f3f  0f bf 45 f4                       movsx   eax,word ptr -0cH[ebp]
 1f43  01 c2                             add     edx,eax
 1f45  89 55 d0                          mov     -30H[ebp],edx
 1f48  8b 45 ec                          mov     eax,-14H[ebp]
 1f4b  db 45 d0                          fild    dword ptr -30H[ebp]
 1f4e  d9 18                             fstp    dword ptr [eax]

	v->y = sp->y0+h;
 1f50  8b 55 e4                          mov     edx,-1cH[ebp]
 1f53  8b 52 08                          mov     edx,+8H[edx]
 1f56  c1 fa 10                          sar     edx,10H
 1f59  0f bf 45 f0                       movsx   eax,word ptr -10H[ebp]
 1f5d  01 c2                             add     edx,eax
 1f5f  89 55 d0                          mov     -30H[ebp],edx
 1f62  8b 45 ec                          mov     eax,-14H[ebp]
 1f65  db 45 d0                          fild    dword ptr -30H[ebp]
 1f68  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 1f6b  8b 45 ec                          mov     eax,-14H[ebp]
 1f6e  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = (sp->u0+w)/256.0;
 1f75  8b 45 e4                          mov     eax,-1cH[ebp]
 1f78  31 d2                             xor     edx,edx
 1f7a  8a 50 0c                          mov     dl,+0cH[eax]
 1f7d  0f bf 45 f4                       movsx   eax,word ptr -0cH[ebp]
 1f81  01 c2                             add     edx,eax
 1f83  89 55 d0                          mov     -30H[ebp],edx
 1f86  db 45 d0                          fild    dword ptr -30H[ebp]
 1f89  dc 0d 10 01 00 00                 fmul    qword ptr L330
 1f8f  8b 45 ec                          mov     eax,-14H[ebp]
 1f92  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = (sp->v0+h)/256.0;
 1f95  8b 45 e4                          mov     eax,-1cH[ebp]
 1f98  31 d2                             xor     edx,edx
 1f9a  8a 50 0d                          mov     dl,+0dH[eax]
 1f9d  0f bf 45 f0                       movsx   eax,word ptr -10H[ebp]
 1fa1  01 c2                             add     edx,eax
 1fa3  89 55 d0                          mov     -30H[ebp],edx
 1fa6  db 45 d0                          fild    dword ptr -30H[ebp]
 1fa9  dc 0d 10 01 00 00                 fmul    qword ptr L330
 1faf  8b 45 ec                          mov     eax,-14H[ebp]
 1fb2  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 1fb5  8b 45 ec                          mov     eax,-14H[ebp]
 1fb8  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 1fbf  66 a1 00 00 00 00                 mov     ax,_numvert
 1fc5  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 1fcc  98                                cwde    
 1fcd  6b d0 28                          imul    edx,eax,28H
 1fd0  b8 00 00 00 00                    mov     eax,offset _testarray
 1fd5  01 d0                             add     eax,edx
 1fd7  89 45 ec                          mov     -14H[ebp],eax

	v->x = sp->x0;
 1fda  8b 45 e4                          mov     eax,-1cH[ebp]
 1fdd  df 40 08                          fild    word ptr +8H[eax]
 1fe0  8b 45 ec                          mov     eax,-14H[ebp]
 1fe3  d9 18                             fstp    dword ptr [eax]

	v->y = sp->y0+h;
 1fe5  8b 45 e4                          mov     eax,-1cH[ebp]
 1fe8  8b 50 08                          mov     edx,+8H[eax]
 1feb  c1 fa 10                          sar     edx,10H
 1fee  0f bf 45 f0                       movsx   eax,word ptr -10H[ebp]
 1ff2  01 c2                             add     edx,eax
 1ff4  89 55 d0                          mov     -30H[ebp],edx
 1ff7  8b 45 ec                          mov     eax,-14H[ebp]
 1ffa  db 45 d0                          fild    dword ptr -30H[ebp]
 1ffd  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2000  8b 45 ec                          mov     eax,-14H[ebp]
 2003  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = sp->u0/256.0;
 200a  31 c0                             xor     eax,eax
 200c  8b 55 e4                          mov     edx,-1cH[ebp]
 200f  8a 42 0c                          mov     al,+0cH[edx]
 2012  89 45 d0                          mov     -30H[ebp],eax
 2015  df 45 d0                          fild    word ptr -30H[ebp]
 2018  dc 0d 10 01 00 00                 fmul    qword ptr L330
 201e  8b 45 ec                          mov     eax,-14H[ebp]
 2021  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = (sp->v0+h)/256.0;
 2024  8b 45 e4                          mov     eax,-1cH[ebp]
 2027  31 d2                             xor     edx,edx
 2029  8a 50 0d                          mov     dl,+0dH[eax]
 202c  0f bf 45 f0                       movsx   eax,word ptr -10H[ebp]
 2030  01 c2                             add     edx,eax
 2032  89 55 d0                          mov     -30H[ebp],edx
 2035  db 45 d0                          fild    dword ptr -30H[ebp]
 2038  dc 0d 10 01 00 00                 fmul    qword ptr L330
 203e  8b 45 ec                          mov     eax,-14H[ebp]
 2041  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2044  8b 45 ec                          mov     eax,-14H[ebp]
 2047  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	if(transl)
	{
 204e  66 83 7d fc 00                    cmp     word ptr -4H[ebp],0000H
 2053  74 1e                             je      L193

		v->r = 255;
 2055  8b 45 ec                          mov     eax,-14H[ebp]
 2058  c7 40 18 00 00 7f 
       43                                mov     dword ptr +18H[eax],437f0000H

		v->g = 0;
 205f  8b 45 ec                          mov     eax,-14H[ebp]
 2062  c7 40 1c 00 00 00 
       00                                mov     dword ptr +1cH[eax],00000000H

		v->b = 0;
	}
 2069  8b 45 ec                          mov     eax,-14H[ebp]
 206c  c7 40 20 00 00 00 
       00                                mov     dword ptr +20H[eax],00000000H

}

 2073  89 ec             L193            mov     esp,ebp
 2075  5d                                pop     ebp
 2076  5f                                pop     edi
 2077  5e                                pop     esi
 2078  59                                pop     ecx
 2079  c3                                ret     

void JJS_Sprite(SPRT *sp)
{
 207a  53                JJS_Sprite_     push    ebx
 207b  51                                push    ecx
 207c  52                                push    edx
 207d  56                                push    esi
 207e  57                                push    edi
 207f  55                                push    ebp
 2080  89 e5                             mov     ebp,esp
 2082  81 ec 04 00 00 00                 sub     esp,00000004H
 2088  89 45 fc                          mov     -4H[ebp],eax

	JJSDrawSprite((SPRT_8 *)sp,sp->w,sp->h);
 208b  8b 45 fc                          mov     eax,-4H[ebp]
 208e  8b 58 10                          mov     ebx,+10H[eax]
 2091  c1 fb 10                          sar     ebx,10H
 2094  8b 45 fc                          mov     eax,-4H[ebp]
 2097  8b 50 0e                          mov     edx,+0eH[eax]
 209a  c1 fa 10                          sar     edx,10H
 209d  8b 45 fc                          mov     eax,-4H[ebp]
 20a0  e8 00 00 00 00                    call    JJSDrawSprite_

}

 20a5  89 ec                             mov     esp,ebp
 20a7  5d                                pop     ebp
 20a8  5f                                pop     edi
 20a9  5e                                pop     esi
 20aa  5a                                pop     edx
 20ab  59                                pop     ecx
 20ac  5b                                pop     ebx
 20ad  c3                                ret     

void JJS_Sprite8(SPRT_8 *sp)
{
 20ae  53                JJS_Sprite8_    push    ebx
 20af  51                                push    ecx
 20b0  52                                push    edx
 20b1  56                                push    esi
 20b2  57                                push    edi
 20b3  55                                push    ebp
 20b4  89 e5                             mov     ebp,esp
 20b6  81 ec 04 00 00 00                 sub     esp,00000004H
 20bc  89 45 fc                          mov     -4H[ebp],eax

	JJSDrawSprite(sp,8,8);
 20bf  bb 08 00 00 00                    mov     ebx,00000008H
 20c4  ba 08 00 00 00                    mov     edx,00000008H
 20c9  8b 45 fc                          mov     eax,-4H[ebp]
 20cc  e8 00 00 00 00                    call    JJSDrawSprite_

}

 20d1  89 ec                             mov     esp,ebp
 20d3  5d                                pop     ebp
 20d4  5f                                pop     edi
 20d5  5e                                pop     esi
 20d6  5a                                pop     edx
 20d7  59                                pop     ecx
 20d8  5b                                pop     ebx
 20d9  c3                                ret     

void setColor(C3D_PVTCF v,char r, char g, char b)
{
 20da  56                setColor_       push    esi
 20db  57                                push    edi
 20dc  55                                push    ebp
 20dd  89 e5                             mov     ebp,esp
 20df  81 ec 1c 00 00 00                 sub     esp,0000001cH
 20e5  89 45 f0                          mov     -10H[ebp],eax
 20e8  88 55 f4                          mov     -0cH[ebp],dl
 20eb  88 5d f8                          mov     -8H[ebp],bl
 20ee  88 4d fc                          mov     -4H[ebp],cl

	if(b)
	{
 20f1  80 7d fc 00                       cmp     byte ptr -4H[ebp],00H
 20f5  74 5f                             je      L198

		switch(b)
		{
			case BLACK2_TRANSL:
 20f7  8a 45 fc                          mov     al,-4H[ebp]
 20fa  88 45 ec                          mov     -14H[ebp],al
 20fd  80 7d ec 03                       cmp     byte ptr -14H[ebp],03H
 2101  72 0e                             jb      L194
 2103  80 7d ec 03                       cmp     byte ptr -14H[ebp],03H
 2107  76 0a                             jbe     L195
 2109  80 7d ec 09                       cmp     byte ptr -14H[ebp],09H
 210d  74 24                             je      L196
 210f  eb 22                             jmp     L196
 2111  eb 20             L194            jmp     L196

				v->r=180;
 2113  8b 45 f0          L195            mov     eax,-10H[ebp]
 2116  c7 40 18 00 00 34 
       43                                mov     dword ptr +18H[eax],43340000H

				v->g=180;
 211d  8b 45 f0                          mov     eax,-10H[ebp]
 2120  c7 40 1c 00 00 34 
       43                                mov     dword ptr +1cH[eax],43340000H

				v->b=180;
 2127  8b 45 f0                          mov     eax,-10H[ebp]
 212a  c7 40 20 00 00 34 
       43                                mov     dword ptr +20H[eax],43340000H

				break;
			case WHITE2_TRANSL:
			default:
 2131  eb 1e                             jmp     L197

				v->r=100;
 2133  8b 45 f0          L196            mov     eax,-10H[ebp]
 2136  c7 40 18 00 00 c8 
       42                                mov     dword ptr +18H[eax],42c80000H

				v->g=100;
 213d  8b 45 f0                          mov     eax,-10H[ebp]
 2140  c7 40 1c 00 00 c8 
       42                                mov     dword ptr +1cH[eax],42c80000H

				v->b=100;
				break;
		}
	}
 2147  8b 45 f0                          mov     eax,-10H[ebp]
 214a  c7 40 20 00 00 c8 
       42                                mov     dword ptr +20H[eax],42c80000H

	else
 2151  e9 c9 00 00 00    L197            jmp     L200

	if(g)
	{
		int r;
		
 2156  80 7d f8 00       L198            cmp     byte ptr -8H[ebp],00H
 215a  74 6f                             je      L199

		r=(&DepthFadeTble)[(g<<8) + WhitePal];
 215c  31 c0                             xor     eax,eax
 215e  8a 45 f8                          mov     al,-8H[ebp]
 2161  c1 e0 08                          shl     eax,08H
 2164  89 c2                             mov     edx,eax
 2166  31 c0                             xor     eax,eax
 2168  a0 00 00 00 00                    mov     al,_WhitePal
 216d  01 d0                             add     eax,edx
 216f  c1 e0 02                          shl     eax,02H
 2172  8b 80 00 00 00 00                 mov     eax,_DepthFadeTble[eax]
 2178  89 45 e8                          mov     -18H[ebp],eax

		v->r=ddPalette[r].peRed;
 217b  8b 55 e8                          mov     edx,-18H[ebp]
 217e  c1 e2 02                          shl     edx,02H
 2181  31 c0                             xor     eax,eax
 2183  8a 82 00 00 00 00                 mov     al,_ddPalette[edx]
 2189  89 45 e4                          mov     -1cH[ebp],eax
 218c  df 45 e4                          fild    word ptr -1cH[ebp]
 218f  8b 45 f0                          mov     eax,-10H[ebp]
 2192  d9 58 18                          fstp    dword ptr +18H[eax]

		v->g=ddPalette[r].peGreen;
 2195  8b 55 e8                          mov     edx,-18H[ebp]
 2198  c1 e2 02                          shl     edx,02H
 219b  31 c0                             xor     eax,eax
 219d  8a 82 01 00 00 00                 mov     al,_ddPalette+1H[edx]
 21a3  89 45 e4                          mov     -1cH[ebp],eax
 21a6  df 45 e4                          fild    word ptr -1cH[ebp]
 21a9  8b 45 f0                          mov     eax,-10H[ebp]
 21ac  d9 58 1c                          fstp    dword ptr +1cH[eax]

		v->b=ddPalette[r].peBlue;
	}
 21af  8b 55 e8                          mov     edx,-18H[ebp]
 21b2  c1 e2 02                          shl     edx,02H
 21b5  31 c0                             xor     eax,eax
 21b7  8a 82 02 00 00 00                 mov     al,_ddPalette+2H[edx]
 21bd  89 45 e4                          mov     -1cH[ebp],eax
 21c0  df 45 e4                          fild    word ptr -1cH[ebp]
 21c3  8b 45 f0                          mov     eax,-10H[ebp]
 21c6  d9 58 20                          fstp    dword ptr +20H[eax]

	else
	{
 21c9  eb 54                             jmp     L200

		v->r=ddPalette[r].peRed;
 21cb  31 d2             L199            xor     edx,edx
 21cd  8a 55 f4                          mov     dl,-0cH[ebp]
 21d0  c1 e2 02                          shl     edx,02H
 21d3  31 c0                             xor     eax,eax
 21d5  8a 82 00 00 00 00                 mov     al,_ddPalette[edx]
 21db  89 45 e4                          mov     -1cH[ebp],eax
 21de  df 45 e4                          fild    word ptr -1cH[ebp]
 21e1  8b 45 f0                          mov     eax,-10H[ebp]
 21e4  d9 58 18                          fstp    dword ptr +18H[eax]

		v->g=ddPalette[r].peGreen;
 21e7  31 d2                             xor     edx,edx
 21e9  8a 55 f4                          mov     dl,-0cH[ebp]
 21ec  c1 e2 02                          shl     edx,02H
 21ef  31 c0                             xor     eax,eax
 21f1  8a 82 01 00 00 00                 mov     al,_ddPalette+1H[edx]
 21f7  89 45 e4                          mov     -1cH[ebp],eax
 21fa  df 45 e4                          fild    word ptr -1cH[ebp]
 21fd  8b 45 f0                          mov     eax,-10H[ebp]
 2200  d9 58 1c                          fstp    dword ptr +1cH[eax]

		v->b=ddPalette[r].peBlue;
		
	}
 2203  31 d2                             xor     edx,edx
 2205  8a 55 f4                          mov     dl,-0cH[ebp]
 2208  c1 e2 02                          shl     edx,02H
 220b  31 c0                             xor     eax,eax
 220d  8a 82 02 00 00 00                 mov     al,_ddPalette+2H[edx]
 2213  89 45 e4                          mov     -1cH[ebp],eax
 2216  df 45 e4                          fild    word ptr -1cH[ebp]
 2219  8b 45 f0                          mov     eax,-10H[ebp]
 221c  d9 58 20                          fstp    dword ptr +20H[eax]

}
	
 221f  89 ec             L200            mov     esp,ebp
 2221  5d                                pop     ebp
 2222  5f                                pop     edi
 2223  5e                                pop     esi
 2224  c3                                ret     

void	    JJSDrawPolyF4(POLY_F4 * p)
{
	C3D_PVTCF       v;

 2225  53                JJSDrawPolyF4_  push    ebx
 2226  51                                push    ecx
 2227  52                                push    edx
 2228  56                                push    esi
 2229  57                                push    edi
 222a  55                                push    ebp
 222b  89 e5                             mov     ebp,esp
 222d  81 ec 08 00 00 00                 sub     esp,00000008H
 2233  89 45 f8                          mov     -8H[ebp],eax

	if(!SetState(C3D_EPRIM_QUAD,C3D_ESH_FLAT,FALSE,p->b0,C3D_ETL_NONE))
 2236  6a 00                             push    00000000H
 2238  8b 45 f8                          mov     eax,-8H[ebp]
 223b  31 c9                             xor     ecx,ecx
 223d  8a 48 06                          mov     cl,+6H[eax]
 2240  31 db                             xor     ebx,ebx
 2242  ba 02 00 00 00                    mov     edx,00000002H
 2247  b8 02 00 00 00                    mov     eax,00000002H
 224c  e8 00 00 00 00                    call    SetState_
 2251  85 c0                             test    eax,eax
 2253  75 0f                             jne     L201

		if(numvert>(VBUFSIZE-4))
 2255  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 225d  7e 05                             jle     L201

			sendList();

 225f  e8 00 00 00 00                    call    sendList_

	v = &testarray[numvert++];
 2264  66 a1 00 00 00 00 L201            mov     ax,_numvert
 226a  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2271  98                                cwde    
 2272  6b c0 28                          imul    eax,28H
 2275  ba 00 00 00 00                    mov     edx,offset _testarray
 227a  01 c2                             add     edx,eax
 227c  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x0;
 227f  8b 45 f8                          mov     eax,-8H[ebp]
 2282  df 40 08                          fild    word ptr +8H[eax]
 2285  8b 45 fc                          mov     eax,-4H[ebp]
 2288  d9 18                             fstp    dword ptr [eax]

	v->y = p->y0;
 228a  8b 45 f8                          mov     eax,-8H[ebp]
 228d  df 40 0a                          fild    word ptr +0aH[eax]
 2290  8b 45 fc                          mov     eax,-4H[ebp]
 2293  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2296  8b 45 fc                          mov     eax,-4H[ebp]
 2299  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 22a0  66 a1 00 00 00 00                 mov     ax,_numvert
 22a6  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 22ad  98                                cwde    
 22ae  6b d0 28                          imul    edx,eax,28H
 22b1  b8 00 00 00 00                    mov     eax,offset _testarray
 22b6  01 d0                             add     eax,edx
 22b8  89 45 fc                          mov     -4H[ebp],eax

	v->x = p->x1;
 22bb  8b 45 f8                          mov     eax,-8H[ebp]
 22be  df 40 0c                          fild    word ptr +0cH[eax]
 22c1  8b 45 fc                          mov     eax,-4H[ebp]
 22c4  d9 18                             fstp    dword ptr [eax]

	v->y = p->y1;
 22c6  8b 45 f8                          mov     eax,-8H[ebp]
 22c9  df 40 0e                          fild    word ptr +0eH[eax]
 22cc  8b 45 fc                          mov     eax,-4H[ebp]
 22cf  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 22d2  8b 45 fc                          mov     eax,-4H[ebp]
 22d5  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 22dc  66 a1 00 00 00 00                 mov     ax,_numvert
 22e2  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 22e9  98                                cwde    
 22ea  6b c0 28                          imul    eax,28H
 22ed  ba 00 00 00 00                    mov     edx,offset _testarray
 22f2  01 c2                             add     edx,eax
 22f4  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x3;
 22f7  8b 45 f8                          mov     eax,-8H[ebp]
 22fa  df 40 14                          fild    word ptr +14H[eax]
 22fd  8b 45 fc                          mov     eax,-4H[ebp]
 2300  d9 18                             fstp    dword ptr [eax]

	v->y = p->y3;
 2302  8b 45 f8                          mov     eax,-8H[ebp]
 2305  df 40 16                          fild    word ptr +16H[eax]
 2308  8b 45 fc                          mov     eax,-4H[ebp]
 230b  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 230e  8b 45 fc                          mov     eax,-4H[ebp]
 2311  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 2318  66 a1 00 00 00 00                 mov     ax,_numvert
 231e  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2325  98                                cwde    
 2326  6b c0 28                          imul    eax,28H
 2329  ba 00 00 00 00                    mov     edx,offset _testarray
 232e  01 c2                             add     edx,eax
 2330  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x2;
 2333  8b 45 f8                          mov     eax,-8H[ebp]
 2336  df 40 10                          fild    word ptr +10H[eax]
 2339  8b 45 fc                          mov     eax,-4H[ebp]
 233c  d9 18                             fstp    dword ptr [eax]

	v->y = p->y2;
 233e  8b 45 f8                          mov     eax,-8H[ebp]
 2341  df 40 12                          fild    word ptr +12H[eax]
 2344  8b 45 fc                          mov     eax,-4H[ebp]
 2347  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 234a  8b 45 fc                          mov     eax,-4H[ebp]
 234d  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	SetColor(v,p->r0,p->g0,p->b0);
 2354  8b 45 f8                          mov     eax,-8H[ebp]
 2357  31 c9                             xor     ecx,ecx
 2359  8a 48 06                          mov     cl,+6H[eax]
 235c  8b 45 f8                          mov     eax,-8H[ebp]
 235f  31 db                             xor     ebx,ebx
 2361  8a 58 05                          mov     bl,+5H[eax]
 2364  8b 45 f8                          mov     eax,-8H[ebp]
 2367  31 d2                             xor     edx,edx
 2369  8a 50 04                          mov     dl,+4H[eax]
 236c  8b 45 fc                          mov     eax,-4H[ebp]
 236f  e8 00 00 00 00                    call    SetColor_

}

 2374  89 ec                             mov     esp,ebp
 2376  5d                                pop     ebp
 2377  5f                                pop     edi
 2378  5e                                pop     esi
 2379  5a                                pop     edx
 237a  59                                pop     ecx
 237b  5b                                pop     ebx
 237c  c3                                ret     

void	    JJSDrawPolyG4(POLY_G4 * p)
{
	C3D_PVTCF       v;

 237d  53                JJSDrawPolyG4_  push    ebx
 237e  51                                push    ecx
 237f  52                                push    edx
 2380  56                                push    esi
 2381  57                                push    edi
 2382  55                                push    ebp
 2383  89 e5                             mov     ebp,esp
 2385  81 ec 08 00 00 00                 sub     esp,00000008H
 238b  89 45 f8                          mov     -8H[ebp],eax

	if(!SetState(C3D_EPRIM_QUAD,C3D_ESH_FLAT,FALSE,p->b0,C3D_ETL_NONE))
 238e  6a 00                             push    00000000H
 2390  8b 45 f8                          mov     eax,-8H[ebp]
 2393  31 c9                             xor     ecx,ecx
 2395  8a 48 06                          mov     cl,+6H[eax]
 2398  31 db                             xor     ebx,ebx
 239a  ba 02 00 00 00                    mov     edx,00000002H
 239f  b8 02 00 00 00                    mov     eax,00000002H
 23a4  e8 00 00 00 00                    call    SetState_
 23a9  85 c0                             test    eax,eax
 23ab  75 0f                             jne     L202

		if(numvert>(VBUFSIZE-4))
 23ad  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 23b5  7e 05                             jle     L202

			sendList();
 23b7  e8 00 00 00 00                    call    sendList_

	v = &testarray[numvert++];
 23bc  66 a1 00 00 00 00 L202            mov     ax,_numvert
 23c2  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 23c9  98                                cwde    
 23ca  6b c0 28                          imul    eax,28H
 23cd  ba 00 00 00 00                    mov     edx,offset _testarray
 23d2  01 c2                             add     edx,eax
 23d4  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x0;
 23d7  8b 45 f8                          mov     eax,-8H[ebp]
 23da  df 40 08                          fild    word ptr +8H[eax]
 23dd  8b 45 fc                          mov     eax,-4H[ebp]
 23e0  d9 18                             fstp    dword ptr [eax]

	v->y = p->y0;
 23e2  8b 45 f8                          mov     eax,-8H[ebp]
 23e5  df 40 0a                          fild    word ptr +0aH[eax]
 23e8  8b 45 fc                          mov     eax,-4H[ebp]
 23eb  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 23ee  8b 45 fc                          mov     eax,-4H[ebp]
 23f1  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 23f8  66 a1 00 00 00 00                 mov     ax,_numvert
 23fe  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2405  98                                cwde    
 2406  6b d0 28                          imul    edx,eax,28H
 2409  b8 00 00 00 00                    mov     eax,offset _testarray
 240e  01 d0                             add     eax,edx
 2410  89 45 fc                          mov     -4H[ebp],eax

	v->x = p->x1;
 2413  8b 45 f8                          mov     eax,-8H[ebp]
 2416  df 40 10                          fild    word ptr +10H[eax]
 2419  8b 45 fc                          mov     eax,-4H[ebp]
 241c  d9 18                             fstp    dword ptr [eax]

	v->y = p->y1;
 241e  8b 45 f8                          mov     eax,-8H[ebp]
 2421  df 40 12                          fild    word ptr +12H[eax]
 2424  8b 45 fc                          mov     eax,-4H[ebp]
 2427  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 242a  8b 45 fc                          mov     eax,-4H[ebp]
 242d  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 2434  66 a1 00 00 00 00                 mov     ax,_numvert
 243a  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2441  98                                cwde    
 2442  6b c0 28                          imul    eax,28H
 2445  ba 00 00 00 00                    mov     edx,offset _testarray
 244a  01 c2                             add     edx,eax
 244c  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x3;
 244f  8b 45 f8                          mov     eax,-8H[ebp]
 2452  df 40 20                          fild    word ptr +20H[eax]
 2455  8b 45 fc                          mov     eax,-4H[ebp]
 2458  d9 18                             fstp    dword ptr [eax]

	v->y = p->y3;
 245a  8b 45 f8                          mov     eax,-8H[ebp]
 245d  df 40 22                          fild    word ptr +22H[eax]
 2460  8b 45 fc                          mov     eax,-4H[ebp]
 2463  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2466  8b 45 fc                          mov     eax,-4H[ebp]
 2469  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 2470  66 a1 00 00 00 00                 mov     ax,_numvert
 2476  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 247d  98                                cwde    
 247e  6b c0 28                          imul    eax,28H
 2481  ba 00 00 00 00                    mov     edx,offset _testarray
 2486  01 c2                             add     edx,eax
 2488  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x2;
 248b  8b 45 f8                          mov     eax,-8H[ebp]
 248e  df 40 18                          fild    word ptr +18H[eax]
 2491  8b 45 fc                          mov     eax,-4H[ebp]
 2494  d9 18                             fstp    dword ptr [eax]

	v->y = p->y2;
 2496  8b 45 f8                          mov     eax,-8H[ebp]
 2499  df 40 1a                          fild    word ptr +1aH[eax]
 249c  8b 45 fc                          mov     eax,-4H[ebp]
 249f  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 24a2  8b 45 fc                          mov     eax,-4H[ebp]
 24a5  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	SetColor(v,p->r0,p->g0,p->b0);
 24ac  8b 45 f8                          mov     eax,-8H[ebp]
 24af  31 c9                             xor     ecx,ecx
 24b1  8a 48 06                          mov     cl,+6H[eax]
 24b4  8b 45 f8                          mov     eax,-8H[ebp]
 24b7  31 db                             xor     ebx,ebx
 24b9  8a 58 05                          mov     bl,+5H[eax]
 24bc  8b 45 f8                          mov     eax,-8H[ebp]
 24bf  31 d2                             xor     edx,edx
 24c1  8a 50 04                          mov     dl,+4H[eax]
 24c4  8b 45 fc                          mov     eax,-4H[ebp]
 24c7  e8 00 00 00 00                    call    SetColor_

}

 24cc  89 ec                             mov     esp,ebp
 24ce  5d                                pop     ebp
 24cf  5f                                pop     edi
 24d0  5e                                pop     esi
 24d1  5a                                pop     edx
 24d2  59                                pop     ecx
 24d3  5b                                pop     ebx
 24d4  c3                                ret     

void	    JJSDrawPolyFT4(POLY_FT4 * p)
{
	C3D_PVTCF       v;
	C3D_PRSDATA chkey;

 24d5  53                JJSDrawPolyFT4_ push    ebx
 24d6  51                                push    ecx
 24d7  52                                push    edx
 24d8  56                                push    esi
 24d9  57                                push    edi
 24da  55                                push    ebp
 24db  89 e5                             mov     ebp,esp
 24dd  81 ec 14 00 00 00                 sub     esp,00000014H
 24e3  89 45 f4                          mov     -0cH[ebp],eax

	if(!SetState(C3D_EPRIM_QUAD,C3D_ESH_FLAT,TRUE,p->b0,p->g0?C3D_ETL_MODULATE:C3D_ETL_NONE))
 24e6  8b 45 f4                          mov     eax,-0cH[ebp]
 24e9  80 78 05 00                       cmp     byte ptr +5H[eax],00H
 24ed  74 09                             je      L203
 24ef  c7 45 f0 01 00 00 
       00                                mov     dword ptr -10H[ebp],00000001H
 24f6  eb 07                             jmp     L204
 24f8  c7 45 f0 00 00 00 
       00                L203            mov     dword ptr -10H[ebp],00000000H
 24ff  ff 75 f0          L204            push    -10H[ebp]
 2502  8b 45 f4                          mov     eax,-0cH[ebp]
 2505  31 c9                             xor     ecx,ecx
 2507  8a 48 06                          mov     cl,+6H[eax]
 250a  bb 01 00 00 00                    mov     ebx,00000001H
 250f  ba 02 00 00 00                    mov     edx,00000002H
 2514  b8 02 00 00 00                    mov     eax,00000002H
 2519  e8 00 00 00 00                    call    SetState_
 251e  85 c0                             test    eax,eax
 2520  75 0f                             jne     L205

		if(numvert>(VBUFSIZE-4))
 2522  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 252a  7e 05                             jle     L205

			sendList();
 252c  e8 00 00 00 00                    call    sendList_

	if(texpage !=JJSTextureTable[p->tpage&0x1f])
	{
 2531  8b 45 f4          L205            mov     eax,-0cH[ebp]
 2534  66 8b 40 16                       mov     ax,+16H[eax]
 2538  25 1f 00 00 00                    and     eax,0000001fH
 253d  25 ff ff 00 00                    and     eax,0000ffffH
 2542  8a 80 00 00 00 00                 mov     al,_JJSTextureTable[eax]
 2548  30 e4                             xor     ah,ah
 254a  66 3b 05 00 00 00 
       00                                cmp     ax,_texpage
 2551  74 47                             je      L206

		sendList();
 2553  e8 00 00 00 00                    call    sendList_

		texpage=JJSTextureTable[p->tpage&0x1f];
 2558  8b 45 f4                          mov     eax,-0cH[ebp]
 255b  66 8b 40 16                       mov     ax,+16H[eax]
 255f  25 1f 00 00 00                    and     eax,0000001fH
 2564  25 ff ff 00 00                    and     eax,0000ffffH
 2569  8a 80 00 00 00 00                 mov     al,_JJSTextureTable[eax]
 256f  30 e4                             xor     ah,ah
 2571  66 a3 00 00 00 00                 mov     _texpage,ax

		ATI3DCIF_ContextSetState (ghRC, C3D_ERS_TMAP_SELECT, &(gTex[texpage].hTX));
	}

 2577  a1 fe ff ff ff                    mov     eax,_texpage-2H
 257c  c1 f8 10                          sar     eax,10H
 257f  6b c0 74                          imul    eax,74H
 2582  ba 00 00 00 00                    mov     edx,offset _gTex
 2587  01 d0                             add     eax,edx
 2589  83 c0 70                          add     eax,00000070H
 258c  50                                push    eax
 258d  6a 06                             push    00000006H
 258f  ff 35 00 00 00 00                 push    _ghRC
 2595  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

	v = &testarray[numvert++];
 259a  66 a1 00 00 00 00 L206            mov     ax,_numvert
 25a0  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 25a7  98                                cwde    
 25a8  6b d0 28                          imul    edx,eax,28H
 25ab  b8 00 00 00 00                    mov     eax,offset _testarray
 25b0  01 d0                             add     eax,edx
 25b2  89 45 f8                          mov     -8H[ebp],eax

	v->x = p->x0;
 25b5  8b 45 f4                          mov     eax,-0cH[ebp]
 25b8  df 40 08                          fild    word ptr +8H[eax]
 25bb  8b 45 f8                          mov     eax,-8H[ebp]
 25be  d9 18                             fstp    dword ptr [eax]

	v->y = p->y0;
 25c0  8b 45 f4                          mov     eax,-0cH[ebp]
 25c3  df 40 0a                          fild    word ptr +0aH[eax]
 25c6  8b 45 f8                          mov     eax,-8H[ebp]
 25c9  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 25cc  8b 45 f8                          mov     eax,-8H[ebp]
 25cf  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u0/256.0;
 25d6  31 c0                             xor     eax,eax
 25d8  8b 55 f4                          mov     edx,-0cH[ebp]
 25db  8a 42 0c                          mov     al,+0cH[edx]
 25de  89 45 ec                          mov     -14H[ebp],eax
 25e1  df 45 ec                          fild    word ptr -14H[ebp]
 25e4  dc 0d 18 01 00 00                 fmul    qword ptr L331
 25ea  8b 45 f8                          mov     eax,-8H[ebp]
 25ed  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v0/256.0;
 25f0  31 c0                             xor     eax,eax
 25f2  8b 55 f4                          mov     edx,-0cH[ebp]
 25f5  8a 42 0d                          mov     al,+0dH[edx]
 25f8  89 45 ec                          mov     -14H[ebp],eax
 25fb  df 45 ec                          fild    word ptr -14H[ebp]
 25fe  dc 0d 18 01 00 00                 fmul    qword ptr L331
 2604  8b 45 f8                          mov     eax,-8H[ebp]
 2607  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 260a  8b 45 f8                          mov     eax,-8H[ebp]
 260d  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 2614  66 a1 00 00 00 00                 mov     ax,_numvert
 261a  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2621  98                                cwde    
 2622  6b c0 28                          imul    eax,28H
 2625  ba 00 00 00 00                    mov     edx,offset _testarray
 262a  01 c2                             add     edx,eax
 262c  89 55 f8                          mov     -8H[ebp],edx

	v->x = p->x1;
 262f  8b 45 f4                          mov     eax,-0cH[ebp]
 2632  df 40 10                          fild    word ptr +10H[eax]
 2635  8b 45 f8                          mov     eax,-8H[ebp]
 2638  d9 18                             fstp    dword ptr [eax]

	v->y = p->y1;
 263a  8b 45 f4                          mov     eax,-0cH[ebp]
 263d  df 40 12                          fild    word ptr +12H[eax]
 2640  8b 45 f8                          mov     eax,-8H[ebp]
 2643  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2646  8b 45 f8                          mov     eax,-8H[ebp]
 2649  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u1/256.0;
 2650  31 c0                             xor     eax,eax
 2652  8b 55 f4                          mov     edx,-0cH[ebp]
 2655  8a 42 14                          mov     al,+14H[edx]
 2658  89 45 ec                          mov     -14H[ebp],eax
 265b  df 45 ec                          fild    word ptr -14H[ebp]
 265e  dc 0d 18 01 00 00                 fmul    qword ptr L331
 2664  8b 45 f8                          mov     eax,-8H[ebp]
 2667  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v1/256.0;
 266a  31 c0                             xor     eax,eax
 266c  8b 55 f4                          mov     edx,-0cH[ebp]
 266f  8a 42 15                          mov     al,+15H[edx]
 2672  89 45 ec                          mov     -14H[ebp],eax
 2675  df 45 ec                          fild    word ptr -14H[ebp]
 2678  dc 0d 18 01 00 00                 fmul    qword ptr L331
 267e  8b 45 f8                          mov     eax,-8H[ebp]
 2681  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2684  8b 45 f8                          mov     eax,-8H[ebp]
 2687  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 268e  66 a1 00 00 00 00                 mov     ax,_numvert
 2694  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 269b  98                                cwde    
 269c  6b c0 28                          imul    eax,28H
 269f  ba 00 00 00 00                    mov     edx,offset _testarray
 26a4  01 c2                             add     edx,eax
 26a6  89 55 f8                          mov     -8H[ebp],edx

	v->x = p->x3;
 26a9  8b 45 f4                          mov     eax,-0cH[ebp]
 26ac  df 40 20                          fild    word ptr +20H[eax]
 26af  8b 45 f8                          mov     eax,-8H[ebp]
 26b2  d9 18                             fstp    dword ptr [eax]

	v->y = p->y3;
 26b4  8b 45 f4                          mov     eax,-0cH[ebp]
 26b7  df 40 22                          fild    word ptr +22H[eax]
 26ba  8b 45 f8                          mov     eax,-8H[ebp]
 26bd  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 26c0  8b 45 f8                          mov     eax,-8H[ebp]
 26c3  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u3/256.0;
 26ca  31 c0                             xor     eax,eax
 26cc  8b 55 f4                          mov     edx,-0cH[ebp]
 26cf  8a 42 24                          mov     al,+24H[edx]
 26d2  89 45 ec                          mov     -14H[ebp],eax
 26d5  df 45 ec                          fild    word ptr -14H[ebp]
 26d8  dc 0d 18 01 00 00                 fmul    qword ptr L331
 26de  8b 45 f8                          mov     eax,-8H[ebp]
 26e1  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v3/256.0;
 26e4  31 c0                             xor     eax,eax
 26e6  8b 55 f4                          mov     edx,-0cH[ebp]
 26e9  8a 42 25                          mov     al,+25H[edx]
 26ec  89 45 ec                          mov     -14H[ebp],eax
 26ef  df 45 ec                          fild    word ptr -14H[ebp]
 26f2  dc 0d 18 01 00 00                 fmul    qword ptr L331
 26f8  8b 45 f8                          mov     eax,-8H[ebp]
 26fb  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 26fe  8b 45 f8                          mov     eax,-8H[ebp]
 2701  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 2708  66 a1 00 00 00 00                 mov     ax,_numvert
 270e  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2715  0f bf d0                          movsx   edx,ax
 2718  6b d2 28                          imul    edx,28H
 271b  b8 00 00 00 00                    mov     eax,offset _testarray
 2720  01 d0                             add     eax,edx
 2722  89 45 f8                          mov     -8H[ebp],eax

	v->x = p->x2;
 2725  8b 45 f4                          mov     eax,-0cH[ebp]
 2728  df 40 18                          fild    word ptr +18H[eax]
 272b  8b 45 f8                          mov     eax,-8H[ebp]
 272e  d9 18                             fstp    dword ptr [eax]

	v->y = p->y2;
 2730  8b 45 f4                          mov     eax,-0cH[ebp]
 2733  df 40 1a                          fild    word ptr +1aH[eax]
 2736  8b 45 f8                          mov     eax,-8H[ebp]
 2739  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 273c  8b 45 f8                          mov     eax,-8H[ebp]
 273f  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u2/256.0;
 2746  31 c0                             xor     eax,eax
 2748  8b 55 f4                          mov     edx,-0cH[ebp]
 274b  8a 42 1c                          mov     al,+1cH[edx]
 274e  89 45 ec                          mov     -14H[ebp],eax
 2751  df 45 ec                          fild    word ptr -14H[ebp]
 2754  dc 0d 18 01 00 00                 fmul    qword ptr L331
 275a  8b 45 f8                          mov     eax,-8H[ebp]
 275d  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v2/256.0;
 2760  31 c0                             xor     eax,eax
 2762  8b 55 f4                          mov     edx,-0cH[ebp]
 2765  8a 42 1d                          mov     al,+1dH[edx]
 2768  89 45 ec                          mov     -14H[ebp],eax
 276b  df 45 ec                          fild    word ptr -14H[ebp]
 276e  dc 0d 18 01 00 00                 fmul    qword ptr L331
 2774  8b 45 f8                          mov     eax,-8H[ebp]
 2777  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 277a  8b 45 f8                          mov     eax,-8H[ebp]
 277d  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	if(p->g0)
 2784  8b 45 f4                          mov     eax,-0cH[ebp]
 2787  80 78 05 00                       cmp     byte ptr +5H[eax],00H
 278b  74 20                             je      L207

		SetColor(v,p->r0,p->g0,p->b0);
 278d  8b 45 f4                          mov     eax,-0cH[ebp]
 2790  31 c9                             xor     ecx,ecx
 2792  8a 48 06                          mov     cl,+6H[eax]
 2795  8b 45 f4                          mov     eax,-0cH[ebp]
 2798  31 db                             xor     ebx,ebx
 279a  8a 58 05                          mov     bl,+5H[eax]
 279d  8b 45 f4                          mov     eax,-0cH[ebp]
 27a0  31 d2                             xor     edx,edx
 27a2  8a 50 04                          mov     dl,+4H[eax]
 27a5  8b 45 f8                          mov     eax,-8H[ebp]
 27a8  e8 00 00 00 00                    call    SetColor_

}

 27ad  89 ec             L207            mov     esp,ebp
 27af  5d                                pop     ebp
 27b0  5f                                pop     edi
 27b1  5e                                pop     esi
 27b2  5a                                pop     edx
 27b3  59                                pop     ecx
 27b4  5b                                pop     ebx
 27b5  c3                                ret     

void	    JJSDrawPolyF3(POLY_F4 * p)
{
	C3D_PVTCF       v;

 27b6  53                JJSDrawPolyF3_  push    ebx
 27b7  51                                push    ecx
 27b8  52                                push    edx
 27b9  56                                push    esi
 27ba  57                                push    edi
 27bb  55                                push    ebp
 27bc  89 e5                             mov     ebp,esp
 27be  81 ec 08 00 00 00                 sub     esp,00000008H
 27c4  89 45 f8                          mov     -8H[ebp],eax

	if(!SetState(C3D_EPRIM_TRI,C3D_ESH_FLAT,FALSE,p->b0,C3D_ETL_NONE))
 27c7  6a 00                             push    00000000H
 27c9  8b 45 f8                          mov     eax,-8H[ebp]
 27cc  31 c9                             xor     ecx,ecx
 27ce  8a 48 06                          mov     cl,+6H[eax]
 27d1  31 db                             xor     ebx,ebx
 27d3  ba 02 00 00 00                    mov     edx,00000002H
 27d8  b8 01 00 00 00                    mov     eax,00000001H
 27dd  e8 00 00 00 00                    call    SetState_
 27e2  85 c0                             test    eax,eax
 27e4  75 0f                             jne     L208

		if(numvert>(VBUFSIZE-4))
 27e6  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 27ee  7e 05                             jle     L208

			sendList();

 27f0  e8 00 00 00 00                    call    sendList_

	v = &testarray[numvert++];
 27f5  66 a1 00 00 00 00 L208            mov     ax,_numvert
 27fb  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2802  98                                cwde    
 2803  6b c0 28                          imul    eax,28H
 2806  ba 00 00 00 00                    mov     edx,offset _testarray
 280b  01 c2                             add     edx,eax
 280d  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x0;
 2810  8b 45 f8                          mov     eax,-8H[ebp]
 2813  df 40 08                          fild    word ptr +8H[eax]
 2816  8b 45 fc                          mov     eax,-4H[ebp]
 2819  d9 18                             fstp    dword ptr [eax]

	v->y = p->y0;
 281b  8b 45 f8                          mov     eax,-8H[ebp]
 281e  df 40 0a                          fild    word ptr +0aH[eax]
 2821  8b 45 fc                          mov     eax,-4H[ebp]
 2824  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2827  8b 45 fc                          mov     eax,-4H[ebp]
 282a  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 2831  66 a1 00 00 00 00                 mov     ax,_numvert
 2837  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 283e  0f bf d0                          movsx   edx,ax
 2841  6b d2 28                          imul    edx,28H
 2844  b8 00 00 00 00                    mov     eax,offset _testarray
 2849  01 d0                             add     eax,edx
 284b  89 45 fc                          mov     -4H[ebp],eax

	v->x = p->x1;
 284e  8b 45 f8                          mov     eax,-8H[ebp]
 2851  df 40 0c                          fild    word ptr +0cH[eax]
 2854  8b 45 fc                          mov     eax,-4H[ebp]
 2857  d9 18                             fstp    dword ptr [eax]

	v->y = p->y1;
 2859  8b 45 f8                          mov     eax,-8H[ebp]
 285c  df 40 0e                          fild    word ptr +0eH[eax]
 285f  8b 45 fc                          mov     eax,-4H[ebp]
 2862  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2865  8b 45 fc                          mov     eax,-4H[ebp]
 2868  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 286f  66 a1 00 00 00 00                 mov     ax,_numvert
 2875  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 287c  98                                cwde    
 287d  6b c0 28                          imul    eax,28H
 2880  ba 00 00 00 00                    mov     edx,offset _testarray
 2885  01 c2                             add     edx,eax
 2887  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x2;
 288a  8b 45 f8                          mov     eax,-8H[ebp]
 288d  df 40 10                          fild    word ptr +10H[eax]
 2890  8b 45 fc                          mov     eax,-4H[ebp]
 2893  d9 18                             fstp    dword ptr [eax]

	v->y = p->y2;
 2895  8b 45 f8                          mov     eax,-8H[ebp]
 2898  df 40 12                          fild    word ptr +12H[eax]
 289b  8b 45 fc                          mov     eax,-4H[ebp]
 289e  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 28a1  8b 45 fc                          mov     eax,-4H[ebp]
 28a4  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	SetColor(v,p->r0,p->g0,p->b0);
 28ab  8b 45 f8                          mov     eax,-8H[ebp]
 28ae  31 c9                             xor     ecx,ecx
 28b0  8a 48 06                          mov     cl,+6H[eax]
 28b3  8b 45 f8                          mov     eax,-8H[ebp]
 28b6  31 db                             xor     ebx,ebx
 28b8  8a 58 05                          mov     bl,+5H[eax]
 28bb  8b 45 f8                          mov     eax,-8H[ebp]
 28be  31 d2                             xor     edx,edx
 28c0  8a 50 04                          mov     dl,+4H[eax]
 28c3  8b 45 fc                          mov     eax,-4H[ebp]
 28c6  e8 00 00 00 00                    call    SetColor_

}

 28cb  89 ec                             mov     esp,ebp
 28cd  5d                                pop     ebp
 28ce  5f                                pop     edi
 28cf  5e                                pop     esi
 28d0  5a                                pop     edx
 28d1  59                                pop     ecx
 28d2  5b                                pop     ebx
 28d3  c3                                ret     

void	    JJSDrawPolyG3(POLY_G3 * p)
{
	C3D_PVTCF       v;

 28d4  53                JJSDrawPolyG3_  push    ebx
 28d5  51                                push    ecx
 28d6  52                                push    edx
 28d7  56                                push    esi
 28d8  57                                push    edi
 28d9  55                                push    ebp
 28da  89 e5                             mov     ebp,esp
 28dc  81 ec 08 00 00 00                 sub     esp,00000008H
 28e2  89 45 f8                          mov     -8H[ebp],eax

	if(!SetState(C3D_EPRIM_TRI,C3D_ESH_FLAT,FALSE,p->b0,C3D_ETL_NONE))
 28e5  6a 00                             push    00000000H
 28e7  8b 45 f8                          mov     eax,-8H[ebp]
 28ea  31 c9                             xor     ecx,ecx
 28ec  8a 48 06                          mov     cl,+6H[eax]
 28ef  31 db                             xor     ebx,ebx
 28f1  ba 02 00 00 00                    mov     edx,00000002H
 28f6  b8 01 00 00 00                    mov     eax,00000001H
 28fb  e8 00 00 00 00                    call    SetState_
 2900  85 c0                             test    eax,eax
 2902  75 0f                             jne     L209

		if(numvert>(VBUFSIZE-4))
 2904  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 290c  7e 05                             jle     L209

			sendList();

 290e  e8 00 00 00 00                    call    sendList_

	v = &testarray[numvert++];
 2913  66 a1 00 00 00 00 L209            mov     ax,_numvert
 2919  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2920  98                                cwde    
 2921  6b c0 28                          imul    eax,28H
 2924  ba 00 00 00 00                    mov     edx,offset _testarray
 2929  01 c2                             add     edx,eax
 292b  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x0;
 292e  8b 45 f8                          mov     eax,-8H[ebp]
 2931  df 40 08                          fild    word ptr +8H[eax]
 2934  8b 45 fc                          mov     eax,-4H[ebp]
 2937  d9 18                             fstp    dword ptr [eax]

	v->y = p->y0;
 2939  8b 45 f8                          mov     eax,-8H[ebp]
 293c  df 40 0a                          fild    word ptr +0aH[eax]
 293f  8b 45 fc                          mov     eax,-4H[ebp]
 2942  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2945  8b 45 fc                          mov     eax,-4H[ebp]
 2948  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 294f  66 a1 00 00 00 00                 mov     ax,_numvert
 2955  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 295c  0f bf d0                          movsx   edx,ax
 295f  6b d2 28                          imul    edx,28H
 2962  b8 00 00 00 00                    mov     eax,offset _testarray
 2967  01 d0                             add     eax,edx
 2969  89 45 fc                          mov     -4H[ebp],eax

	v->x = p->x1;
 296c  8b 45 f8                          mov     eax,-8H[ebp]
 296f  df 40 10                          fild    word ptr +10H[eax]
 2972  8b 45 fc                          mov     eax,-4H[ebp]
 2975  d9 18                             fstp    dword ptr [eax]

	v->y = p->y1;
 2977  8b 45 f8                          mov     eax,-8H[ebp]
 297a  df 40 12                          fild    word ptr +12H[eax]
 297d  8b 45 fc                          mov     eax,-4H[ebp]
 2980  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2983  8b 45 fc                          mov     eax,-4H[ebp]
 2986  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v = &testarray[numvert++];
 298d  66 a1 00 00 00 00                 mov     ax,_numvert
 2993  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 299a  98                                cwde    
 299b  6b c0 28                          imul    eax,28H
 299e  ba 00 00 00 00                    mov     edx,offset _testarray
 29a3  01 c2                             add     edx,eax
 29a5  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x2;
 29a8  8b 45 f8                          mov     eax,-8H[ebp]
 29ab  df 40 18                          fild    word ptr +18H[eax]
 29ae  8b 45 fc                          mov     eax,-4H[ebp]
 29b1  d9 18                             fstp    dword ptr [eax]

	v->y = p->y2;
 29b3  8b 45 f8                          mov     eax,-8H[ebp]
 29b6  df 40 1a                          fild    word ptr +1aH[eax]
 29b9  8b 45 fc                          mov     eax,-4H[ebp]
 29bc  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 29bf  8b 45 fc                          mov     eax,-4H[ebp]
 29c2  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	SetColor(v,p->r0,p->g0,p->b0);
 29c9  8b 45 f8                          mov     eax,-8H[ebp]
 29cc  31 c9                             xor     ecx,ecx
 29ce  8a 48 06                          mov     cl,+6H[eax]
 29d1  8b 45 f8                          mov     eax,-8H[ebp]
 29d4  31 db                             xor     ebx,ebx
 29d6  8a 58 05                          mov     bl,+5H[eax]
 29d9  8b 45 f8                          mov     eax,-8H[ebp]
 29dc  31 d2                             xor     edx,edx
 29de  8a 50 04                          mov     dl,+4H[eax]
 29e1  8b 45 fc                          mov     eax,-4H[ebp]
 29e4  e8 00 00 00 00                    call    SetColor_

}

 29e9  89 ec                             mov     esp,ebp
 29eb  5d                                pop     ebp
 29ec  5f                                pop     edi
 29ed  5e                                pop     esi
 29ee  5a                                pop     edx
 29ef  59                                pop     ecx
 29f0  5b                                pop     ebx
 29f1  c3                                ret     

void	    JJSDrawPolyFT3(POLY_FT3 * p)
{
	C3D_PVTCF       v;

 29f2  53                JJSDrawPolyFT3_ push    ebx
 29f3  51                                push    ecx
 29f4  52                                push    edx
 29f5  56                                push    esi
 29f6  57                                push    edi
 29f7  55                                push    ebp
 29f8  89 e5                             mov     ebp,esp
 29fa  81 ec 0c 00 00 00                 sub     esp,0000000cH
 2a00  89 45 f8                          mov     -8H[ebp],eax

	if(!SetState(C3D_EPRIM_TRI,C3D_ESH_FLAT,TRUE,p->b0,C3D_ETL_NONE))
 2a03  6a 00                             push    00000000H
 2a05  8b 45 f8                          mov     eax,-8H[ebp]
 2a08  31 c9                             xor     ecx,ecx
 2a0a  8a 48 06                          mov     cl,+6H[eax]
 2a0d  bb 01 00 00 00                    mov     ebx,00000001H
 2a12  ba 02 00 00 00                    mov     edx,00000002H
 2a17  b8 01 00 00 00                    mov     eax,00000001H
 2a1c  e8 00 00 00 00                    call    SetState_
 2a21  85 c0                             test    eax,eax
 2a23  75 0f                             jne     L210

		if(numvert>(VBUFSIZE-4))
 2a25  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 2a2d  7e 05                             jle     L210

			sendList();
 2a2f  e8 00 00 00 00                    call    sendList_

	if(texpage!=JJSTextureTable[p->tpage&0x1f])
	{
 2a34  8b 45 f8          L210            mov     eax,-8H[ebp]
 2a37  66 8b 40 16                       mov     ax,+16H[eax]
 2a3b  25 1f 00 00 00                    and     eax,0000001fH
 2a40  25 ff ff 00 00                    and     eax,0000ffffH
 2a45  8a 80 00 00 00 00                 mov     al,_JJSTextureTable[eax]
 2a4b  30 e4                             xor     ah,ah
 2a4d  66 3b 05 00 00 00 
       00                                cmp     ax,_texpage
 2a54  74 47                             je      L211

		sendList();
 2a56  e8 00 00 00 00                    call    sendList_

		texpage=JJSTextureTable[p->tpage&0x1f];
 2a5b  8b 45 f8                          mov     eax,-8H[ebp]
 2a5e  66 8b 40 16                       mov     ax,+16H[eax]
 2a62  25 1f 00 00 00                    and     eax,0000001fH
 2a67  25 ff ff 00 00                    and     eax,0000ffffH
 2a6c  8a 80 00 00 00 00                 mov     al,_JJSTextureTable[eax]
 2a72  30 e4                             xor     ah,ah
 2a74  66 a3 00 00 00 00                 mov     _texpage,ax

		ATI3DCIF_ContextSetState (ghRC, C3D_ERS_TMAP_SELECT, &(gTex[texpage].hTX));
	}

 2a7a  a1 fe ff ff ff                    mov     eax,_texpage-2H
 2a7f  c1 f8 10                          sar     eax,10H
 2a82  6b c0 74                          imul    eax,74H
 2a85  ba 00 00 00 00                    mov     edx,offset _gTex
 2a8a  01 d0                             add     eax,edx
 2a8c  83 c0 70                          add     eax,00000070H
 2a8f  50                                push    eax
 2a90  6a 06                             push    00000006H
 2a92  ff 35 00 00 00 00                 push    _ghRC
 2a98  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

	v = &testarray[numvert++];
 2a9d  66 a1 00 00 00 00 L211            mov     ax,_numvert
 2aa3  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2aaa  98                                cwde    
 2aab  6b c0 28                          imul    eax,28H
 2aae  ba 00 00 00 00                    mov     edx,offset _testarray
 2ab3  01 c2                             add     edx,eax
 2ab5  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x0;
 2ab8  8b 45 f8                          mov     eax,-8H[ebp]
 2abb  df 40 08                          fild    word ptr +8H[eax]
 2abe  8b 45 fc                          mov     eax,-4H[ebp]
 2ac1  d9 18                             fstp    dword ptr [eax]

	v->y = p->y0;
 2ac3  8b 45 f8                          mov     eax,-8H[ebp]
 2ac6  df 40 0a                          fild    word ptr +0aH[eax]
 2ac9  8b 45 fc                          mov     eax,-4H[ebp]
 2acc  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2acf  8b 45 fc                          mov     eax,-4H[ebp]
 2ad2  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u0/256.0;
 2ad9  31 c0                             xor     eax,eax
 2adb  8b 55 f8                          mov     edx,-8H[ebp]
 2ade  8a 42 0c                          mov     al,+0cH[edx]
 2ae1  89 45 f4                          mov     -0cH[ebp],eax
 2ae4  df 45 f4                          fild    word ptr -0cH[ebp]
 2ae7  dc 0d 20 01 00 00                 fmul    qword ptr L332
 2aed  8b 45 fc                          mov     eax,-4H[ebp]
 2af0  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v0/256.0;
 2af3  31 c0                             xor     eax,eax
 2af5  8b 55 f8                          mov     edx,-8H[ebp]
 2af8  8a 42 0d                          mov     al,+0dH[edx]
 2afb  89 45 f4                          mov     -0cH[ebp],eax
 2afe  df 45 f4                          fild    word ptr -0cH[ebp]
 2b01  dc 0d 20 01 00 00                 fmul    qword ptr L332
 2b07  8b 45 fc                          mov     eax,-4H[ebp]
 2b0a  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2b0d  8b 45 fc                          mov     eax,-4H[ebp]
 2b10  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 2b17  66 a1 00 00 00 00                 mov     ax,_numvert
 2b1d  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2b24  98                                cwde    
 2b25  6b c0 28                          imul    eax,28H
 2b28  ba 00 00 00 00                    mov     edx,offset _testarray
 2b2d  01 c2                             add     edx,eax
 2b2f  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x1;
 2b32  8b 45 f8                          mov     eax,-8H[ebp]
 2b35  df 40 10                          fild    word ptr +10H[eax]
 2b38  8b 45 fc                          mov     eax,-4H[ebp]
 2b3b  d9 18                             fstp    dword ptr [eax]

	v->y = p->y1;
 2b3d  8b 45 f8                          mov     eax,-8H[ebp]
 2b40  df 40 12                          fild    word ptr +12H[eax]
 2b43  8b 45 fc                          mov     eax,-4H[ebp]
 2b46  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2b49  8b 45 fc                          mov     eax,-4H[ebp]
 2b4c  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u1/256.0;
 2b53  31 c0                             xor     eax,eax
 2b55  8b 55 f8                          mov     edx,-8H[ebp]
 2b58  8a 42 14                          mov     al,+14H[edx]
 2b5b  89 45 f4                          mov     -0cH[ebp],eax
 2b5e  df 45 f4                          fild    word ptr -0cH[ebp]
 2b61  dc 0d 20 01 00 00                 fmul    qword ptr L332
 2b67  8b 45 fc                          mov     eax,-4H[ebp]
 2b6a  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v1/256.0;
 2b6d  31 c0                             xor     eax,eax
 2b6f  8b 55 f8                          mov     edx,-8H[ebp]
 2b72  8a 42 15                          mov     al,+15H[edx]
 2b75  89 45 f4                          mov     -0cH[ebp],eax
 2b78  df 45 f4                          fild    word ptr -0cH[ebp]
 2b7b  dc 0d 20 01 00 00                 fmul    qword ptr L332
 2b81  8b 45 fc                          mov     eax,-4H[ebp]
 2b84  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2b87  8b 45 fc                          mov     eax,-4H[ebp]
 2b8a  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 2b91  66 a1 00 00 00 00                 mov     ax,_numvert
 2b97  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2b9e  98                                cwde    
 2b9f  6b c0 28                          imul    eax,28H
 2ba2  ba 00 00 00 00                    mov     edx,offset _testarray
 2ba7  01 c2                             add     edx,eax
 2ba9  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x2;
 2bac  8b 45 f8                          mov     eax,-8H[ebp]
 2baf  df 40 18                          fild    word ptr +18H[eax]
 2bb2  8b 45 fc                          mov     eax,-4H[ebp]
 2bb5  d9 18                             fstp    dword ptr [eax]

	v->y = p->y2;
 2bb7  8b 45 f8                          mov     eax,-8H[ebp]
 2bba  df 40 1a                          fild    word ptr +1aH[eax]
 2bbd  8b 45 fc                          mov     eax,-4H[ebp]
 2bc0  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2bc3  8b 45 fc                          mov     eax,-4H[ebp]
 2bc6  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u2/256.0;
 2bcd  31 c0                             xor     eax,eax
 2bcf  8b 55 f8                          mov     edx,-8H[ebp]
 2bd2  8a 42 1c                          mov     al,+1cH[edx]
 2bd5  89 45 f4                          mov     -0cH[ebp],eax
 2bd8  df 45 f4                          fild    word ptr -0cH[ebp]
 2bdb  dc 0d 20 01 00 00                 fmul    qword ptr L332
 2be1  8b 45 fc                          mov     eax,-4H[ebp]
 2be4  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v2/256.0;
 2be7  31 c0                             xor     eax,eax
 2be9  8b 55 f8                          mov     edx,-8H[ebp]
 2bec  8a 42 1d                          mov     al,+1dH[edx]
 2bef  89 45 f4                          mov     -0cH[ebp],eax
 2bf2  df 45 f4                          fild    word ptr -0cH[ebp]
 2bf5  dc 0d 20 01 00 00                 fmul    qword ptr L332
 2bfb  8b 45 fc                          mov     eax,-4H[ebp]
 2bfe  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2c01  8b 45 fc                          mov     eax,-4H[ebp]
 2c04  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

}

 2c0b  89 ec                             mov     esp,ebp
 2c0d  5d                                pop     ebp
 2c0e  5f                                pop     edi
 2c0f  5e                                pop     esi
 2c10  5a                                pop     edx
 2c11  59                                pop     ecx
 2c12  5b                                pop     ebx
 2c13  c3                                ret     

void	    JJSDrawPolyGT3(POLY_GT3 * p)
{
	C3D_PVTCF       v;

 2c14  53                JJSDrawPolyGT3_ push    ebx
 2c15  51                                push    ecx
 2c16  52                                push    edx
 2c17  56                                push    esi
 2c18  57                                push    edi
 2c19  55                                push    ebp
 2c1a  89 e5                             mov     ebp,esp
 2c1c  81 ec 0c 00 00 00                 sub     esp,0000000cH
 2c22  89 45 f8                          mov     -8H[ebp],eax

	if(!SetState(C3D_EPRIM_TRI,C3D_ESH_FLAT,TRUE,p->b0,C3D_ETL_NONE))
 2c25  6a 00                             push    00000000H
 2c27  8b 45 f8                          mov     eax,-8H[ebp]
 2c2a  31 c9                             xor     ecx,ecx
 2c2c  8a 48 06                          mov     cl,+6H[eax]
 2c2f  bb 01 00 00 00                    mov     ebx,00000001H
 2c34  ba 02 00 00 00                    mov     edx,00000002H
 2c39  b8 01 00 00 00                    mov     eax,00000001H
 2c3e  e8 00 00 00 00                    call    SetState_
 2c43  85 c0                             test    eax,eax
 2c45  75 0f                             jne     L212

		if(numvert>(VBUFSIZE-4))
 2c47  66 83 3d 00 00 00 
       00 24                             cmp     word ptr _numvert,0024H
 2c4f  7e 05                             jle     L212

			sendList();

 2c51  e8 00 00 00 00                    call    sendList_

	if(texpage!=JJSTextureTable[p->tpage&0x1f])
	{
 2c56  8b 45 f8          L212            mov     eax,-8H[ebp]
 2c59  66 8b 40 1a                       mov     ax,+1aH[eax]
 2c5d  25 1f 00 00 00                    and     eax,0000001fH
 2c62  25 ff ff 00 00                    and     eax,0000ffffH
 2c67  8a 80 00 00 00 00                 mov     al,_JJSTextureTable[eax]
 2c6d  30 e4                             xor     ah,ah
 2c6f  66 3b 05 00 00 00 
       00                                cmp     ax,_texpage
 2c76  74 47                             je      L213

		sendList();
 2c78  e8 00 00 00 00                    call    sendList_

		texpage=JJSTextureTable[p->tpage&0x1f];
 2c7d  8b 45 f8                          mov     eax,-8H[ebp]
 2c80  66 8b 40 1a                       mov     ax,+1aH[eax]
 2c84  25 1f 00 00 00                    and     eax,0000001fH
 2c89  25 ff ff 00 00                    and     eax,0000ffffH
 2c8e  8a 80 00 00 00 00                 mov     al,_JJSTextureTable[eax]
 2c94  30 e4                             xor     ah,ah
 2c96  66 a3 00 00 00 00                 mov     _texpage,ax

		ATI3DCIF_ContextSetState (ghRC, C3D_ERS_TMAP_SELECT, &(gTex[texpage].hTX));
	}

 2c9c  a1 fe ff ff ff                    mov     eax,_texpage-2H
 2ca1  c1 f8 10                          sar     eax,10H
 2ca4  6b c0 74                          imul    eax,74H
 2ca7  ba 00 00 00 00                    mov     edx,offset _gTex
 2cac  01 d0                             add     eax,edx
 2cae  83 c0 70                          add     eax,00000070H
 2cb1  50                                push    eax
 2cb2  6a 06                             push    00000006H
 2cb4  ff 35 00 00 00 00                 push    _ghRC
 2cba  e8 00 00 00 00                    call    _ATI3DCIF_ContextSetState@12

	v = &testarray[numvert++];
 2cbf  66 a1 00 00 00 00 L213            mov     ax,_numvert
 2cc5  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2ccc  98                                cwde    
 2ccd  6b c0 28                          imul    eax,28H
 2cd0  ba 00 00 00 00                    mov     edx,offset _testarray
 2cd5  01 c2                             add     edx,eax
 2cd7  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x0;
 2cda  8b 45 f8                          mov     eax,-8H[ebp]
 2cdd  df 40 08                          fild    word ptr +8H[eax]
 2ce0  8b 45 fc                          mov     eax,-4H[ebp]
 2ce3  d9 18                             fstp    dword ptr [eax]

	v->y = p->y0;
 2ce5  8b 45 f8                          mov     eax,-8H[ebp]
 2ce8  df 40 0a                          fild    word ptr +0aH[eax]
 2ceb  8b 45 fc                          mov     eax,-4H[ebp]
 2cee  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2cf1  8b 45 fc                          mov     eax,-4H[ebp]
 2cf4  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u0/256.0;
 2cfb  31 c0                             xor     eax,eax
 2cfd  8b 55 f8                          mov     edx,-8H[ebp]
 2d00  8a 42 0c                          mov     al,+0cH[edx]
 2d03  89 45 f4                          mov     -0cH[ebp],eax
 2d06  df 45 f4                          fild    word ptr -0cH[ebp]
 2d09  dc 0d 28 01 00 00                 fmul    qword ptr L333
 2d0f  8b 45 fc                          mov     eax,-4H[ebp]
 2d12  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v0/256.0;
 2d15  31 c0                             xor     eax,eax
 2d17  8b 55 f8                          mov     edx,-8H[ebp]
 2d1a  8a 42 0d                          mov     al,+0dH[edx]
 2d1d  89 45 f4                          mov     -0cH[ebp],eax
 2d20  df 45 f4                          fild    word ptr -0cH[ebp]
 2d23  dc 0d 28 01 00 00                 fmul    qword ptr L333
 2d29  8b 45 fc                          mov     eax,-4H[ebp]
 2d2c  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2d2f  8b 45 fc                          mov     eax,-4H[ebp]
 2d32  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 2d39  66 a1 00 00 00 00                 mov     ax,_numvert
 2d3f  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2d46  98                                cwde    
 2d47  6b c0 28                          imul    eax,28H
 2d4a  ba 00 00 00 00                    mov     edx,offset _testarray
 2d4f  01 c2                             add     edx,eax
 2d51  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x1;
 2d54  8b 45 f8                          mov     eax,-8H[ebp]
 2d57  df 40 14                          fild    word ptr +14H[eax]
 2d5a  8b 45 fc                          mov     eax,-4H[ebp]
 2d5d  d9 18                             fstp    dword ptr [eax]

	v->y = p->y1;
 2d5f  8b 45 f8                          mov     eax,-8H[ebp]
 2d62  df 40 16                          fild    word ptr +16H[eax]
 2d65  8b 45 fc                          mov     eax,-4H[ebp]
 2d68  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2d6b  8b 45 fc                          mov     eax,-4H[ebp]
 2d6e  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u1/256.0;
 2d75  31 c0                             xor     eax,eax
 2d77  8b 55 f8                          mov     edx,-8H[ebp]
 2d7a  8a 42 18                          mov     al,+18H[edx]
 2d7d  89 45 f4                          mov     -0cH[ebp],eax
 2d80  df 45 f4                          fild    word ptr -0cH[ebp]
 2d83  dc 0d 28 01 00 00                 fmul    qword ptr L333
 2d89  8b 45 fc                          mov     eax,-4H[ebp]
 2d8c  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v1/256.0;
 2d8f  31 c0                             xor     eax,eax
 2d91  8b 55 f8                          mov     edx,-8H[ebp]
 2d94  8a 42 19                          mov     al,+19H[edx]
 2d97  89 45 f4                          mov     -0cH[ebp],eax
 2d9a  df 45 f4                          fild    word ptr -0cH[ebp]
 2d9d  dc 0d 28 01 00 00                 fmul    qword ptr L333
 2da3  8b 45 fc                          mov     eax,-4H[ebp]
 2da6  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2da9  8b 45 fc                          mov     eax,-4H[ebp]
 2dac  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

	v = &testarray[numvert++];
 2db3  66 a1 00 00 00 00                 mov     ax,_numvert
 2db9  66 ff 05 00 00 00 
       00                                inc     word ptr _numvert
 2dc0  98                                cwde    
 2dc1  6b c0 28                          imul    eax,28H
 2dc4  ba 00 00 00 00                    mov     edx,offset _testarray
 2dc9  01 c2                             add     edx,eax
 2dcb  89 55 fc                          mov     -4H[ebp],edx

	v->x = p->x2;
 2dce  8b 45 f8                          mov     eax,-8H[ebp]
 2dd1  df 40 20                          fild    word ptr +20H[eax]
 2dd4  8b 45 fc                          mov     eax,-4H[ebp]
 2dd7  d9 18                             fstp    dword ptr [eax]

	v->y = p->y2;
 2dd9  8b 45 f8                          mov     eax,-8H[ebp]
 2ddc  df 40 22                          fild    word ptr +22H[eax]
 2ddf  8b 45 fc                          mov     eax,-4H[ebp]
 2de2  d9 58 04                          fstp    dword ptr +4H[eax]

	v->z = 0;
 2de5  8b 45 fc                          mov     eax,-4H[ebp]
 2de8  c7 40 08 00 00 00 
       00                                mov     dword ptr +8H[eax],00000000H

	v->s = p->u2/256.0;
 2def  31 c0                             xor     eax,eax
 2df1  8b 55 f8                          mov     edx,-8H[ebp]
 2df4  8a 42 24                          mov     al,+24H[edx]
 2df7  89 45 f4                          mov     -0cH[ebp],eax
 2dfa  df 45 f4                          fild    word ptr -0cH[ebp]
 2dfd  dc 0d 28 01 00 00                 fmul    qword ptr L333
 2e03  8b 45 fc                          mov     eax,-4H[ebp]
 2e06  d9 58 0c                          fstp    dword ptr +0cH[eax]

	v->t = p->v2/256.0;
 2e09  31 c0                             xor     eax,eax
 2e0b  8b 55 f8                          mov     edx,-8H[ebp]
 2e0e  8a 42 25                          mov     al,+25H[edx]
 2e11  89 45 f4                          mov     -0cH[ebp],eax
 2e14  df 45 f4                          fild    word ptr -0cH[ebp]
 2e17  dc 0d 28 01 00 00                 fmul    qword ptr L333
 2e1d  8b 45 fc                          mov     eax,-4H[ebp]
 2e20  d9 58 10                          fstp    dword ptr +10H[eax]

	v->w = 1.0;
 2e23  8b 45 fc                          mov     eax,-4H[ebp]
 2e26  c7 40 14 00 00 80 
       3f                                mov     dword ptr +14H[eax],3f800000H

}

/*
 *  LoadTexture - load a texture map from a file into a texture surface
 */
 2e2d  89 ec                             mov     esp,ebp
 2e2f  5d                                pop     ebp
 2e30  5f                                pop     edi
 2e31  5e                                pop     esi
 2e32  5a                                pop     edx
 2e33  59                                pop     ecx
 2e34  5b                                pop     ebx
 2e35  c3                                ret     

BOOL LoadTextureBMP (const char* lpszTexFilename, PTEXTURE pTex)
{
    HRESULT             ddretval;
 2e36  53                LoadTextureBMP_ push    ebx
 2e37  51                                push    ecx
 2e38  56                                push    esi
 2e39  57                                push    edi
 2e3a  55                                push    ebp
 2e3b  89 e5                             mov     ebp,esp
 2e3d  81 ec e0 00 00 00                 sub     esp,000000e0H
 2e43  89 45 ac                          mov     -54H[ebp],eax
 2e46  89 55 b0                          mov     -50H[ebp],edx

	C3D_UINT32			log2X = 0L;
 2e49  c7 45 c8 00 00 00 
       00                                mov     dword ptr -38H[ebp],00000000H

	C3D_UINT32			log2Y = 0L;
	C3D_TMAP			TMap;
	int					k, maxlog2;
	C3D_EC				ecRetVal;
	HANDLE				hTexFile;
	BITMAPFILEHEADER	bmfh;
	BITMAPINFOHEADER	bmih;
	C3D_UINT32			bufsize;
	void*				ptmap;
	void*				bmdata;
	C3D_UINT32			pitch;
	C3D_UINT8			r, g, b;
	C3D_UINT16			rgb565;
	DWORD				bytesread;
	int	x,y;

	// validate pTex
 2e50  c7 45 cc 00 00 00 
       00                                mov     dword ptr -34H[ebp],00000000H

	if (!pTex)
	{
 2e57  83 7d b0 00                       cmp     dword ptr -50H[ebp],00000000H
 2e5b  75 26                             jne     L214

		wsprintf (gszErrMsg, "LoadTexture %s: invalid pointer", lpszTexFilename);
 2e5d  8b 45 ac                          mov     eax,-54H[ebp]
 2e60  50                                push    eax
 2e61  b8 30 01 00 00                    mov     eax,offset L334
 2e66  50                                push    eax
 2e67  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 2e6c  50                                push    eax
 2e6d  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 2e74  83 c4 0c                          add     esp,0000000cH

		return FALSE;
	}

	// open texture map file for reading
 2e77  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 2e7e  e9 d9 06 00 00                    jmp     L245

	hTexFile = CreateFile (
		lpszTexFilename,
		GENERIC_READ,
		FILE_SHARE_READ,
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_SEQUENTIAL_SCAN,
		NULL);
 2e83  6a 00             L214            push    00000000H
 2e85  68 00 00 00 08                    push    08000000H
 2e8a  6a 03                             push    00000003H
 2e8c  6a 00                             push    00000000H
 2e8e  6a 01                             push    00000001H
 2e90  68 00 00 00 80                    push    80000000H
 2e95  8b 45 ac                          mov     eax,-54H[ebp]
 2e98  50                                push    eax
 2e99  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CreateFileA@28
 2ea0  89 45 c4                          mov     -3cH[ebp],eax

	if (hTexFile == INVALID_HANDLE_VALUE)
	{
 2ea3  83 7d c4 ff                       cmp     dword ptr -3cH[ebp],0ffffffffH
 2ea7  75 22                             jne     L215

		wsprintf (gszErrMsg, "Could not open texture map file");
 2ea9  b8 50 01 00 00                    mov     eax,offset L335
 2eae  50                                push    eax
 2eaf  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 2eb4  50                                push    eax
 2eb5  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 2ebc  83 c4 08                          add     esp,00000008H

		return FALSE;
	}

	// read headers and bitmap data
	// first, determine buffer size required for BITMAPINFO and data
 2ebf  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 2ec6  e9 91 06 00 00                    jmp     L245

	bufsize = GetFileSize (hTexFile, NULL);
 2ecb  6a 00             L215            push    00000000H
 2ecd  8b 45 c4                          mov     eax,-3cH[ebp]
 2ed0  50                                push    eax
 2ed1  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetFileSize@8
 2ed8  89 45 d0                          mov     -30H[ebp],eax

	if (bufsize == 0xFFFFFFFFL)
	{
 2edb  83 7d d0 ff                       cmp     dword ptr -30H[ebp],0ffffffffH
 2edf  75 2d                             jne     L216

		wsprintf (gszErrMsg, "Error getting texture file size");
 2ee1  b8 70 01 00 00                    mov     eax,offset L336
 2ee6  50                                push    eax
 2ee7  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 2eec  50                                push    eax
 2eed  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 2ef4  83 c4 08                          add     esp,00000008H

		CloseHandle (hTexFile);
 2ef7  8b 45 c4                          mov     eax,-3cH[ebp]
 2efa  50                                push    eax
 2efb  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

		return FALSE;
	}

	// adjust bufsize for BITMAFILEHEADER
 2f02  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 2f09  e9 4e 06 00 00                    jmp     L245

	bufsize -= sizeof (bmfh);
 2f0e  83 45 d0 f2       L216            add     dword ptr -30H[ebp],0fffffff2H

	ptmap = (void*) HeapAlloc (GetProcessHeap (), HEAP_ZERO_MEMORY, sizeof (char) * bufsize);
 2f12  8b 45 d0                          mov     eax,-30H[ebp]
 2f15  50                                push    eax
 2f16  6a 08                             push    00000008H
 2f18  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 2f1f  50                                push    eax
 2f20  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapAlloc@12
 2f27  89 45 d4                          mov     -2cH[ebp],eax

	if (!ptmap)
	{
 2f2a  83 7d d4 00                       cmp     dword ptr -2cH[ebp],00000000H
 2f2e  75 2d                             jne     L217

		wsprintf (gszErrMsg, "Could not allocate memory for texture map data");
 2f30  b8 90 01 00 00                    mov     eax,offset L337
 2f35  50                                push    eax
 2f36  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 2f3b  50                                push    eax
 2f3c  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 2f43  83 c4 08                          add     esp,00000008H

		CloseHandle (hTexFile);
 2f46  8b 45 c4                          mov     eax,-3cH[ebp]
 2f49  50                                push    eax
 2f4a  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

		return FALSE;
	}

	// read BITMAPFILEHEADER
 2f51  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 2f58  e9 ff 05 00 00                    jmp     L245

	if (!ReadFile (hTexFile, &bmfh, sizeof (bmfh), &bytesread, NULL) || 
		(bytesread != sizeof (bmfh)))
	{
 2f5d  6a 00             L217            push    00000000H
 2f5f  8d 45 e4                          lea     eax,-1cH[ebp]
 2f62  50                                push    eax
 2f63  6a 0e                             push    0000000eH
 2f65  8d 45 9c                          lea     eax,-64H[ebp]
 2f68  50                                push    eax
 2f69  8b 45 c4                          mov     eax,-3cH[ebp]
 2f6c  50                                push    eax
 2f6d  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__ReadFile@20
 2f74  85 c0                             test    eax,eax
 2f76  74 06                             je      L218
 2f78  83 7d e4 0e                       cmp     dword ptr -1cH[ebp],0000000eH
 2f7c  74 42                             je      L219

		HeapFree (GetProcessHeap (), 0, ptmap);
 2f7e  8b 45 d4          L218            mov     eax,-2cH[ebp]
 2f81  50                                push    eax
 2f82  6a 00                             push    00000000H
 2f84  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 2f8b  50                                push    eax
 2f8c  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapFree@12

		CloseHandle (hTexFile);
 2f93  8b 45 c4                          mov     eax,-3cH[ebp]
 2f96  50                                push    eax
 2f97  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

		wsprintf (gszErrMsg, "Error reading file header");
 2f9e  b8 bf 01 00 00                    mov     eax,offset L338
 2fa3  50                                push    eax
 2fa4  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 2fa9  50                                push    eax
 2faa  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 2fb1  83 c4 08                          add     esp,00000008H

		return FALSE;
	}

	// read BITMAPINFO and bitmap data
 2fb4  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 2fbb  e9 9c 05 00 00                    jmp     L245

	if (!ReadFile (hTexFile, ptmap, bufsize, &bytesread, NULL) || 
		(bytesread != bufsize))
	{
 2fc0  6a 00             L219            push    00000000H
 2fc2  8d 45 e4                          lea     eax,-1cH[ebp]
 2fc5  50                                push    eax
 2fc6  8b 45 d0                          mov     eax,-30H[ebp]
 2fc9  50                                push    eax
 2fca  8b 45 d4                          mov     eax,-2cH[ebp]
 2fcd  50                                push    eax
 2fce  8b 45 c4                          mov     eax,-3cH[ebp]
 2fd1  50                                push    eax
 2fd2  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__ReadFile@20
 2fd9  85 c0                             test    eax,eax
 2fdb  74 08                             je      L220
 2fdd  8b 45 e4                          mov     eax,-1cH[ebp]
 2fe0  3b 45 d0                          cmp     eax,-30H[ebp]
 2fe3  74 42                             je      L221

		HeapFree (GetProcessHeap (), 0, ptmap);
 2fe5  8b 45 d4          L220            mov     eax,-2cH[ebp]
 2fe8  50                                push    eax
 2fe9  6a 00                             push    00000000H
 2feb  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 2ff2  50                                push    eax
 2ff3  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapFree@12

		CloseHandle (hTexFile);
 2ffa  8b 45 c4                          mov     eax,-3cH[ebp]
 2ffd  50                                push    eax
 2ffe  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

		wsprintf (gszErrMsg, "Error reading bitmap header and data");
 3005  b8 d9 01 00 00                    mov     eax,offset L339
 300a  50                                push    eax
 300b  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3010  50                                push    eax
 3011  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3018  83 c4 08                          add     esp,00000008H

		return FALSE;
	}

	// close the texture file; we're done with it
 301b  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 3022  e9 35 05 00 00                    jmp     L245

	CloseHandle (hTexFile);

	// read BITMAPINFOHEADER
 3027  8b 45 c4          L221            mov     eax,-3cH[ebp]
 302a  50                                push    eax
 302b  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

	memcpy (&bmih, ptmap, sizeof (BITMAPINFOHEADER));

	// ensure width is power of 2 <= 1024
 3032  bb 28 00 00 00                    mov     ebx,00000028H
 3037  8b 55 d4                          mov     edx,-2cH[ebp]
 303a  8d 85 74 ff ff ff                 lea     eax,-8cH[ebp]
 3040  e8 00 00 00 00                    call    memcpy_

	while (log2X <= 11)
	{
 3045  83 7d c8 0b       L222            cmp     dword ptr -38H[ebp],0000000bH
 3049  77 4a                             ja      L223

		if ((pow (2.0, (double)log2X)) == (double)bmih.biWidth) break;
 304b  db 85 78 ff ff ff                 fild    dword ptr -88H[ebp]
 3051  dd 9d 28 ff ff ff                 fstp    qword ptr -0d8H[ebp]
 3057  8b 45 c8                          mov     eax,-38H[ebp]
 305a  89 85 20 ff ff ff                 mov     -0e0H[ebp],eax
 3060  c7 85 24 ff ff ff 
       00 00 00 00                       mov     dword ptr -0dcH[ebp],00000000H
 306a  df ad 20 ff ff ff                 fild    qword ptr -0e0H[ebp]
 3070  83 ec 08                          sub     esp,00000008H
 3073  dd 1c 24                          fstp    qword ptr [esp]
 3076  68 00 00 00 40                    push    40000000H
 307b  6a 00                             push    00000000H
 307d  e8 00 00 00 00                    call    pow_
 3082  dc 9d 28 ff ff ff                 fcomp   qword ptr -0d8H[ebp]
 3088  df e0                             fstsw   ax
 308a  9e                                sahf    
 308b  74 08                             je      L223

		log2X++;
 308d  8b 45 c8                          mov     eax,-38H[ebp]
 3090  ff 45 c8                          inc     dword ptr -38H[ebp]

	}
 3093  eb b0                             jmp     L222

	if (log2X == 11)
	{
 3095  83 7d c8 0b       L223            cmp     dword ptr -38H[ebp],0000000bH
 3099  75 3b                             jne     L224

		wsprintf (gszErrMsg, "Width of texture %s greater than 1024 or not a power of 2", 
			lpszTexFilename);
 309b  8b 45 ac                          mov     eax,-54H[ebp]
 309e  50                                push    eax
 309f  b8 fe 01 00 00                    mov     eax,offset L340
 30a4  50                                push    eax
 30a5  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 30aa  50                                push    eax
 30ab  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 30b2  83 c4 0c                          add     esp,0000000cH

		HeapFree (GetProcessHeap (), 0, ptmap);
 30b5  8b 45 d4                          mov     eax,-2cH[ebp]
 30b8  50                                push    eax
 30b9  6a 00                             push    00000000H
 30bb  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 30c2  50                                push    eax
 30c3  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapFree@12

		return FALSE;
	}

	// ensure height is power of 2 <= 1024
 30ca  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 30d1  e9 86 04 00 00                    jmp     L245

	while (log2Y <= 11)
	{
 30d6  83 7d cc 0b       L224            cmp     dword ptr -34H[ebp],0000000bH
 30da  77 4a                             ja      L225

		if ((pow (2.0, (double)log2Y)) == (double)bmih.biHeight) break;
 30dc  db 85 7c ff ff ff                 fild    dword ptr -84H[ebp]
 30e2  dd 9d 20 ff ff ff                 fstp    qword ptr -0e0H[ebp]
 30e8  8b 45 cc                          mov     eax,-34H[ebp]
 30eb  89 85 28 ff ff ff                 mov     -0d8H[ebp],eax
 30f1  c7 85 2c ff ff ff 
       00 00 00 00                       mov     dword ptr -0d4H[ebp],00000000H
 30fb  df ad 28 ff ff ff                 fild    qword ptr -0d8H[ebp]
 3101  83 ec 08                          sub     esp,00000008H
 3104  dd 1c 24                          fstp    qword ptr [esp]
 3107  68 00 00 00 40                    push    40000000H
 310c  6a 00                             push    00000000H
 310e  e8 00 00 00 00                    call    pow_
 3113  dc 9d 20 ff ff ff                 fcomp   qword ptr -0e0H[ebp]
 3119  df e0                             fstsw   ax
 311b  9e                                sahf    
 311c  74 08                             je      L225

		log2Y++;
 311e  8b 45 cc                          mov     eax,-34H[ebp]
 3121  ff 45 cc                          inc     dword ptr -34H[ebp]

	}
 3124  eb b0                             jmp     L224

	if (log2Y == 11)
	{
 3126  83 7d cc 0b       L225            cmp     dword ptr -34H[ebp],0000000bH
 312a  75 3b                             jne     L226

		wsprintf (gszErrMsg, "Height of texture %s greater than 1024 or not a power of 2", 
			lpszTexFilename);
 312c  8b 45 ac                          mov     eax,-54H[ebp]
 312f  50                                push    eax
 3130  b8 38 02 00 00                    mov     eax,offset L341
 3135  50                                push    eax
 3136  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 313b  50                                push    eax
 313c  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3143  83 c4 0c                          add     esp,0000000cH

		HeapFree (GetProcessHeap (), 0, ptmap);
 3146  8b 45 d4                          mov     eax,-2cH[ebp]
 3149  50                                push    eax
 314a  6a 00                             push    00000000H
 314c  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 3153  50                                push    eax
 3154  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapFree@12

		return FALSE;
	}

	// create an offscreen surface to cache the texture map
 315b  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 3162  e9 f5 03 00 00                    jmp     L245

	ZeroMemory (&(pTex->ddsd), sizeof (pTex->ddsd));
 3167  bb 6c 00 00 00    L226            mov     ebx,0000006cH
 316c  31 d2                             xor     edx,edx
 316e  8b 45 b0                          mov     eax,-50H[ebp]
 3171  83 c0 04                          add     eax,00000004H
 3174  e8 00 00 00 00                    call    memset_

	pTex->ddsd.dwSize = sizeof (pTex->ddsd);
 3179  8b 45 b0                          mov     eax,-50H[ebp]
 317c  c7 40 04 6c 00 00 
       00                                mov     dword ptr +4H[eax],0000006cH

	pTex->ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH;
 3183  8b 45 b0                          mov     eax,-50H[ebp]
 3186  c7 40 08 06 00 00 
       00                                mov     dword ptr +8H[eax],00000006H

	pTex->ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_VIDEOMEMORY;
 318d  8b 45 b0                          mov     eax,-50H[ebp]
 3190  c7 40 6c 40 40 00 
       00                                mov     dword ptr +6cH[eax],00004040H

	pTex->ddsd.dwWidth = bmih.biWidth;
 3197  8b 85 78 ff ff ff                 mov     eax,-88H[ebp]
 319d  8b 55 b0                          mov     edx,-50H[ebp]
 31a0  89 42 10                          mov     +10H[edx],eax

	pTex->ddsd.dwHeight = bmih.biHeight;
 31a3  8b 85 7c ff ff ff                 mov     eax,-84H[ebp]
 31a9  8b 55 b0                          mov     edx,-50H[ebp]
 31ac  89 42 0c                          mov     +0cH[edx],eax

	ddretval = lpDD->lpVtbl->CreateSurface (lpDD,&(pTex->ddsd), &pTex->lpDDSTex, NULL);
 31af  a1 00 00 00 00                    mov     eax,_lpDD
 31b4  8b 00                             mov     eax,[eax]
 31b6  6a 00                             push    00000000H
 31b8  8b 55 b0                          mov     edx,-50H[ebp]
 31bb  52                                push    edx
 31bc  8b 55 b0                          mov     edx,-50H[ebp]
 31bf  83 c2 04                          add     edx,00000004H
 31c2  52                                push    edx
 31c3  ff 35 00 00 00 00                 push    _lpDD
 31c9  ff 50 18                          call    dword ptr +18H[eax]
 31cc  89 45 b4                          mov     -4cH[ebp],eax

	if (ddretval != DD_OK)
	{
 31cf  83 7d b4 00                       cmp     dword ptr -4cH[ebp],00000000H
 31d3  74 3b                             je      L227

		wsprintf (gszErrMsg, "Could not create texture surface for file %s", lpszTexFilename);
 31d5  8b 45 ac                          mov     eax,-54H[ebp]
 31d8  50                                push    eax
 31d9  b8 73 02 00 00                    mov     eax,offset L342
 31de  50                                push    eax
 31df  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 31e4  50                                push    eax
 31e5  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 31ec  83 c4 0c                          add     esp,0000000cH

		HeapFree (GetProcessHeap (), 0, ptmap);
 31ef  8b 45 d4                          mov     eax,-2cH[ebp]
 31f2  50                                push    eax
 31f3  6a 00                             push    00000000H
 31f5  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 31fc  50                                push    eax
 31fd  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapFree@12

		return FALSE;
	}

	// get a pointer to the texture surface
 3204  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 320b  e9 4c 03 00 00                    jmp     L245

	ZeroMemory (&(pTex->ddsd), sizeof (pTex->ddsd));
 3210  bb 6c 00 00 00    L227            mov     ebx,0000006cH
 3215  31 d2                             xor     edx,edx
 3217  8b 45 b0                          mov     eax,-50H[ebp]
 321a  83 c0 04                          add     eax,00000004H
 321d  e8 00 00 00 00                    call    memset_

	pTex->ddsd.dwSize = sizeof (pTex->ddsd);
	// lock texture to fill ddsd member
 3222  8b 45 b0                          mov     eax,-50H[ebp]
 3225  c7 40 04 6c 00 00 
       00                                mov     dword ptr +4H[eax],0000006cH

	ddretval = pTex->lpDDSTex->lpVtbl->Lock (pTex->lpDDSTex,
		NULL,
		&(pTex->ddsd),
		DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,
		NULL);
 322c  8b 45 b0                          mov     eax,-50H[ebp]
 322f  8b 10                             mov     edx,[eax]
 3231  8b 12                             mov     edx,[edx]
 3233  6a 00                             push    00000000H
 3235  6a 01                             push    00000001H
 3237  8b 45 b0                          mov     eax,-50H[ebp]
 323a  83 c0 04                          add     eax,00000004H
 323d  50                                push    eax
 323e  6a 00                             push    00000000H
 3240  8b 45 b0                          mov     eax,-50H[ebp]
 3243  ff 30                             push    [eax]
 3245  ff 52 64                          call    dword ptr +64H[edx]
 3248  89 45 b4                          mov     -4cH[ebp],eax

	if (ddretval == DDERR_SURFACELOST) pTex->lpDDSTex->lpVtbl->Restore (pTex->lpDDSTex);
	// unlock surface
 324b  81 7d b4 c2 01 76 
       88                                cmp     dword ptr -4cH[ebp],887601c2H
 3252  75 0f                             jne     L228
 3254  8b 45 b0                          mov     eax,-50H[ebp]
 3257  8b 00                             mov     eax,[eax]
 3259  8b 10                             mov     edx,[eax]
 325b  8b 45 b0                          mov     eax,-50H[ebp]
 325e  ff 30                             push    [eax]
 3260  ff 52 6c                          call    dword ptr +6cH[edx]

	ddretval = pTex->lpDDSTex->lpVtbl->Unlock (pTex->lpDDSTex,NULL);
 3263  8b 45 b0          L228            mov     eax,-50H[ebp]
 3266  8b 00                             mov     eax,[eax]
 3268  8b 10                             mov     edx,[eax]
 326a  6a 00                             push    00000000H
 326c  8b 45 b0                          mov     eax,-50H[ebp]
 326f  ff 30                             push    [eax]
 3271  ff 92 80 00 00 00                 call    dword ptr +80H[edx]
 3277  89 45 b4                          mov     -4cH[ebp],eax

	if (ddretval != DD_OK)
	{
 327a  83 7d b4 00                       cmp     dword ptr -4cH[ebp],00000000H
 327e  74 53                             je      L229

		wsprintf (gszErrMsg, "Error unlocking texture surface for file %s", lpszTexFilename);
 3280  8b 45 ac                          mov     eax,-54H[ebp]
 3283  50                                push    eax
 3284  b8 a0 02 00 00                    mov     eax,offset L343
 3289  50                                push    eax
 328a  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 328f  50                                push    eax
 3290  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3297  83 c4 0c                          add     esp,0000000cH

		HeapFree (GetProcessHeap (), 0, ptmap);
 329a  8b 45 d4                          mov     eax,-2cH[ebp]
 329d  50                                push    eax
 329e  6a 00                             push    00000000H
 32a0  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 32a7  50                                push    eax
 32a8  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapFree@12

		pTex->lpDDSTex->lpVtbl->Release (pTex->lpDDSTex);
 32af  8b 45 b0                          mov     eax,-50H[ebp]
 32b2  8b 00                             mov     eax,[eax]
 32b4  8b 10                             mov     edx,[eax]
 32b6  8b 45 b0                          mov     eax,-50H[ebp]
 32b9  ff 30                             push    [eax]
 32bb  ff 52 08                          call    dword ptr +8H[edx]

		pTex->lpDDSTex = NULL;
 32be  8b 45 b0                          mov     eax,-50H[ebp]
 32c1  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H

		return FALSE;
	}

	// pitch of each scan line
 32c7  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 32ce  e9 89 02 00 00                    jmp     L245

	if(bmih.biSizeImage)
	{
 32d3  83 7d 88 00       L229            cmp     dword ptr -78H[ebp],00000000H
 32d7  74 1e                             je      L230

		pitch = bmih.biSizeImage / bmih.biHeight;
		// set pointer to start of bm data
 32d9  31 d2                             xor     edx,edx
 32db  8b 45 88                          mov     eax,-78H[ebp]
 32de  f7 b5 7c ff ff ff                 div     dword ptr -84H[ebp]
 32e4  89 45 dc                          mov     -24H[ebp],eax

		bmdata = (char*)ptmap + (bufsize - bmih.biSizeImage);
	}
 32e7  8b 45 d0                          mov     eax,-30H[ebp]
 32ea  2b 45 88                          sub     eax,-78H[ebp]
 32ed  8b 55 d4                          mov     edx,-2cH[ebp]
 32f0  01 c2                             add     edx,eax
 32f2  89 55 d8                          mov     -28H[ebp],edx

	else
	{
 32f5  eb 25                             jmp     L231

		pitch = bmih.biWidth * 3;		// JJS for BMPs without biSizeImage
 		// set pointer to start of bm data
 32f7  8b 85 78 ff ff ff L230            mov     eax,-88H[ebp]
 32fd  8d 04 40                          lea     eax,[eax+eax*2]
 3300  89 45 dc                          mov     -24H[ebp],eax

		bmdata = (char*)ptmap + (bufsize - pitch * bmih.biHeight);
	}

	// line counter
 3303  8b 45 dc                          mov     eax,-24H[ebp]
 3306  0f af 85 7c ff ff 
       ff                                imul    eax,-84H[ebp]
 330d  8b 55 d0                          mov     edx,-30H[ebp]
 3310  29 c2                             sub     edx,eax
 3312  89 d0                             mov     eax,edx
 3314  8b 55 d4                          mov     edx,-2cH[ebp]
 3317  01 c2                             add     edx,eax
 3319  89 55 d8                          mov     -28H[ebp],edx

	for (y=((int)bmih.biHeight-1); y>=0; y--)
	{
		// scan line pixel counter
 331c  8b 85 7c ff ff ff L231            mov     eax,-84H[ebp]
 3322  48                                dec     eax
 3323  89 45 ec                          mov     -14H[ebp],eax
 3326  83 7d ec 00       L232            cmp     dword ptr -14H[ebp],00000000H
 332a  7d 0d                             jge     L234
 332c  e9 f6 00 00 00                    jmp     L239
 3331  8b 45 ec          L233            mov     eax,-14H[ebp]
 3334  ff 4d ec                          dec     dword ptr -14H[ebp]
 3337  eb ed                             jmp     L232

		for (x=0; x<(int)bmih.biWidth; x++)
		{
			// read RGB
 3339  c7 45 e8 00 00 00 
       00                L234            mov     dword ptr -18H[ebp],00000000H
 3340  8b 45 e8          L235            mov     eax,-18H[ebp]
 3343  3b 85 78 ff ff ff                 cmp     eax,-88H[ebp]
 3349  7c 0d                             jl      L237
 334b  e9 d2 00 00 00                    jmp     L238
 3350  8b 45 e8          L236            mov     eax,-18H[ebp]
 3353  ff 45 e8                          inc     dword ptr -18H[ebp]
 3356  eb e8                             jmp     L235

			memcpy (&b, (char*)bmdata + (y*pitch)+(3*x), sizeof (C3D_UINT8));
 3358  bb 01 00 00 00    L237            mov     ebx,00000001H
 335d  8b 55 ec                          mov     edx,-14H[ebp]
 3360  0f af 55 dc                       imul    edx,-24H[ebp]
 3364  03 55 d8                          add     edx,-28H[ebp]
 3367  8b 45 e8                          mov     eax,-18H[ebp]
 336a  8d 04 40                          lea     eax,[eax+eax*2]
 336d  01 c2                             add     edx,eax
 336f  8d 45 f4                          lea     eax,-0cH[ebp]
 3372  e8 00 00 00 00                    call    memcpy_

			memcpy (&g, (char*)bmdata + (y*pitch)+(3*x)+1, sizeof (C3D_UINT8));
 3377  bb 01 00 00 00                    mov     ebx,00000001H
 337c  8b 45 ec                          mov     eax,-14H[ebp]
 337f  0f af 45 dc                       imul    eax,-24H[ebp]
 3383  03 45 d8                          add     eax,-28H[ebp]
 3386  8b 55 e8                          mov     edx,-18H[ebp]
 3389  8d 14 52                          lea     edx,[edx+edx*2]
 338c  01 c2                             add     edx,eax
 338e  42                                inc     edx
 338f  8d 45 f8                          lea     eax,-8H[ebp]
 3392  e8 00 00 00 00                    call    memcpy_

			memcpy (&r, (char*)bmdata + (y*pitch)+(3*x)+2, sizeof (C3D_UINT8));

			// pack color data in 16bpp format

//#define RGB_555
#ifndef RGB_555
			// pack data in RGB 555 format
 3397  bb 01 00 00 00                    mov     ebx,00000001H
 339c  8b 45 ec                          mov     eax,-14H[ebp]
 339f  0f af 45 dc                       imul    eax,-24H[ebp]
 33a3  8b 55 d8                          mov     edx,-28H[ebp]
 33a6  01 c2                             add     edx,eax
 33a8  8b 45 e8                          mov     eax,-18H[ebp]
 33ab  8d 04 40                          lea     eax,[eax+eax*2]
 33ae  01 d0                             add     eax,edx
 33b0  8d 50 02                          lea     edx,+2H[eax]
 33b3  8d 45 fc                          lea     eax,-4H[ebp]
 33b6  e8 00 00 00 00                    call    memcpy_

			rgb565 = ((C3D_UINT32)r & 0xf8) << 8 |
					 ((C3D_UINT32)g & 0xfc) << 3 |
					 ((C3D_UINT32)b & 0xf8) >> 3;
#else
			// pack data in RGB 565 format
			rgb565 = ((C3D_UINT32)r & 0xf8) << 7 |
					 ((C3D_UINT32)g & 0xf8) << 2 |
					 ((C3D_UINT32)b & 0xf8) >> 3;
#endif
			// write texture data to texture cache
 33bb  31 c0                             xor     eax,eax
 33bd  8a 45 fc                          mov     al,-4H[ebp]
 33c0  25 f8 00 00 00                    and     eax,000000f8H
 33c5  c1 e0 08                          shl     eax,08H
 33c8  89 c2                             mov     edx,eax
 33ca  31 c0                             xor     eax,eax
 33cc  8a 45 f8                          mov     al,-8H[ebp]
 33cf  25 fc 00 00 00                    and     eax,000000fcH
 33d4  c1 e0 03                          shl     eax,03H
 33d7  09 d0                             or      eax,edx
 33d9  31 d2                             xor     edx,edx
 33db  8a 55 f4                          mov     dl,-0cH[ebp]
 33de  81 e2 f8 00 00 00                 and     edx,000000f8H
 33e4  c1 ea 03                          shr     edx,03H
 33e7  09 d0                             or      eax,edx
 33e9  89 45 f0                          mov     -10H[ebp],eax

			memcpy ((char*)pTex->ddsd.lpSurface + ((bmih.biHeight-y-1)*(bmih.biWidth*2))+(2*x), &rgb565, sizeof (C3D_UINT16));
 33ec  bb 02 00 00 00                    mov     ebx,00000002H
 33f1  8d 55 f0                          lea     edx,-10H[ebp]
 33f4  8b 85 7c ff ff ff                 mov     eax,-84H[ebp]
 33fa  2b 45 ec                          sub     eax,-14H[ebp]
 33fd  8b 8d 78 ff ff ff                 mov     ecx,-88H[ebp]
 3403  01 c9                             add     ecx,ecx
 3405  48                                dec     eax
 3406  0f af c8                          imul    ecx,eax
 3409  8b 45 b0                          mov     eax,-50H[ebp]
 340c  8b 40 28                          mov     eax,+28H[eax]
 340f  01 c1                             add     ecx,eax
 3411  8b 45 e8                          mov     eax,-18H[ebp]
 3414  01 c0                             add     eax,eax
 3416  01 c8                             add     eax,ecx
 3418  e8 00 00 00 00                    call    memcpy_

		}
 341d  e9 2e ff ff ff                    jmp     L236

	}

	// free the texture file buffer
 3422  e9 0a ff ff ff    L238            jmp     L233

		HeapFree (GetProcessHeap (), 0, ptmap);

	// fill a C3D_TMAP struct
 3427  8b 45 d4          L239            mov     eax,-2cH[ebp]
 342a  50                                push    eax
 342b  6a 00                             push    00000000H
 342d  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetProcessHeap@0
 3434  50                                push    eax
 3435  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__HeapFree@12

	ZeroMemory (&TMap, sizeof (TMap));
 343c  bb 44 00 00 00                    mov     ebx,00000044H
 3441  31 d2                             xor     edx,edx
 3443  8d 85 30 ff ff ff                 lea     eax,-0d0H[ebp]
 3449  e8 00 00 00 00                    call    memset_

	TMap.u32Size = sizeof (TMap);

	// determine the maximum log2 dimension
 344e  c7 85 30 ff ff ff 
       44 00 00 00                       mov     dword ptr -0d0H[ebp],00000044H

	maxlog2 = (int)(log2X >= log2Y? log2X : log2Y);
 3458  8b 55 cc                          mov     edx,-34H[ebp]
 345b  8b 45 c8                          mov     eax,-38H[ebp]
 345e  29 d0                             sub     eax,edx
 3460  f5                                cmc     
 3461  19 c9                             sbb     ecx,ecx
 3463  21 c8                             and     eax,ecx
 3465  01 d0                             add     eax,edx
 3467  89 45 bc                          mov     -44H[ebp],eax

	for (k=0; k < maxlog2; k++)
 346a  c7 45 b8 00 00 00 
       00                                mov     dword ptr -48H[ebp],00000000H
 3471  8b 45 b8          L240            mov     eax,-48H[ebp]
 3474  3b 45 bc                          cmp     eax,-44H[ebp]
 3477  7c 0a                             jl      L242
 3479  eb 1d                             jmp     L243
 347b  8b 45 b8          L241            mov     eax,-48H[ebp]
 347e  ff 45 b8                          inc     dword ptr -48H[ebp]
 3481  eb ee                             jmp     L240

		TMap.apvLevels[k] = pTex->ddsd.lpSurface;

 3483  8b 55 b8          L242            mov     edx,-48H[ebp]
 3486  c1 e2 02                          shl     edx,02H
 3489  8b 45 b0                          mov     eax,-50H[ebp]
 348c  8b 40 28                          mov     eax,+28H[eax]
 348f  89 84 2a 38 ff ff 
       ff                                mov     -0c8H[edx+ebp],eax
 3496  eb e3                             jmp     L241

	TMap.bMipMap = FALSE;
 3498  c7 85 34 ff ff ff 
       00 00 00 00       L243            mov     dword ptr -0ccH[ebp],00000000H

	TMap.u32MaxMapXSizeLg2 = log2X;
 34a2  8b 45 c8                          mov     eax,-38H[ebp]
 34a5  89 85 64 ff ff ff                 mov     -9cH[ebp],eax

	TMap.u32MaxMapYSizeLg2 = log2Y;
 34ab  8b 45 cc                          mov     eax,-34H[ebp]
 34ae  89 85 68 ff ff ff                 mov     -98H[ebp],eax

	TMap.eTexFormat = C3D_ETF_RGB565;
//JJS	TMap.bTexTranspEnable = FALSE;
 34b4  c7 85 6c ff ff ff 
       04 00 00 00                       mov     dword ptr -94H[ebp],00000004H

	SET_CIF_COLOR (TMap.clrTexChromaKey, 0, 0, 0, 0);

	// register the texture
 34be  81 a5 70 ff ff ff 
       00 ff ff ff                       and     dword ptr -90H[ebp],0ffffff00H
 34c8  8b 85 70 ff ff ff                 mov     eax,-90H[ebp]
 34ce  c1 e0 10                          shl     eax,10H
 34d1  81 a5 70 ff ff ff 
       ff 00 ff ff                       and     dword ptr -90H[ebp],0ffff00ffH
 34db  8b 85 70 ff ff ff                 mov     eax,-90H[ebp]
 34e1  c1 e0 08                          shl     eax,08H
 34e4  81 a5 70 ff ff ff 
       ff ff 00 ff                       and     dword ptr -90H[ebp],0ff00ffffH
 34ee  8b 85 70 ff ff ff                 mov     eax,-90H[ebp]
 34f4  81 a5 70 ff ff ff 
       ff ff ff 00                       and     dword ptr -90H[ebp],00ffffffH

	ecRetVal = ATI3DCIF_TextureReg (&TMap, &(pTex->hTX));
 34fe  8b 45 b0                          mov     eax,-50H[ebp]
 3501  83 c0 70                          add     eax,00000070H
 3504  50                                push    eax
 3505  8d 85 30 ff ff ff                 lea     eax,-0d0H[ebp]
 350b  50                                push    eax
 350c  e8 00 00 00 00                    call    _ATI3DCIF_TextureReg@8
 3511  89 45 c0                          mov     -40H[ebp],eax

	if (ecRetVal != C3D_EC_OK)
	{
 3514  83 7d c0 00                       cmp     dword ptr -40H[ebp],00000000H
 3518  74 3b                             je      L244

		wsprintf (gszErrMsg, "Error registering texture for file %s", lpszTexFilename);
 351a  8b 45 ac                          mov     eax,-54H[ebp]
 351d  50                                push    eax
 351e  b8 cc 02 00 00                    mov     eax,offset L344
 3523  50                                push    eax
 3524  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3529  50                                push    eax
 352a  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3531  83 c4 0c                          add     esp,0000000cH

		pTex->lpDDSTex->lpVtbl->Release (pTex->lpDDSTex);
 3534  8b 45 b0                          mov     eax,-50H[ebp]
 3537  8b 10                             mov     edx,[eax]
 3539  8b 12                             mov     edx,[edx]
 353b  8b 45 b0                          mov     eax,-50H[ebp]
 353e  ff 30                             push    [eax]
 3540  ff 52 08                          call    dword ptr +8H[edx]

		pTex->lpDDSTex = NULL;
 3543  8b 45 b0                          mov     eax,-50H[ebp]
 3546  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H

		return FALSE;
	}

 354c  c7 45 e0 00 00 00 
       00                                mov     dword ptr -20H[ebp],00000000H
 3553  eb 07                             jmp     L245

	return TRUE;
 3555  c7 45 e0 01 00 00 
       00                L244            mov     dword ptr -20H[ebp],00000001H

}


/*
 *  UnloadTexture - unregister texture and release its surface
 */
 355c  8b 45 e0          L245            mov     eax,-20H[ebp]
 355f  89 ec                             mov     esp,ebp
 3561  5d                                pop     ebp
 3562  5f                                pop     edi
 3563  5e                                pop     esi
 3564  59                                pop     ecx
 3565  5b                                pop     ebx
 3566  c3                                ret     

BOOL UnloadTexture (PTEXTURE pTex)
{
 3567  53                UnloadTexture_  push    ebx
 3568  51                                push    ecx
 3569  52                                push    edx
 356a  56                                push    esi
 356b  57                                push    edi
 356c  55                                push    ebp
 356d  89 e5                             mov     ebp,esp
 356f  81 ec 08 00 00 00                 sub     esp,00000008H
 3575  89 45 f8                          mov     -8H[ebp],eax

	if (!pTex)
	{
 3578  83 7d f8 00                       cmp     dword ptr -8H[ebp],00000000H
 357c  75 1f                             jne     L246

		wsprintf (gszErrMsg, "UnloadTexture: invalid pointer");
 357e  b8 f2 02 00 00                    mov     eax,offset L345
 3583  50                                push    eax
 3584  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3589  50                                push    eax
 358a  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3591  83 c4 08                          add     esp,00000008H

		return FALSE;
	}

	// unregister the texture if a non-NULL handle
 3594  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 359b  eb 3b                             jmp     L249

	if (pTex->hTX)
	{
 359d  8b 45 f8          L246            mov     eax,-8H[ebp]
 35a0  83 78 70 00                       cmp     dword ptr +70H[eax],00000000H
 35a4  74 0b                             je      L247

 		ATI3DCIF_TextureUnreg (pTex->hTX);
	}

	// unlock and release the texture surface
 35a6  8b 45 f8                          mov     eax,-8H[ebp]
 35a9  ff 70 70                          push    +70H[eax]
 35ac  e8 00 00 00 00                    call    _ATI3DCIF_TextureUnreg@4

	if (pTex->lpDDSTex)
	{
 35b1  8b 45 f8          L247            mov     eax,-8H[ebp]
 35b4  83 38 00                          cmp     dword ptr [eax],00000000H
 35b7  74 18                             je      L248

		pTex->lpDDSTex->lpVtbl->Release (pTex->lpDDSTex);
 35b9  8b 45 f8                          mov     eax,-8H[ebp]
 35bc  8b 00                             mov     eax,[eax]
 35be  8b 10                             mov     edx,[eax]
 35c0  8b 45 f8                          mov     eax,-8H[ebp]
 35c3  ff 30                             push    [eax]
 35c5  ff 52 08                          call    dword ptr +8H[edx]

		pTex->lpDDSTex = NULL;
	}

 35c8  8b 45 f8                          mov     eax,-8H[ebp]
 35cb  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H

	return TRUE;;
 35d1  c7 45 fc 01 00 00 
       00                L248            mov     dword ptr -4H[ebp],00000001H

}

/*
 *  LoadTexture - load a texture map from a file into a texture surface
 */

 35d8  8b 45 fc          L249            mov     eax,-4H[ebp]
 35db  89 ec                             mov     esp,ebp
 35dd  5d                                pop     ebp
 35de  5f                                pop     edi
 35df  5e                                pop     esi
 35e0  5a                                pop     edx
 35e1  59                                pop     ecx
 35e2  5b                                pop     ebx
 35e3  c3                                ret     

BOOL SJRLoadTextureBMP (const char* lpszTexFilename)
{
	int fp;
    HRESULT             ddretval;
	C3D_TMAP			TMap;
	int					k, maxlog2;
	C3D_EC				ecRetVal;
	HANDLE				hTexFile;
	C3D_UINT32			bufsize;
	int	whichSurface,i;
	long 				texsize;
	char *			*ptr, *bmpdata, *p1;
	unsigned short *p2,*t2, t;

	
 35e4                    SJRLoadTextureBMP_:
 35e4  53                                push    ebx
 35e5  51                                push    ecx
 35e6  52                                push    edx
 35e7  56                                push    esi
 35e8  57                                push    edi
 35e9  55                                push    ebp
 35ea  89 e5                             mov     ebp,esp
 35ec  81 ec 8c 00 00 00                 sub     esp,0000008cH
 35f2  89 45 b8                          mov     -48H[ebp],eax

	texsize = 32768;//128*128 * sizeof (C3D_UINT16)

 35f5  c7 45 e0 00 80 00 
       00                                mov     dword ptr -20H[ebp],00008000H

	fp = open(lpszTexFilename, O_RDONLY | O_BINARY);
 35fc  68 00 02 00 00                    push    00000200H
 3601  8b 45 b8                          mov     eax,-48H[ebp]
 3604  50                                push    eax
 3605  e8 00 00 00 00                    call    open_
 360a  83 c4 08                          add     esp,00000008H
 360d  89 45 c0                          mov     -40H[ebp],eax

	if (fp<0)
	{
 3610  83 7d c0 00                       cmp     dword ptr -40H[ebp],00000000H
 3614  7d 22                             jge     L250

		wsprintf (gszErrMsg, "Could not open texture map file");
 3616  b8 11 03 00 00                    mov     eax,offset L346
 361b  50                                push    eax
 361c  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3621  50                                push    eax
 3622  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3629  83 c4 08                          add     esp,00000008H

		return FALSE;
	}

 362c  c7 45 f8 00 00 00 
       00                                mov     dword ptr -8H[ebp],00000000H
 3633  e9 e4 02 00 00                    jmp     L267

	bufsize = 720896; //22 * texsize

 3638  c7 45 d4 00 00 0b 
       00                L250            mov     dword ptr -2cH[ebp],000b0000H

	bmpdata = (char *)malloc(bufsize);
 363f  8b 45 d4                          mov     eax,-2cH[ebp]
 3642  e8 00 00 00 00                    call    malloc_
 3647  89 45 e8                          mov     -18H[ebp],eax

	if( bmpdata == NULL ) {
 364a  83 7d e8 00                       cmp     dword ptr -18H[ebp],00000000H
 364e  75 0c                             jne     L251

		return FALSE;
    }
 3650  c7 45 f8 00 00 00 
       00                                mov     dword ptr -8H[ebp],00000000H
 3657  e9 c0 02 00 00                    jmp     L267

	read(fp, (void *)bmpdata, bufsize);
 365c  8b 5d d4          L251            mov     ebx,-2cH[ebp]
 365f  8b 55 e8                          mov     edx,-18H[ebp]
 3662  8b 45 c0                          mov     eax,-40H[ebp]
 3665  e8 00 00 00 00                    call    read_

	close(fp);

 366a  8b 45 c0                          mov     eax,-40H[ebp]
 366d  e8 00 00 00 00                    call    close_

	ptr = bmpdata;

 3672  8b 45 e8                          mov     eax,-18H[ebp]
 3675  89 45 e4                          mov     -1cH[ebp],eax

	for (whichSurface=0; whichSurface< 22; whichSurface++)
	{
		// get a pointer to the texture surface
 3678  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H
 367f  83 7d d8 16       L252            cmp     dword ptr -28H[ebp],00000016H
 3683  7c 0d                             jl      L254
 3685  e9 83 02 00 00                    jmp     L266
 368a  8b 45 d8          L253            mov     eax,-28H[ebp]
 368d  ff 45 d8                          inc     dword ptr -28H[ebp]
 3690  eb ed                             jmp     L252

		ZeroMemory (&(gTex[whichSurface].ddsd), sizeof (gTex[whichSurface].ddsd));
 3692  bb 6c 00 00 00    L254            mov     ebx,0000006cH
 3697  31 d2                             xor     edx,edx
 3699  6b 4d d8 74                       imul    ecx,-28H[ebp],74H
 369d  b8 00 00 00 00                    mov     eax,offset _gTex
 36a2  01 c8                             add     eax,ecx
 36a4  83 c0 04                          add     eax,00000004H
 36a7  e8 00 00 00 00                    call    memset_

		gTex[whichSurface].ddsd.dwSize = sizeof (gTex[whichSurface].ddsd);

		// lock texture to fill ddsd member
 36ac  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 36b0  c7 80 04 00 00 00 
       6c 00 00 00                       mov     dword ptr _gTex+4H[eax],0000006cH

		ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Lock (gTex[whichSurface].lpDDSTex,
			NULL,
			&(gTex[whichSurface].ddsd),
			DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,
			NULL);
 36ba  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 36be  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 36c4  8b 10                             mov     edx,[eax]
 36c6  6a 00                             push    00000000H
 36c8  6a 01                             push    00000001H
 36ca  6b 5d d8 74                       imul    ebx,-28H[ebp],74H
 36ce  b8 00 00 00 00                    mov     eax,offset _gTex
 36d3  01 d8                             add     eax,ebx
 36d5  83 c0 04                          add     eax,00000004H
 36d8  50                                push    eax
 36d9  6a 00                             push    00000000H
 36db  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 36df  ff b0 00 00 00 00                 push    _gTex[eax]
 36e5  ff 52 64                          call    dword ptr +64H[edx]
 36e8  89 45 bc                          mov     -44H[ebp],eax

		if (ddretval == DDERR_SURFACELOST)
 36eb  81 7d bc c2 01 76 
       88                                cmp     dword ptr -44H[ebp],887601c2H
 36f2  75 19                             jne     L255

			gTex[whichSurface].lpDDSTex->lpVtbl->Restore (gTex[whichSurface].lpDDSTex);
 36f4  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 36f8  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 36fe  8b 10                             mov     edx,[eax]
 3700  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 3704  ff b0 00 00 00 00                 push    _gTex[eax]
 370a  ff 52 6c                          call    dword ptr +6cH[edx]

		p1 = (char *)gTex[whichSurface].ddsd.lpSurface;

#if 0
		memcpy(p1, bmpdata, texsize);
#else
 370d  6b 45 d8 74       L255            imul    eax,-28H[ebp],74H
 3711  8b 80 28 00 00 00                 mov     eax,_gTex+28H[eax]
 3717  89 45 ec                          mov     -14H[ebp],eax

		p2=(unsigned short *)p1;
 371a  8b 45 ec                          mov     eax,-14H[ebp]
 371d  89 45 f0                          mov     -10H[ebp],eax

		t2=(unsigned short *)bmpdata;
 3720  8b 45 e8                          mov     eax,-18H[ebp]
 3723  89 45 f4                          mov     -0cH[ebp],eax

		for (k = 0; k < texsize/2; k++)
		{
 3726  c7 45 c4 00 00 00 
       00                                mov     dword ptr -3cH[ebp],00000000H
 372d  8b 45 e0          L256            mov     eax,-20H[ebp]
 3730  8b 55 e0                          mov     edx,-20H[ebp]
 3733  c1 fa 1f                          sar     edx,1fH
 3736  2b c2                             sub     eax,edx
 3738  d1 f8                             sar     eax,1
 373a  3b 45 c4                          cmp     eax,-3cH[ebp]
 373d  7f 0a                             jg      L258
 373f  eb 40                             jmp     L259
 3741  8b 45 c4          L257            mov     eax,-3cH[ebp]
 3744  ff 45 c4                          inc     dword ptr -3cH[ebp]
 3747  eb e4                             jmp     L256

			t=*t2++;
 3749  8b 45 f4          L258            mov     eax,-0cH[ebp]
 374c  83 45 f4 02                       add     dword ptr -0cH[ebp],00000002H
 3750  66 8b 00                          mov     ax,[eax]
 3753  89 45 fc                          mov     -4H[ebp],eax

			*p2++=(t&0x1f)|((t&0xffe0)>>1);
 3756  8b 45 fc                          mov     eax,-4H[ebp]
 3759  24 e0                             and     al,0e0H
 375b  25 ff ff 00 00                    and     eax,0000ffffH
 3760  d1 f8                             sar     eax,1
 3762  89 c2                             mov     edx,eax
 3764  8b 45 fc                          mov     eax,-4H[ebp]
 3767  25 1f 00 00 00                    and     eax,0000001fH
 376c  25 ff ff 00 00                    and     eax,0000ffffH
 3771  09 d0                             or      eax,edx
 3773  89 c2                             mov     edx,eax
 3775  8b 45 f0                          mov     eax,-10H[ebp]
 3778  83 45 f0 02                       add     dword ptr -10H[ebp],00000002H
 377c  66 89 10                          mov     [eax],dx

		}
#endif
 377f  eb c0                             jmp     L257

		bmpdata += texsize;
 3781  8b 45 e0          L259            mov     eax,-20H[ebp]
 3784  01 45 e8                          add     -18H[ebp],eax

		ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Unlock (gTex[whichSurface].lpDDSTex,NULL);
 3787  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 378b  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3791  8b 10                             mov     edx,[eax]
 3793  6a 00                             push    00000000H
 3795  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 3799  ff b0 00 00 00 00                 push    _gTex[eax]
 379f  ff 92 80 00 00 00                 call    dword ptr +80H[edx]
 37a5  89 45 bc                          mov     -44H[ebp],eax

		if (ddretval != DD_OK)
		{
 37a8  83 7d bc 00                       cmp     dword ptr -44H[ebp],00000000H
 37ac  74 4d                             je      L260

			wsprintf (gszErrMsg, "Error unlocking texture surface for file %s", lpszTexFilename);
 37ae  8b 45 b8                          mov     eax,-48H[ebp]
 37b1  50                                push    eax
 37b2  b8 31 03 00 00                    mov     eax,offset L347
 37b7  50                                push    eax
 37b8  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 37bd  50                                push    eax
 37be  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 37c5  83 c4 0c                          add     esp,0000000cH

			gTex[whichSurface].lpDDSTex->lpVtbl->Release (gTex[whichSurface].lpDDSTex);
 37c8  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 37cc  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 37d2  8b 10                             mov     edx,[eax]
 37d4  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 37d8  ff b0 00 00 00 00                 push    _gTex[eax]
 37de  ff 52 08                          call    dword ptr +8H[edx]

			gTex[whichSurface].lpDDSTex = NULL;
 37e1  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 37e5  c7 80 00 00 00 00 
       00 00 00 00                       mov     dword ptr _gTex[eax],00000000H

			return FALSE;
		}

		// fill a C3D_TMAP struct
 37ef  c7 45 f8 00 00 00 
       00                                mov     dword ptr -8H[ebp],00000000H
 37f6  e9 21 01 00 00                    jmp     L267

		ZeroMemory (&TMap, sizeof (TMap));
 37fb  bb 44 00 00 00    L260            mov     ebx,00000044H
 3800  31 d2                             xor     edx,edx
 3802  8d 85 74 ff ff ff                 lea     eax,-8cH[ebp]
 3808  e8 00 00 00 00                    call    memset_

		TMap.u32Size = sizeof (TMap);

		// determine the maximum log2 dimension
 380d  c7 85 74 ff ff ff 
       44 00 00 00                       mov     dword ptr -8cH[ebp],00000044H

		maxlog2 = 7;
 3817  c7 45 c8 07 00 00 
       00                                mov     dword ptr -38H[ebp],00000007H

		for (k=0; k < maxlog2; k++)
		{
 381e  c7 45 c4 00 00 00 
       00                                mov     dword ptr -3cH[ebp],00000000H
 3825  8b 45 c4          L261            mov     eax,-3cH[ebp]
 3828  3b 45 c8                          cmp     eax,-38H[ebp]
 382b  7c 0a                             jl      L263
 382d  eb 21                             jmp     L264
 382f  8b 45 c4          L262            mov     eax,-3cH[ebp]
 3832  ff 45 c4                          inc     dword ptr -3cH[ebp]
 3835  eb ee                             jmp     L261

			TMap.apvLevels[k] = gTex[whichSurface].ddsd.lpSurface;
 3837  6b 45 d8 74       L263            imul    eax,-28H[ebp],74H
 383b  8b 55 c4                          mov     edx,-3cH[ebp]
 383e  c1 e2 02                          shl     edx,02H
 3841  8b 80 28 00 00 00                 mov     eax,_gTex+28H[eax]
 3847  89 84 2a 7c ff ff 
       ff                                mov     -84H[edx+ebp],eax

		}

 384e  eb df                             jmp     L262

		TMap.bMipMap = FALSE;
 3850  c7 85 78 ff ff ff 
       00 00 00 00       L264            mov     dword ptr -88H[ebp],00000000H

		TMap.u32MaxMapXSizeLg2 = 7;
 385a  c7 45 a8 07 00 00 
       00                                mov     dword ptr -58H[ebp],00000007H

		TMap.u32MaxMapYSizeLg2 = 7;
 3861  c7 45 ac 07 00 00 
       00                                mov     dword ptr -54H[ebp],00000007H

		TMap.eTexFormat = C3D_ETF_RGB1555;

 3868  c7 45 b0 03 00 00 
       00                                mov     dword ptr -50H[ebp],00000003H

		SET_CIF_COLOR (TMap.clrTexChromaKey, 0, 0, 0, 0);

		// register the texture
 386f  81 65 b4 00 ff ff 
       ff                                and     dword ptr -4cH[ebp],0ffffff00H
 3876  8b 45 b4                          mov     eax,-4cH[ebp]
 3879  c1 e0 10                          shl     eax,10H
 387c  81 65 b4 ff 00 ff 
       ff                                and     dword ptr -4cH[ebp],0ffff00ffH
 3883  8b 45 b4                          mov     eax,-4cH[ebp]
 3886  c1 e0 08                          shl     eax,08H
 3889  81 65 b4 ff ff 00 
       ff                                and     dword ptr -4cH[ebp],0ff00ffffH
 3890  8b 45 b4                          mov     eax,-4cH[ebp]
 3893  81 65 b4 ff ff ff 
       00                                and     dword ptr -4cH[ebp],00ffffffH

		ecRetVal = ATI3DCIF_TextureReg (&TMap, &(gTex[whichSurface].hTX));
 389a  6b 45 d8 74                       imul    eax,-28H[ebp],74H
 389e  ba 00 00 00 00                    mov     edx,offset _gTex
 38a3  01 d0                             add     eax,edx
 38a5  83 c0 70                          add     eax,00000070H
 38a8  50                                push    eax
 38a9  8d 85 74 ff ff ff                 lea     eax,-8cH[ebp]
 38af  50                                push    eax
 38b0  e8 00 00 00 00                    call    _ATI3DCIF_TextureReg@8
 38b5  89 45 cc                          mov     -34H[ebp],eax

		if (ecRetVal != C3D_EC_OK)
		{
 38b8  83 7d cc 00                       cmp     dword ptr -34H[ebp],00000000H
 38bc  74 4a                             je      L265

			wsprintf (gszErrMsg, "Error registering texture for file %s", lpszTexFilename);
 38be  8b 45 b8                          mov     eax,-48H[ebp]
 38c1  50                                push    eax
 38c2  b8 5d 03 00 00                    mov     eax,offset L348
 38c7  50                                push    eax
 38c8  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 38cd  50                                push    eax
 38ce  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 38d5  83 c4 0c                          add     esp,0000000cH

			gTex[i].lpDDSTex->lpVtbl->Release (gTex[i].lpDDSTex);
 38d8  6b 45 dc 74                       imul    eax,-24H[ebp],74H
 38dc  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 38e2  8b 10                             mov     edx,[eax]
 38e4  6b 45 dc 74                       imul    eax,-24H[ebp],74H
 38e8  ff b0 00 00 00 00                 push    _gTex[eax]
 38ee  ff 52 08                          call    dword ptr +8H[edx]

			gTex[i].lpDDSTex = NULL;
 38f1  6b 45 dc 74                       imul    eax,-24H[ebp],74H
 38f5  c7 80 00 00 00 00 
       00 00 00 00                       mov     dword ptr _gTex[eax],00000000H

			return FALSE;
		}
 38ff  c7 45 f8 00 00 00 
       00                                mov     dword ptr -8H[ebp],00000000H
 3906  eb 14                             jmp     L267

	}
		
 3908  e9 7d fd ff ff    L265            jmp     L253

	free(ptr);
 390d  8b 45 e4          L266            mov     eax,-1cH[ebp]
 3910  e8 00 00 00 00                    call    free_

	return TRUE;
 3915  c7 45 f8 01 00 00 
       00                                mov     dword ptr -8H[ebp],00000001H

}

/*
 *  LoadTexture - load a texture map from a file into a texture surface
 */

 391c  8b 45 f8          L267            mov     eax,-8H[ebp]
 391f  89 ec                             mov     esp,ebp
 3921  5d                                pop     ebp
 3922  5f                                pop     edi
 3923  5e                                pop     esi
 3924  5a                                pop     edx
 3925  59                                pop     ecx
 3926  5b                                pop     ebx
 3927  c3                                ret     

BOOL JJSLoadSprites (void)
{
	int fp;
    HRESULT             ddretval;
	C3D_TMAP			TMap;
	int					k, maxlog2;
	C3D_EC				ecRetVal;
	HANDLE				hTexFile;
	C3D_UINT32			bufsize;
	int	i,sp;
	long 				texsize;
	char *			*ptr, *bmpdata, *p1;
	static char* lpszTexFilename[3]={
		"wipeout\\newgraph\\menu\\page12.sjr",
		"wipeout\\newgraph\\menu\\page15.sjr",
		"wipeout\\newgraph\\menu\\page17.sjr"
	};

 3928  53                JJSLoadSprites_ push    ebx
 3929  51                                push    ecx
 392a  52                                push    edx
 392b  56                                push    esi
 392c  57                                push    edi
 392d  55                                push    ebp
 392e  89 e5                             mov     ebp,esp
 3930  81 ec 7c 00 00 00                 sub     esp,0000007cH

	texsize = 256 * 256 * sizeof (C3D_UINT16);

 3936  c7 45 ec 00 00 02 
       00                                mov     dword ptr -14H[ebp],00020000H

	bufsize = texsize;
	
 393d  8b 45 ec                          mov     eax,-14H[ebp]
 3940  89 45 e0                          mov     -20H[ebp],eax

	bmpdata = (char *)malloc(bufsize);
 3943  8b 45 e0                          mov     eax,-20H[ebp]
 3946  e8 00 00 00 00                    call    malloc_
 394b  89 45 f4                          mov     -0cH[ebp],eax

	if( bmpdata == NULL )
	{
 394e  83 7d f4 00                       cmp     dword ptr -0cH[ebp],00000000H
 3952  75 0c                             jne     L268

		return FALSE;
	}

 3954  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 395b  e9 e4 02 00 00                    jmp     L281

	for(sp=0;sp<3;++sp)
	{
 3960  c7 45 e8 00 00 00 
       00                L268            mov     dword ptr -18H[ebp],00000000H
 3967  83 7d e8 03       L269            cmp     dword ptr -18H[ebp],00000003H
 396b  7c 0a                             jl      L271
 396d  e9 c3 02 00 00                    jmp     L280
 3972  ff 45 e8          L270            inc     dword ptr -18H[ebp]
 3975  eb f0                             jmp     L269

		fp = open(lpszTexFilename[sp], O_RDONLY | O_BINARY);
 3977  68 00 02 00 00    L271            push    00000200H
 397c  8b 45 e8                          mov     eax,-18H[ebp]
 397f  c1 e0 02                          shl     eax,02H
 3982  ff b0 9b 00 00 00                 push    L360[eax]
 3988  e8 00 00 00 00                    call    open_
 398d  83 c4 08                          add     esp,00000008H
 3990  89 45 cc                          mov     -34H[ebp],eax

		if (fp<0)
		{
 3993  83 7d cc 00                       cmp     dword ptr -34H[ebp],00000000H
 3997  7d 22                             jge     L272

			wsprintf (gszErrMsg, "Could not open texture map file");
 3999  b8 83 03 00 00                    mov     eax,offset L349
 399e  50                                push    eax
 399f  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 39a4  50                                push    eax
 39a5  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 39ac  83 c4 08                          add     esp,00000008H

			return FALSE;
		}
	
 39af  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 39b6  e9 89 02 00 00                    jmp     L281

		read(fp, (void *)bmpdata, bufsize);
 39bb  8b 5d e0          L272            mov     ebx,-20H[ebp]
 39be  8b 55 f4                          mov     edx,-0cH[ebp]
 39c1  8b 45 cc                          mov     eax,-34H[ebp]
 39c4  e8 00 00 00 00                    call    read_

		close(fp);
	
 39c9  8b 45 cc                          mov     eax,-34H[ebp]
 39cc  e8 00 00 00 00                    call    close_

		ptr = bmpdata;
	
		// get a pointer to the texture surface
 39d1  8b 45 f4                          mov     eax,-0cH[ebp]
 39d4  89 45 f0                          mov     -10H[ebp],eax

		ZeroMemory (&(gTex[sp+22].ddsd), sizeof (gTex[sp+22].ddsd));
 39d7  bb 6c 00 00 00                    mov     ebx,0000006cH
 39dc  31 d2                             xor     edx,edx
 39de  8b 45 e8                          mov     eax,-18H[ebp]
 39e1  83 c0 16                          add     eax,00000016H
 39e4  6b c0 74                          imul    eax,74H
 39e7  b9 00 00 00 00                    mov     ecx,offset _gTex
 39ec  01 c8                             add     eax,ecx
 39ee  83 c0 04                          add     eax,00000004H
 39f1  e8 00 00 00 00                    call    memset_

		gTex[sp+22].ddsd.dwSize = sizeof (gTex[sp+22].ddsd);
	
		// lock texture to fill ddsd member
 39f6  8b 45 e8                          mov     eax,-18H[ebp]
 39f9  83 c0 16                          add     eax,00000016H
 39fc  6b c0 74                          imul    eax,74H
 39ff  c7 80 04 00 00 00 
       6c 00 00 00                       mov     dword ptr _gTex+4H[eax],0000006cH

		ddretval = gTex[sp+22].lpDDSTex->lpVtbl->Lock (gTex[sp+22].lpDDSTex,
			NULL,
			&(gTex[sp+22].ddsd),
			DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,
			NULL);
 3a09  8b 45 e8                          mov     eax,-18H[ebp]
 3a0c  83 c0 16                          add     eax,00000016H
 3a0f  6b c0 74                          imul    eax,74H
 3a12  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3a18  8b 00                             mov     eax,[eax]
 3a1a  6a 00                             push    00000000H
 3a1c  6a 01                             push    00000001H
 3a1e  8b 55 e8                          mov     edx,-18H[ebp]
 3a21  83 c2 16                          add     edx,00000016H
 3a24  6b d2 74                          imul    edx,74H
 3a27  bb 00 00 00 00                    mov     ebx,offset _gTex
 3a2c  01 da                             add     edx,ebx
 3a2e  83 c2 04                          add     edx,00000004H
 3a31  52                                push    edx
 3a32  6a 00                             push    00000000H
 3a34  8b 55 e8                          mov     edx,-18H[ebp]
 3a37  83 c2 16                          add     edx,00000016H
 3a3a  6b d2 74                          imul    edx,74H
 3a3d  ff b2 00 00 00 00                 push    _gTex[edx]
 3a43  ff 50 64                          call    dword ptr +64H[eax]
 3a46  89 45 c8                          mov     -38H[ebp],eax

		if (ddretval == DDERR_SURFACELOST)
 3a49  81 7d c8 c2 01 76 
       88                                cmp     dword ptr -38H[ebp],887601c2H
 3a50  75 23                             jne     L273

			gTex[sp+22].lpDDSTex->lpVtbl->Restore (gTex[sp+22].lpDDSTex);
 3a52  8b 45 e8                          mov     eax,-18H[ebp]
 3a55  83 c0 16                          add     eax,00000016H
 3a58  6b c0 74                          imul    eax,74H
 3a5b  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3a61  8b 10                             mov     edx,[eax]
 3a63  8b 45 e8                          mov     eax,-18H[ebp]
 3a66  83 c0 16                          add     eax,00000016H
 3a69  6b c0 74                          imul    eax,74H
 3a6c  ff b0 00 00 00 00                 push    _gTex[eax]
 3a72  ff 52 6c                          call    dword ptr +6cH[edx]

		p1 = (char *)gTex[sp+22].ddsd.lpSurface;
	
 3a75  8b 45 e8          L273            mov     eax,-18H[ebp]
 3a78  83 c0 16                          add     eax,00000016H
 3a7b  6b c0 74                          imul    eax,74H
 3a7e  8b 80 28 00 00 00                 mov     eax,_gTex+28H[eax]
 3a84  89 45 f8                          mov     -8H[ebp],eax

		memcpy(p1, bmpdata, texsize);

 3a87  8b 5d ec                          mov     ebx,-14H[ebp]
 3a8a  8b 55 f4                          mov     edx,-0cH[ebp]
 3a8d  8b 45 f8                          mov     eax,-8H[ebp]
 3a90  e8 00 00 00 00                    call    memcpy_

		ddretval = gTex[sp+22].lpDDSTex->lpVtbl->Unlock (gTex[sp+22].lpDDSTex,NULL);
 3a95  8b 45 e8                          mov     eax,-18H[ebp]
 3a98  83 c0 16                          add     eax,00000016H
 3a9b  6b c0 74                          imul    eax,74H
 3a9e  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3aa4  8b 00                             mov     eax,[eax]
 3aa6  6a 00                             push    00000000H
 3aa8  8b 55 e8                          mov     edx,-18H[ebp]
 3aab  83 c2 16                          add     edx,00000016H
 3aae  6b d2 74                          imul    edx,74H
 3ab1  ff b2 00 00 00 00                 push    _gTex[edx]
 3ab7  ff 90 80 00 00 00                 call    dword ptr +80H[eax]
 3abd  89 45 c8                          mov     -38H[ebp],eax

		if (ddretval != DD_OK)
		{
 3ac0  83 7d c8 00                       cmp     dword ptr -38H[ebp],00000000H
 3ac4  74 4b                             je      L274

			wsprintf (gszErrMsg, "Error unlocking texture surface for file %s", lpszTexFilename);
 3ac6  b8 9b 00 00 00                    mov     eax,offset L360
 3acb  50                                push    eax
 3acc  b8 a3 03 00 00                    mov     eax,offset L350
 3ad1  50                                push    eax
 3ad2  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3ad7  50                                push    eax
 3ad8  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3adf  83 c4 0c                          add     esp,0000000cH

			gTex[sp+22].lpDDSTex->lpVtbl->Release (gTex[sp+22].lpDDSTex);
 3ae2  8b 45 e8                          mov     eax,-18H[ebp]
 3ae5  83 c0 16                          add     eax,00000016H
 3ae8  6b c0 74                          imul    eax,74H
 3aeb  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3af1  8b 10                             mov     edx,[eax]
 3af3  8b 45 e8                          mov     eax,-18H[ebp]
 3af6  83 c0 16                          add     eax,00000016H
 3af9  6b c0 74                          imul    eax,74H
 3afc  ff b0 00 00 00 00                 push    _gTex[eax]
 3b02  ff 52 08                          call    dword ptr +8H[edx]

			return FALSE;
		}

		// fill a C3D_TMAP struct

 3b05  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 3b0c  e9 33 01 00 00                    jmp     L281

		ZeroMemory (&TMap, sizeof (TMap));
 3b11  bb 44 00 00 00    L274            mov     ebx,00000044H
 3b16  31 d2                             xor     edx,edx
 3b18  8d 45 84                          lea     eax,-7cH[ebp]
 3b1b  e8 00 00 00 00                    call    memset_

		TMap.u32Size = sizeof (TMap);

		// determine the maximum log2 dimension
 3b20  c7 45 84 44 00 00 
       00                                mov     dword ptr -7cH[ebp],00000044H

		maxlog2 = 8;
 3b27  c7 45 d4 08 00 00 
       00                                mov     dword ptr -2cH[ebp],00000008H

		for (k=0; k < maxlog2; k++)
		{
 3b2e  c7 45 d0 00 00 00 
       00                                mov     dword ptr -30H[ebp],00000000H
 3b35  8b 45 d0          L275            mov     eax,-30H[ebp]
 3b38  3b 45 d4                          cmp     eax,-2cH[ebp]
 3b3b  7c 0a                             jl      L277
 3b3d  eb 23                             jmp     L278
 3b3f  8b 45 d0          L276            mov     eax,-30H[ebp]
 3b42  ff 45 d0                          inc     dword ptr -30H[ebp]
 3b45  eb ee                             jmp     L275

			TMap.apvLevels[k] = gTex[sp+22].ddsd.lpSurface;
 3b47  8b 45 e8          L277            mov     eax,-18H[ebp]
 3b4a  83 c0 16                          add     eax,00000016H
 3b4d  6b c0 74                          imul    eax,74H
 3b50  8b 55 d0                          mov     edx,-30H[ebp]
 3b53  c1 e2 02                          shl     edx,02H
 3b56  8b 80 28 00 00 00                 mov     eax,_gTex+28H[eax]
 3b5c  89 44 2a 8c                       mov     -74H[edx+ebp],eax

		}

 3b60  eb dd                             jmp     L276

		TMap.bMipMap = FALSE;
 3b62  c7 45 88 00 00 00 
       00                L278            mov     dword ptr -78H[ebp],00000000H

		TMap.u32MaxMapXSizeLg2 = 8;
 3b69  c7 45 b8 08 00 00 
       00                                mov     dword ptr -48H[ebp],00000008H

		TMap.u32MaxMapYSizeLg2 = 8;
 3b70  c7 45 bc 08 00 00 
       00                                mov     dword ptr -44H[ebp],00000008H

		TMap.eTexFormat = C3D_ETF_RGB1555;

 3b77  c7 45 c0 03 00 00 
       00                                mov     dword ptr -40H[ebp],00000003H

		SET_CIF_COLOR (TMap.clrTexChromaKey, 0, 0, 0, 0);

		// register the texture
 3b7e  81 65 c4 00 ff ff 
       ff                                and     dword ptr -3cH[ebp],0ffffff00H
 3b85  8b 45 c4                          mov     eax,-3cH[ebp]
 3b88  c1 e0 10                          shl     eax,10H
 3b8b  81 65 c4 ff 00 ff 
       ff                                and     dword ptr -3cH[ebp],0ffff00ffH
 3b92  8b 45 c4                          mov     eax,-3cH[ebp]
 3b95  c1 e0 08                          shl     eax,08H
 3b98  81 65 c4 ff ff 00 
       ff                                and     dword ptr -3cH[ebp],0ff00ffffH
 3b9f  8b 45 c4                          mov     eax,-3cH[ebp]
 3ba2  81 65 c4 ff ff ff 
       00                                and     dword ptr -3cH[ebp],00ffffffH

		ecRetVal = ATI3DCIF_TextureReg (&TMap, &(gTex[sp+22].hTX));
 3ba9  8b 45 e8                          mov     eax,-18H[ebp]
 3bac  83 c0 16                          add     eax,00000016H
 3baf  6b d0 74                          imul    edx,eax,74H
 3bb2  b8 00 00 00 00                    mov     eax,offset _gTex
 3bb7  01 d0                             add     eax,edx
 3bb9  83 c0 70                          add     eax,00000070H
 3bbc  50                                push    eax
 3bbd  8d 45 84                          lea     eax,-7cH[ebp]
 3bc0  50                                push    eax
 3bc1  e8 00 00 00 00                    call    _ATI3DCIF_TextureReg@8
 3bc6  89 45 d8                          mov     -28H[ebp],eax

		if (ecRetVal != C3D_EC_OK)
		{
 3bc9  83 7d d8 00                       cmp     dword ptr -28H[ebp],00000000H
 3bcd  74 61                             je      L279

			wsprintf (gszErrMsg, "Error registering texture for file %s", lpszTexFilename[sp]);
 3bcf  8b 45 e8                          mov     eax,-18H[ebp]
 3bd2  c1 e0 02                          shl     eax,02H
 3bd5  ff b0 9b 00 00 00                 push    L360[eax]
 3bdb  b8 cf 03 00 00                    mov     eax,offset L351
 3be0  50                                push    eax
 3be1  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3be6  50                                push    eax
 3be7  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3bee  83 c4 0c                          add     esp,0000000cH

			gTex[sp+22].lpDDSTex->lpVtbl->Release (gTex[sp+22].lpDDSTex);
 3bf1  8b 45 e8                          mov     eax,-18H[ebp]
 3bf4  83 c0 16                          add     eax,00000016H
 3bf7  6b c0 74                          imul    eax,74H
 3bfa  8b 90 00 00 00 00                 mov     edx,_gTex[eax]
 3c00  8b 12                             mov     edx,[edx]
 3c02  8b 45 e8                          mov     eax,-18H[ebp]
 3c05  83 c0 16                          add     eax,00000016H
 3c08  6b c0 74                          imul    eax,74H
 3c0b  ff b0 00 00 00 00                 push    _gTex[eax]
 3c11  ff 52 08                          call    dword ptr +8H[edx]

			gTex[sp+22].lpDDSTex = NULL;
 3c14  8b 45 e8                          mov     eax,-18H[ebp]
 3c17  83 c0 16                          add     eax,00000016H
 3c1a  6b c0 74                          imul    eax,74H
 3c1d  c7 80 00 00 00 00 
       00 00 00 00                       mov     dword ptr _gTex[eax],00000000H

			return FALSE;
		}
 3c27  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 3c2e  eb 14                             jmp     L281

	}
		
 3c30  e9 3d fd ff ff    L279            jmp     L270

	free(ptr);
 3c35  8b 45 f0          L280            mov     eax,-10H[ebp]
 3c38  e8 00 00 00 00                    call    free_

	return TRUE;
 3c3d  c7 45 fc 01 00 00 
       00                                mov     dword ptr -4H[ebp],00000001H

}
/*
BOOL JJSLoadTextureBMP (const char* lpszTexFilename)
{
	int fp;
    HRESULT             ddretval;
	C3D_TMAP			TMap;
	int					k, maxlog2;
	C3D_EC				ecRetVal;
	HANDLE				hTexFile;
	BITMAPFILEHEADER	bmfh;
	BITMAPINFOHEADER	bmih;
	C3D_UINT32			bufsize;
	char*				bmdata;
	short*				p1;
	C3D_UINT32			pitch;
	C3D_UINT8			r, g, b;
	C3D_UINT16			rgb565;
	int	x,y,count,whichSurface,i;
	HANDLE           hFileMapping;
	LPBYTE           pBase;


	// open texture map file for reading
	hTexFile = CreateFile (
		lpszTexFilename,
		GENERIC_READ,
		FILE_SHARE_READ,
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_RANDOM_ACCESS,
		NULL);
	if (hTexFile == INVALID_HANDLE_VALUE)
	{
		wsprintf (gszErrMsg, "Could not open texture map file");
		return FALSE;
	}

	// read headers and bitmap data
	// first, determine buffer size required for BITMAPINFO and data
	bufsize = GetFileSize (hTexFile, NULL);
	if (bufsize == 0xFFFFFFFFL)
	{
		wsprintf (gszErrMsg, "Error getting texture file size");
		CloseHandle (hTexFile);
		return FALSE;
	}

        hFileMapping = CreateFileMapping( hTexFile, NULL, PAGE_READONLY, 0, 0, NULL );
        if( hFileMapping == NULL ) {
            return FALSE;
        }

        pBase = MapViewOfFile( hFileMapping, FILE_MAP_READ, 0, 0, 0 );
        if( pBase == NULL ) {
             return FALSE;
        }
	// adjust bufsize for BITMAFILEHEADER
	bufsize -= sizeof (bmfh);

	// read BITMAPFILEHEADER
	memcpy(&bmfh,pBase,sizeof(bmfh));
	pBase+=sizeof(bmfh);

	// read BITMAPINFO and bitmap data
	memcpy (&bmih, pBase, sizeof (BITMAPINFOHEADER));
	pBase+=sizeof (BITMAPINFOHEADER);

	// unlock surface

	bmdata = pBase;
	// pitch of each scan line
	if(bmih.biSizeImage)
	{
		pitch = bmih.biSizeImage / bmih.biHeight;
	}
	else
	{
		pitch = bmih.biWidth * 3;		// JJS for BMPs without biSizeImage
	}

	whichSurface=-1;
	// line counter
	for (y=8192-1,count=0; y>=0; y-=2,count+=2)
	{
		if(count<1280 || ((count>=16*256) && (count < 21*256)))
			continue;
		if(count%256 == 0)
		{
			if(whichSurface>=0)
			{
				ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Unlock (gTex[whichSurface].lpDDSTex,NULL);
				if (ddretval != DD_OK)
				{
					wsprintf (gszErrMsg, "Error unlocking texture surface for file %s", lpszTexFilename);
					gTex[whichSurface].lpDDSTex->lpVtbl->Release (gTex[whichSurface].lpDDSTex);
					gTex[whichSurface].lpDDSTex = NULL;
					return FALSE;
				}
			}
			++whichSurface;
			// get a pointer to the texture surface
			ZeroMemory (&(gTex[whichSurface].ddsd), sizeof (gTex[whichSurface].ddsd));
			gTex[whichSurface].ddsd.dwSize = sizeof (gTex[whichSurface].ddsd);
			// lock texture to fill ddsd member
			ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Lock (gTex[whichSurface].lpDDSTex,
				NULL,
				&(gTex[whichSurface].ddsd),
				DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,
				NULL);
			if (ddretval == DDERR_SURFACELOST) gTex[whichSurface].lpDDSTex->lpVtbl->Restore (gTex[whichSurface].lpDDSTex);
			p1=(short*)gTex[whichSurface].ddsd.lpSurface;
		}
		// scan line pixel counter
		for (x=0; x<256; x+=2)
		{
			// read RGB
			memcpy (&b, (char*)bmdata + (y*pitch)+(3*x), sizeof (C3D_UINT8));
			memcpy (&g, (char*)bmdata + (y*pitch)+(3*x)+1, sizeof (C3D_UINT8));
			memcpy (&r, (char*)bmdata + (y*pitch)+(3*x)+2, sizeof (C3D_UINT8));

			// pack color data in 16bpp format

//#define RGB_555
//#ifndef RGB_555
			// pack data in RGB 555 format
			rgb565 = ((C3D_UINT32)r & 0xf8) << 8 |
					 ((C3D_UINT32)g & 0xfc) << 3 |
					 ((C3D_UINT32)b & 0xf8) >> 3;
//#else
			// pack data in RGB 565 format
			//rgb565 = ((C3D_UINT32)r & 0xf8) << 7 |
					 //((C3D_UINT32)g & 0xf8) << 2 |
					 //((C3D_UINT32)b & 0xf8) >> 3;
//#endif
			*p1++=rgb565;
			// write texture data to texture cache
		}
	}

	ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Unlock (gTex[whichSurface].lpDDSTex,NULL);
	if (ddretval != DD_OK)
	{
		wsprintf (gszErrMsg, "Error unlocking texture surface for file %s", lpszTexFilename);
		gTex[whichSurface].lpDDSTex->lpVtbl->Release (gTex[whichSurface].lpDDSTex);
		gTex[whichSurface].lpDDSTex = NULL;
		return FALSE;
	}
    if( hFileMapping != NULL && pBase ) {
        UnmapViewOfFile( pBase );
    }
    if( hFileMapping != NULL ) {
        CloseHandle( hFileMapping );
        hFileMapping = NULL;
    }
	// close the texture file; we're done with it
	CloseHandle (hTexFile);


	//fp = open("menus.sjr",O_RDWR|O_CREAT);
	for(i=0;i<22;++i)//SJR
	{
	
		// fill a C3D_TMAP struct
		ZeroMemory (&TMap, sizeof (TMap));
		TMap.u32Size = sizeof (TMap);

		// determine the maximum log2 dimension
		maxlog2 = 7;
		for (k=0; k < maxlog2; k++)
		{
			TMap.apvLevels[k] = gTex[i].ddsd.lpSurface;
		}

		TMap.bMipMap = FALSE;
		TMap.u32MaxMapXSizeLg2 = 7;
		TMap.u32MaxMapYSizeLg2 = 7;
		TMap.eTexFormat = C3D_ETF_RGB565;
//JJS	TMap.bTexTranspEnable = FALSE;

		SET_CIF_COLOR (TMap.clrTexChromaKey, 0, 0, 0, 0);

		//write(fp, (void *)&gTex[i], sizeof(TEXTURE));
		//write(fp, (void *)&gTex[i].ddsd, sizeof(DDSURFACEDESC));
		//write(fp, (void *)&gTex[i].ddsd.ddckCKDestOverlay, sizeof(gTex[1].ddsd.ddckCKDestOverlay));
		//write(fp, (void *)&gTex[i].ddsd.ddckCKDestBlt, sizeof(gTex[1].ddsd.ddckCKDestBlt));
		//write(fp, (void *)&gTex[i].ddsd.ddckCKSrcOverlay, sizeof(gTex[1].ddsd.ddckCKSrcOverlay));
		//write(fp, (void *)&gTex[i].ddsd.ddckCKSrcBlt, sizeof(gTex[1].ddsd.ddckCKSrcBlt));
		//write(fp, (void *)&gTex[i].ddsd.ddpfPixelFormat, sizeof(gTex[1].ddsd.ddpfPixelFormat));
		//write(fp, (void *)&gTex[i].ddsd.ddsCaps, sizeof(gTex[1].ddsd.ddsCaps));
		//write(fp, (void *)&TMap, sizeof(C3D_TMAP));
		//for (k = 0; k < 7;k++)
			//write(fp, (void *)&TMap.apvLevels[k], sizeof(TMap.apvLevels));
		// register the texture
		ecRetVal = ATI3DCIF_TextureReg (&TMap, &(gTex[i].hTX));
		if (ecRetVal != C3D_EC_OK)
		{
			wsprintf (gszErrMsg, "Error registering texture for file %s", lpszTexFilename);
			gTex[i].lpDDSTex->lpVtbl->Release (gTex[i].lpDDSTex);
			gTex[i].lpDDSTex = NULL;
			return FALSE;
		}
	}

	//close(fp);
	return TRUE;
}
*/
 3c44  8b 45 fc          L281            mov     eax,-4H[ebp]
 3c47  89 ec                             mov     esp,ebp
 3c49  5d                                pop     ebp
 3c4a  5f                                pop     edi
 3c4b  5e                                pop     esi
 3c4c  5a                                pop     edx
 3c4d  59                                pop     ecx
 3c4e  5b                                pop     ebx
 3c4f  c3                                ret     

BOOL JJSLoadTextureBMP (const char* lpszTexFilename)
{
	int fp;
    HRESULT             ddretval;
	C3D_TMAP			TMap;
	int					k, maxlog2;
	C3D_EC				ecRetVal;
	HANDLE				hTexFile;
	BITMAPFILEHEADER	bmfh;
	BITMAPINFOHEADER	bmih;
	C3D_UINT32			bufsize;
	char*				bmdata;
	short*				p1;
	C3D_UINT32			pitch;
	C3D_UINT8			r, g, b;
	C3D_UINT16			rgb565;
	int	x,y,count,whichSurface,i;
	HANDLE           hFileMapping;
	LPBYTE           pBase;


	// open texture map file for reading
 3c50                    JJSLoadTextureBMP_:
 3c50  53                                push    ebx
 3c51  51                                push    ecx
 3c52  52                                push    edx
 3c53  56                                push    esi
 3c54  57                                push    edi
 3c55  55                                push    ebp
 3c56  89 e5                             mov     ebp,esp
 3c58  81 ec d8 00 00 00                 sub     esp,000000d8H
 3c5e  89 45 a4                          mov     -5cH[ebp],eax

	hTexFile = CreateFile (
		lpszTexFilename,
		GENERIC_READ,
		FILE_SHARE_READ,
		NULL,
		OPEN_EXISTING,
		FILE_FLAG_RANDOM_ACCESS,
		NULL);
 3c61  6a 00                             push    00000000H
 3c63  68 00 00 00 10                    push    10000000H
 3c68  6a 03                             push    00000003H
 3c6a  6a 00                             push    00000000H
 3c6c  6a 01                             push    00000001H
 3c6e  68 00 00 00 80                    push    80000000H
 3c73  8b 45 a4                          mov     eax,-5cH[ebp]
 3c76  50                                push    eax
 3c77  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CreateFileA@28
 3c7e  89 45 b4                          mov     -4cH[ebp],eax

	if (hTexFile == INVALID_HANDLE_VALUE)
	{
 3c81  83 7d b4 ff                       cmp     dword ptr -4cH[ebp],0ffffffffH
 3c85  75 22                             jne     L282

		wsprintf (gszErrMsg, "Could not open texture map file");
 3c87  b8 f5 03 00 00                    mov     eax,offset L352
 3c8c  50                                push    eax
 3c8d  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3c92  50                                push    eax
 3c93  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3c9a  83 c4 08                          add     esp,00000008H

		return FALSE;
	}

	// read headers and bitmap data
	// first, determine buffer size required for BITMAPINFO and data
 3c9d  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 3ca4  e9 16 05 00 00                    jmp     L316

	bufsize = GetFileSize (hTexFile, NULL);
 3ca9  6a 00             L282            push    00000000H
 3cab  8b 45 b4                          mov     eax,-4cH[ebp]
 3cae  50                                push    eax
 3caf  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__GetFileSize@8
 3cb6  89 45 c0                          mov     -40H[ebp],eax

	if (bufsize == 0xFFFFFFFFL)
	{
 3cb9  83 7d c0 ff                       cmp     dword ptr -40H[ebp],0ffffffffH
 3cbd  75 2d                             jne     L283

		wsprintf (gszErrMsg, "Error getting texture file size");
 3cbf  b8 15 04 00 00                    mov     eax,offset L353
 3cc4  50                                push    eax
 3cc5  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3cca  50                                push    eax
 3ccb  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3cd2  83 c4 08                          add     esp,00000008H

		CloseHandle (hTexFile);
 3cd5  8b 45 b4                          mov     eax,-4cH[ebp]
 3cd8  50                                push    eax
 3cd9  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

		return FALSE;
	}

 3ce0  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 3ce7  e9 d3 04 00 00                    jmp     L316

        hFileMapping = CreateFileMapping( hTexFile, NULL, PAGE_READONLY, 0, 0, NULL );
 3cec  6a 00             L283            push    00000000H
 3cee  6a 00                             push    00000000H
 3cf0  6a 00                             push    00000000H
 3cf2  6a 02                             push    00000002H
 3cf4  6a 00                             push    00000000H
 3cf6  8b 45 b4                          mov     eax,-4cH[ebp]
 3cf9  50                                push    eax
 3cfa  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CreateFileMappingA@24
 3d01  89 45 d8                          mov     -28H[ebp],eax

        if( hFileMapping == NULL ) {
 3d04  83 7d d8 00                       cmp     dword ptr -28H[ebp],00000000H
 3d08  75 0c                             jne     L284

            return FALSE;
        }

 3d0a  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 3d11  e9 a9 04 00 00                    jmp     L316

        pBase = MapViewOfFile( hFileMapping, FILE_MAP_READ, 0, 0, 0 );
 3d16  6a 00             L284            push    00000000H
 3d18  6a 00                             push    00000000H
 3d1a  6a 00                             push    00000000H
 3d1c  6a 04                             push    00000004H
 3d1e  8b 45 d8                          mov     eax,-28H[ebp]
 3d21  50                                push    eax
 3d22  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__MapViewOfFile@20
 3d29  89 45 dc                          mov     -24H[ebp],eax

        if( pBase == NULL ) {
 3d2c  83 7d dc 00                       cmp     dword ptr -24H[ebp],00000000H
 3d30  75 0c                             jne     L285

             return FALSE;
        }
	// adjust bufsize for BITMAFILEHEADER
 3d32  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 3d39  e9 81 04 00 00                    jmp     L316

	bufsize -= sizeof (bmfh);

	// read BITMAPFILEHEADER
 3d3e  83 45 c0 f2       L285            add     dword ptr -40H[ebp],0fffffff2H

	memcpy(&bmfh,pBase,sizeof(bmfh));
 3d42  bb 0e 00 00 00                    mov     ebx,0000000eH
 3d47  8b 55 dc                          mov     edx,-24H[ebp]
 3d4a  8d 45 94                          lea     eax,-6cH[ebp]
 3d4d  e8 00 00 00 00                    call    memcpy_

	pBase+=sizeof(bmfh);

	// read BITMAPINFO and bitmap data
 3d52  83 45 dc 0e                       add     dword ptr -24H[ebp],0000000eH

	memcpy (&bmih, pBase, sizeof (BITMAPINFOHEADER));
 3d56  bb 28 00 00 00                    mov     ebx,00000028H
 3d5b  8b 55 dc                          mov     edx,-24H[ebp]
 3d5e  8d 85 6c ff ff ff                 lea     eax,-94H[ebp]
 3d64  e8 00 00 00 00                    call    memcpy_

	pBase+=sizeof (BITMAPINFOHEADER);

	// unlock surface

 3d69  83 45 dc 28                       add     dword ptr -24H[ebp],00000028H

	bmdata = pBase;
	// pitch of each scan line
 3d6d  8b 45 dc                          mov     eax,-24H[ebp]
 3d70  89 45 c4                          mov     -3cH[ebp],eax

	if(bmih.biSizeImage)
	{
 3d73  83 7d 80 00                       cmp     dword ptr -80H[ebp],00000000H
 3d77  74 10                             je      L286

		pitch = bmih.biSizeImage / bmih.biHeight;
	}
 3d79  31 d2                             xor     edx,edx
 3d7b  8b 45 80                          mov     eax,-80H[ebp]
 3d7e  f7 b5 74 ff ff ff                 div     dword ptr -8cH[ebp]
 3d84  89 45 cc                          mov     -34H[ebp],eax

	else
	{
 3d87  eb 0c                             jmp     L287

		pitch = bmih.biWidth * 3;		// JJS for BMPs without biSizeImage
	}

 3d89  8b 85 70 ff ff ff L286            mov     eax,-90H[ebp]
 3d8f  8d 04 40                          lea     eax,[eax+eax*2]
 3d92  89 45 cc                          mov     -34H[ebp],eax

	whichSurface=-1;
	// line counter
 3d95  c7 45 d0 ff ff ff 
       ff                L287            mov     dword ptr -30H[ebp],0ffffffffH

	for (y=8192-1,count=0; y>=0; y-=1,count+=1)
	{
 3d9c  c7 45 e4 ff 1f 00 
       00                                mov     dword ptr -1cH[ebp],00001fffH
 3da3  c7 45 e8 00 00 00 
       00                                mov     dword ptr -18H[ebp],00000000H
 3daa  83 7d e4 00       L288            cmp     dword ptr -1cH[ebp],00000000H
 3dae  7d 0e                             jge     L290
 3db0  e9 0c 02 00 00                    jmp     L301
 3db5  83 45 e4 ff       L289            add     dword ptr -1cH[ebp],0ffffffffH
 3db9  ff 45 e8                          inc     dword ptr -18H[ebp]
 3dbc  eb ec                             jmp     L288

		if(count<2560 || ((count>=32*256) && (count < 42*256)))
 3dbe  81 7d e8 00 0a 00 
       00                L290            cmp     dword ptr -18H[ebp],00000a00H
 3dc5  7c 14                             jl      L292
 3dc7  81 7d e8 00 20 00 
       00                                cmp     dword ptr -18H[ebp],00002000H
 3dce  7c 09                             jl      L291
 3dd0  81 7d e8 00 2a 00 
       00                                cmp     dword ptr -18H[ebp],00002a00H
 3dd7  7c 02                             jl      L292
 3dd9  eb 02             L291            jmp     L293

			continue;
 3ddb  eb d8             L292            jmp     L289

		if(count%256 == 0)
		{
 3ddd  bb 00 01 00 00    L293            mov     ebx,00000100H
 3de2  8b 45 e8                          mov     eax,-18H[ebp]
 3de5  8b 55 e8                          mov     edx,-18H[ebp]
 3de8  c1 fa 1f                          sar     edx,1fH
 3deb  f7 fb                             idiv    ebx
 3ded  85 d2                             test    edx,edx
 3def  0f 85 05 01 00 00                 jne     L296

			if(whichSurface>=0)
			{
 3df5  83 7d d0 00                       cmp     dword ptr -30H[ebp],00000000H
 3df9  7c 74                             jl      L294

				ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Unlock (gTex[whichSurface].lpDDSTex,NULL);
 3dfb  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3dff  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3e05  8b 10                             mov     edx,[eax]
 3e07  6a 00                             push    00000000H
 3e09  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3e0d  ff b0 00 00 00 00                 push    _gTex[eax]
 3e13  ff 92 80 00 00 00                 call    dword ptr +80H[edx]
 3e19  89 45 bc                          mov     -44H[ebp],eax

				if (ddretval != DD_OK)
				{
 3e1c  83 7d bc 00                       cmp     dword ptr -44H[ebp],00000000H
 3e20  74 4d                             je      L294

					wsprintf (gszErrMsg, "Error unlocking texture surface for file %s", lpszTexFilename);
 3e22  8b 45 a4                          mov     eax,-5cH[ebp]
 3e25  50                                push    eax
 3e26  b8 35 04 00 00                    mov     eax,offset L354
 3e2b  50                                push    eax
 3e2c  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3e31  50                                push    eax
 3e32  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3e39  83 c4 0c                          add     esp,0000000cH

					gTex[whichSurface].lpDDSTex->lpVtbl->Release (gTex[whichSurface].lpDDSTex);
 3e3c  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3e40  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3e46  8b 10                             mov     edx,[eax]
 3e48  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3e4c  ff b0 00 00 00 00                 push    _gTex[eax]
 3e52  ff 52 08                          call    dword ptr +8H[edx]

					gTex[whichSurface].lpDDSTex = NULL;
 3e55  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3e59  c7 80 00 00 00 00 
       00 00 00 00                       mov     dword ptr _gTex[eax],00000000H

					return FALSE;
				}
			}
 3e63  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 3e6a  e9 50 03 00 00                    jmp     L316

			++whichSurface;
			// get a pointer to the texture surface
 3e6f  ff 45 d0          L294            inc     dword ptr -30H[ebp]

			ZeroMemory (&(gTex[whichSurface].ddsd), sizeof (gTex[whichSurface].ddsd));
 3e72  bb 6c 00 00 00                    mov     ebx,0000006cH
 3e77  31 d2                             xor     edx,edx
 3e79  6b 4d d0 74                       imul    ecx,-30H[ebp],74H
 3e7d  b8 00 00 00 00                    mov     eax,offset _gTex
 3e82  01 c8                             add     eax,ecx
 3e84  83 c0 04                          add     eax,00000004H
 3e87  e8 00 00 00 00                    call    memset_

			gTex[whichSurface].ddsd.dwSize = sizeof (gTex[whichSurface].ddsd);
			// lock texture to fill ddsd member
 3e8c  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3e90  c7 80 04 00 00 00 
       6c 00 00 00                       mov     dword ptr _gTex+4H[eax],0000006cH

			ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Lock (gTex[whichSurface].lpDDSTex,
				NULL,
				&(gTex[whichSurface].ddsd),
				DDLOCK_SURFACEMEMORYPTR | DDLOCK_WAIT,
				NULL);
 3e9a  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3e9e  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3ea4  8b 10                             mov     edx,[eax]
 3ea6  6a 00                             push    00000000H
 3ea8  6a 01                             push    00000001H
 3eaa  6b 5d d0 74                       imul    ebx,-30H[ebp],74H
 3eae  b8 00 00 00 00                    mov     eax,offset _gTex
 3eb3  01 d8                             add     eax,ebx
 3eb5  83 c0 04                          add     eax,00000004H
 3eb8  50                                push    eax
 3eb9  6a 00                             push    00000000H
 3ebb  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3ebf  ff b0 00 00 00 00                 push    _gTex[eax]
 3ec5  ff 52 64                          call    dword ptr +64H[edx]
 3ec8  89 45 bc                          mov     -44H[ebp],eax

			if (ddretval == DDERR_SURFACELOST) gTex[whichSurface].lpDDSTex->lpVtbl->Restore (gTex[whichSurface].lpDDSTex);
 3ecb  81 7d bc c2 01 76 
       88                                cmp     dword ptr -44H[ebp],887601c2H
 3ed2  75 19                             jne     L295
 3ed4  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3ed8  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3ede  8b 10                             mov     edx,[eax]
 3ee0  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3ee4  ff b0 00 00 00 00                 push    _gTex[eax]
 3eea  ff 52 6c                          call    dword ptr +6cH[edx]

			p1=(short*)gTex[whichSurface].ddsd.lpSurface;
		}
		// scan line pixel counter
 3eed  6b 45 d0 74       L295            imul    eax,-30H[ebp],74H
 3ef1  8b 80 28 00 00 00                 mov     eax,_gTex+28H[eax]
 3ef7  89 45 c8                          mov     -38H[ebp],eax

		for (x=0; x<256; x+=1)
		{
			// read RGB
 3efa  c7 45 e0 00 00 00 
       00                L296            mov     dword ptr -20H[ebp],00000000H
 3f01  81 7d e0 00 01 00 
       00                L297            cmp     dword ptr -20H[ebp],00000100H
 3f08  7c 0a                             jl      L299
 3f0a  e9 ad 00 00 00                    jmp     L300
 3f0f  ff 45 e0          L298            inc     dword ptr -20H[ebp]
 3f12  eb ed                             jmp     L297

			memcpy (&b, (char*)bmdata + (y*pitch)+(3*x), sizeof (C3D_UINT8));
 3f14  bb 01 00 00 00    L299            mov     ebx,00000001H
 3f19  8b 55 e4                          mov     edx,-1cH[ebp]
 3f1c  0f af 55 cc                       imul    edx,-34H[ebp]
 3f20  03 55 c4                          add     edx,-3cH[ebp]
 3f23  8b 45 e0                          mov     eax,-20H[ebp]
 3f26  8d 04 40                          lea     eax,[eax+eax*2]
 3f29  01 c2                             add     edx,eax
 3f2b  8d 45 f4                          lea     eax,-0cH[ebp]
 3f2e  e8 00 00 00 00                    call    memcpy_

			memcpy (&g, (char*)bmdata + (y*pitch)+(3*x)+1, sizeof (C3D_UINT8));
 3f33  bb 01 00 00 00                    mov     ebx,00000001H
 3f38  8b 45 e4                          mov     eax,-1cH[ebp]
 3f3b  0f af 45 cc                       imul    eax,-34H[ebp]
 3f3f  8b 55 c4                          mov     edx,-3cH[ebp]
 3f42  01 c2                             add     edx,eax
 3f44  8b 45 e0                          mov     eax,-20H[ebp]
 3f47  8d 04 40                          lea     eax,[eax+eax*2]
 3f4a  01 d0                             add     eax,edx
 3f4c  8d 50 01                          lea     edx,+1H[eax]
 3f4f  8d 45 fc                          lea     eax,-4H[ebp]
 3f52  e8 00 00 00 00                    call    memcpy_

			memcpy (&r, (char*)bmdata + (y*pitch)+(3*x)+2, sizeof (C3D_UINT8));

			// pack color data in 16bpp format

//#define RGB_555
//#ifndef RGB_555
			// pack data in RGB 555 format
 3f57  bb 01 00 00 00                    mov     ebx,00000001H
 3f5c  8b 45 e4                          mov     eax,-1cH[ebp]
 3f5f  0f af 45 cc                       imul    eax,-34H[ebp]
 3f63  8b 55 c4                          mov     edx,-3cH[ebp]
 3f66  01 c2                             add     edx,eax
 3f68  8b 45 e0                          mov     eax,-20H[ebp]
 3f6b  8d 04 40                          lea     eax,[eax+eax*2]
 3f6e  01 d0                             add     eax,edx
 3f70  8d 50 02                          lea     edx,+2H[eax]
 3f73  8d 45 f8                          lea     eax,-8H[ebp]
 3f76  e8 00 00 00 00                    call    memcpy_

			rgb565 = ((C3D_UINT32)r & 0xf8) << 8 |
					 ((C3D_UINT32)g & 0xfc) << 3 |
					 ((C3D_UINT32)b & 0xf8) >> 3;
//#else
			// pack data in RGB 565 format
			//rgb565 = ((C3D_UINT32)r & 0xf8) << 7 |
					 //((C3D_UINT32)g & 0xf8) << 2 |
					 //((C3D_UINT32)b & 0xf8) >> 3;
//#endif
 3f7b  31 c0                             xor     eax,eax
 3f7d  8a 45 f8                          mov     al,-8H[ebp]
 3f80  25 f8 00 00 00                    and     eax,000000f8H
 3f85  c1 e0 08                          shl     eax,08H
 3f88  31 d2                             xor     edx,edx
 3f8a  8a 55 fc                          mov     dl,-4H[ebp]
 3f8d  81 e2 fc 00 00 00                 and     edx,000000fcH
 3f93  c1 e2 03                          shl     edx,03H
 3f96  09 c2                             or      edx,eax
 3f98  31 c0                             xor     eax,eax
 3f9a  8a 45 f4                          mov     al,-0cH[ebp]
 3f9d  25 f8 00 00 00                    and     eax,000000f8H
 3fa2  c1 e8 03                          shr     eax,03H
 3fa5  09 c2                             or      edx,eax
 3fa7  89 55 f0                          mov     -10H[ebp],edx

			*p1++=rgb565;
			// write texture data to texture cache
 3faa  8b 55 c8                          mov     edx,-38H[ebp]
 3fad  83 45 c8 02                       add     dword ptr -38H[ebp],00000002H
 3fb1  8b 45 f0                          mov     eax,-10H[ebp]
 3fb4  66 89 02                          mov     [edx],ax

		}
 3fb7  e9 53 ff ff ff                    jmp     L298

	}

 3fbc  e9 f4 fd ff ff    L300            jmp     L289

	ddretval = gTex[whichSurface].lpDDSTex->lpVtbl->Unlock (gTex[whichSurface].lpDDSTex,NULL);
 3fc1  6b 45 d0 74       L301            imul    eax,-30H[ebp],74H
 3fc5  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 3fcb  8b 10                             mov     edx,[eax]
 3fcd  6a 00                             push    00000000H
 3fcf  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 3fd3  ff b0 00 00 00 00                 push    _gTex[eax]
 3fd9  ff 92 80 00 00 00                 call    dword ptr +80H[edx]
 3fdf  89 45 bc                          mov     -44H[ebp],eax

	if (ddretval != DD_OK)
	{
 3fe2  83 7d bc 00                       cmp     dword ptr -44H[ebp],00000000H
 3fe6  74 4d                             je      L302

		wsprintf (gszErrMsg, "Error unlocking texture surface for file %s", lpszTexFilename);
 3fe8  8b 45 a4                          mov     eax,-5cH[ebp]
 3feb  50                                push    eax
 3fec  b8 61 04 00 00                    mov     eax,offset L355
 3ff1  50                                push    eax
 3ff2  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 3ff7  50                                push    eax
 3ff8  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 3fff  83 c4 0c                          add     esp,0000000cH

		gTex[whichSurface].lpDDSTex->lpVtbl->Release (gTex[whichSurface].lpDDSTex);
 4002  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 4006  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 400c  8b 10                             mov     edx,[eax]
 400e  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 4012  ff b0 00 00 00 00                 push    _gTex[eax]
 4018  ff 52 08                          call    dword ptr +8H[edx]

		gTex[whichSurface].lpDDSTex = NULL;
 401b  6b 45 d0 74                       imul    eax,-30H[ebp],74H
 401f  c7 80 00 00 00 00 
       00 00 00 00                       mov     dword ptr _gTex[eax],00000000H

		return FALSE;
	}
 4029  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 4030  e9 8a 01 00 00                    jmp     L316

    if( hFileMapping != NULL && pBase ) {
 4035  83 7d d8 00       L302            cmp     dword ptr -28H[ebp],00000000H
 4039  74 06                             je      L303
 403b  83 7d dc 00                       cmp     dword ptr -24H[ebp],00000000H
 403f  75 02                             jne     L304
 4041  eb 0b             L303            jmp     L305

        UnmapViewOfFile( pBase );
    }
 4043  8b 45 dc          L304            mov     eax,-24H[ebp]
 4046  50                                push    eax
 4047  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__UnmapViewOfFile@4

    if( hFileMapping != NULL ) {
 404e  83 7d d8 00       L305            cmp     dword ptr -28H[ebp],00000000H
 4052  74 12                             je      L306

        CloseHandle( hFileMapping );
 4054  8b 45 d8                          mov     eax,-28H[ebp]
 4057  50                                push    eax
 4058  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

        hFileMapping = NULL;
    }
	// close the texture file; we're done with it
 405f  c7 45 d8 00 00 00 
       00                                mov     dword ptr -28H[ebp],00000000H

	CloseHandle (hTexFile);


	//fp = open("menus.sjr",O_RDWR|O_CREAT);
 4066  8b 45 b4          L306            mov     eax,-4cH[ebp]
 4069  50                                push    eax
 406a  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__CloseHandle@4

	for(i=0;i<22;++i)//SJR
	{
	
		// fill a C3D_TMAP struct
 4071  c7 45 d4 00 00 00 
       00                                mov     dword ptr -2cH[ebp],00000000H
 4078  83 7d d4 16       L307            cmp     dword ptr -2cH[ebp],00000016H
 407c  7c 0a                             jl      L309
 407e  e9 35 01 00 00                    jmp     L315
 4083  ff 45 d4          L308            inc     dword ptr -2cH[ebp]
 4086  eb f0                             jmp     L307

		ZeroMemory (&TMap, sizeof (TMap));
 4088  bb 44 00 00 00    L309            mov     ebx,00000044H
 408d  31 d2                             xor     edx,edx
 408f  8d 85 28 ff ff ff                 lea     eax,-0d8H[ebp]
 4095  e8 00 00 00 00                    call    memset_

		TMap.u32Size = sizeof (TMap);

		// determine the maximum log2 dimension
 409a  c7 85 28 ff ff ff 
       44 00 00 00                       mov     dword ptr -0d8H[ebp],00000044H

		maxlog2 = 7;
 40a4  c7 45 ac 07 00 00 
       00                                mov     dword ptr -54H[ebp],00000007H

		for (k=0; k < maxlog2; k++)
		{
 40ab  c7 45 a8 00 00 00 
       00                                mov     dword ptr -58H[ebp],00000000H
 40b2  8b 45 a8          L310            mov     eax,-58H[ebp]
 40b5  3b 45 ac                          cmp     eax,-54H[ebp]
 40b8  7c 0a                             jl      L312
 40ba  eb 21                             jmp     L313
 40bc  8b 45 a8          L311            mov     eax,-58H[ebp]
 40bf  ff 45 a8                          inc     dword ptr -58H[ebp]
 40c2  eb ee                             jmp     L310

			TMap.apvLevels[k] = gTex[i].ddsd.lpSurface;
 40c4  6b 45 d4 74       L312            imul    eax,-2cH[ebp],74H
 40c8  8b 55 a8                          mov     edx,-58H[ebp]
 40cb  c1 e2 02                          shl     edx,02H
 40ce  8b 80 28 00 00 00                 mov     eax,_gTex+28H[eax]
 40d4  89 84 2a 30 ff ff 
       ff                                mov     -0d0H[edx+ebp],eax

		}

 40db  eb df                             jmp     L311

		TMap.bMipMap = FALSE;
 40dd  c7 85 2c ff ff ff 
       00 00 00 00       L313            mov     dword ptr -0d4H[ebp],00000000H

		TMap.u32MaxMapXSizeLg2 = 7;
 40e7  c7 85 5c ff ff ff 
       07 00 00 00                       mov     dword ptr -0a4H[ebp],00000007H

		TMap.u32MaxMapYSizeLg2 = 7;
 40f1  c7 85 60 ff ff ff 
       07 00 00 00                       mov     dword ptr -0a0H[ebp],00000007H

		TMap.eTexFormat = C3D_ETF_RGB565;
//JJS	TMap.bTexTranspEnable = FALSE;

 40fb  c7 85 64 ff ff ff 
       04 00 00 00                       mov     dword ptr -9cH[ebp],00000004H

		SET_CIF_COLOR (TMap.clrTexChromaKey, 0, 0, 0, 0);

		// register the texture
 4105  81 a5 68 ff ff ff 
       00 ff ff ff                       and     dword ptr -98H[ebp],0ffffff00H
 410f  8b 85 68 ff ff ff                 mov     eax,-98H[ebp]
 4115  c1 e0 10                          shl     eax,10H
 4118  81 a5 68 ff ff ff 
       ff 00 ff ff                       and     dword ptr -98H[ebp],0ffff00ffH
 4122  8b 85 68 ff ff ff                 mov     eax,-98H[ebp]
 4128  c1 e0 08                          shl     eax,08H
 412b  81 a5 68 ff ff ff 
       ff ff 00 ff                       and     dword ptr -98H[ebp],0ff00ffffH
 4135  8b 85 68 ff ff ff                 mov     eax,-98H[ebp]
 413b  81 a5 68 ff ff ff 
       ff ff ff 00                       and     dword ptr -98H[ebp],00ffffffH

		ecRetVal = ATI3DCIF_TextureReg (&TMap, &(gTex[i].hTX));
 4145  6b 45 d4 74                       imul    eax,-2cH[ebp],74H
 4149  ba 00 00 00 00                    mov     edx,offset _gTex
 414e  01 d0                             add     eax,edx
 4150  83 c0 70                          add     eax,00000070H
 4153  50                                push    eax
 4154  8d 85 28 ff ff ff                 lea     eax,-0d8H[ebp]
 415a  50                                push    eax
 415b  e8 00 00 00 00                    call    _ATI3DCIF_TextureReg@8
 4160  89 45 b0                          mov     -50H[ebp],eax

		if (ecRetVal != C3D_EC_OK)
		{
 4163  83 7d b0 00                       cmp     dword ptr -50H[ebp],00000000H
 4167  74 4a                             je      L314

			wsprintf (gszErrMsg, "Error registering texture for file %s", lpszTexFilename);
 4169  8b 45 a4                          mov     eax,-5cH[ebp]
 416c  50                                push    eax
 416d  b8 8d 04 00 00                    mov     eax,offset L356
 4172  50                                push    eax
 4173  b8 00 00 00 00                    mov     eax,offset _gszErrMsg
 4178  50                                push    eax
 4179  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__wsprintfA
 4180  83 c4 0c                          add     esp,0000000cH

			gTex[i].lpDDSTex->lpVtbl->Release (gTex[i].lpDDSTex);
 4183  6b 45 d4 74                       imul    eax,-2cH[ebp],74H
 4187  8b 80 00 00 00 00                 mov     eax,_gTex[eax]
 418d  8b 10                             mov     edx,[eax]
 418f  6b 45 d4 74                       imul    eax,-2cH[ebp],74H
 4193  ff b0 00 00 00 00                 push    _gTex[eax]
 4199  ff 52 08                          call    dword ptr +8H[edx]

			gTex[i].lpDDSTex = NULL;
 419c  6b 45 d4 74                       imul    eax,-2cH[ebp],74H
 41a0  c7 80 00 00 00 00 
       00 00 00 00                       mov     dword ptr _gTex[eax],00000000H

			return FALSE;
		}
 41aa  c7 45 ec 00 00 00 
       00                                mov     dword ptr -14H[ebp],00000000H
 41b1  eb 0c                             jmp     L316

	}

	//close(fp);
 41b3  e9 cb fe ff ff    L314            jmp     L308

	return TRUE;
 41b8  c7 45 ec 01 00 00 
       00                L315            mov     dword ptr -14H[ebp],00000001H

}

 41bf  8b 45 ec          L316            mov     eax,-14H[ebp]
 41c2  89 ec                             mov     esp,ebp
 41c4  5d                                pop     ebp
 41c5  5f                                pop     edi
 41c6  5e                                pop     esi
 41c7  5a                                pop     edx
 41c8  59                                pop     ecx
 41c9  5b                                pop     ebx
 41ca  c3                                ret     

BOOL JJSNewTexture(char *filename)
{
 41cb  53                JJSNewTexture_  push    ebx
 41cc  51                                push    ecx
 41cd  52                                push    edx
 41ce  56                                push    esi
 41cf  57                                push    edi
 41d0  55                                push    ebp
 41d1  89 e5                             mov     ebp,esp
 41d3  81 ec 08 00 00 00                 sub     esp,00000008H
 41d9  89 45 f8                          mov     -8H[ebp],eax

	return(JJSLoadTextureBMP (filename));
 41dc  8b 45 f8                          mov     eax,-8H[ebp]
 41df  e8 00 00 00 00                    call    JJSLoadTextureBMP_
 41e4  89 45 fc                          mov     -4H[ebp],eax

}

 41e7  8b 45 fc                          mov     eax,-4H[ebp]
 41ea  89 ec                             mov     esp,ebp
 41ec  5d                                pop     ebp
 41ed  5f                                pop     edi
 41ee  5e                                pop     esi
 41ef  5a                                pop     edx
 41f0  59                                pop     ecx
 41f1  5b                                pop     ebx
 41f2  c3                                ret     

BOOL SJRNewTexture(char *filename)
{
 41f3  53                SJRNewTexture_  push    ebx
 41f4  51                                push    ecx
 41f5  52                                push    edx
 41f6  56                                push    esi
 41f7  57                                push    edi
 41f8  55                                push    ebp
 41f9  89 e5                             mov     ebp,esp
 41fb  81 ec 08 00 00 00                 sub     esp,00000008H
 4201  89 45 f8                          mov     -8H[ebp],eax

	return(SJRLoadTextureBMP (filename));
 4204  8b 45 f8                          mov     eax,-8H[ebp]
 4207  e8 00 00 00 00                    call    SJRLoadTextureBMP_
 420c  89 45 fc                          mov     -4H[ebp],eax

}

 420f  8b 45 fc                          mov     eax,-4H[ebp]
 4212  89 ec                             mov     esp,ebp
 4214  5d                                pop     ebp
 4215  5f                                pop     edi
 4216  5e                                pop     esi
 4217  5a                                pop     edx
 4218  59                                pop     ecx
 4219  5b                                pop     ebx
 421a  c3                                ret     

void mpeganim(void)
{
	int fp;


	
	RECT prc;
	static char ReturnString[80],command[80];
 421b  53                mpeganim_       push    ebx
 421c  51                                push    ecx
 421d  52                                push    edx
 421e  56                                push    esi
 421f  57                                push    edi
 4220  55                                push    ebp
 4221  89 e5                             mov     ebp,esp
 4223  81 ec 18 00 00 00                 sub     esp,00000018H

	LPSTR lpszReturnString=ReturnString;	
 4229  c7 45 fc 46 29 00 
       00                                mov     dword ptr -4H[ebp],offset L361

       	dwMCIWndStyle = WS_CHILD |		// child window
            WS_VISIBLE |			// visible
            MCIWNDF_NOTIFYMODE |		// notifies of mode changes
            MCIWNDF_NOPLAYBAR;			// hides toolbar
        	                                    
	//make sure the movie's there
 4230  c7 05 00 00 00 00 
       82 01 00 50                       mov     dword ptr _dwMCIWndStyle,50000182H

	if ((fp = open("wipeout.mpg", O_RDONLY)) == -1)
		return;

 423a  6a 00                             push    00000000H
 423c  b8 b3 04 00 00                    mov     eax,offset L357
 4241  50                                push    eax
 4242  e8 00 00 00 00                    call    open_
 4247  83 c4 08                          add     esp,00000008H
 424a  89 45 f8                          mov     -8H[ebp],eax
 424d  83 7d f8 ff                       cmp     dword ptr -8H[ebp],0ffffffffH
 4251  74 74                             je      L318

	close(fp);

#if 0
	wsprintf(command,"open test.mpg type mpegvideo alias wipeout parent %d",hwnd);
	mciSendString(command,
		lpszReturnString, lstrlen(lpszReturnString),NULL);
	mciSendString("play wipeout fullscreen notify",
		lpszReturnString, lstrlen(lpszReturnString),hwnd);
	MPEGplaying=TRUE;
	do
	{
		do
		{

		ProcessMessages();
	}while(MPEGplaying);
	mciSendString("close wipeout",
		lpszReturnString, lstrlen(lpszReturnString),NULL);
#endif
#if 1
 4253  8b 45 f8                          mov     eax,-8H[ebp]
 4256  e8 00 00 00 00                    call    close_

	g_hwndMCIWnd = MCIWndCreate(hwnd,gInstance,dwMCIWndStyle,"\\wipeout.mpg");
 425b  b8 bf 04 00 00                    mov     eax,offset L358
 4260  50                                push    eax
 4261  ff 35 00 00 00 00                 push    _dwMCIWndStyle
 4267  ff 35 00 00 00 00                 push    _gInstance
 426d  ff 35 00 00 00 00                 push    _hwnd
 4273  e8 00 00 00 00                    call    _MCIWndCreateA
 4278  83 c4 10                          add     esp,00000010H
 427b  a3 00 00 00 00                    mov     _g_hwndMCIWnd,eax

	(LONG)MCIWndSM(g_hwndMCIWnd, MCI_PLAY, 0,MCI_MCIAVI_PLAY_FULLSCREEN);
	//MCIWndPlay(g_hwndMCIWnd);
 4280  68 00 00 00 02                    push    02000000H
 4285  6a 00                             push    00000000H
 4287  68 06 08 00 00                    push    00000806H
 428c  ff 35 00 00 00 00                 push    _g_hwndMCIWnd
 4292  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__SendMessageA@16

	MPEGplaying=TRUE;
	do
	{
 4299  c7 05 00 00 00 00 
       01 00 00 00                       mov     dword ptr _MPEGplaying,00000001H

		ProcessMessages();
 42a3  e8 00 00 00 00    L317            call    ProcessMessages_

	}while(MPEGplaying);
 42a8  83 3d 00 00 00 00 
       00                                cmp     dword ptr _MPEGplaying,00000000H
 42af  75 f2                             jne     L317

        MCIWndClose(g_hwndMCIWnd);
#endif

 42b1  6a 00                             push    00000000H
 42b3  6a 00                             push    00000000H
 42b5  68 04 08 00 00                    push    00000804H
 42ba  ff 35 00 00 00 00                 push    _g_hwndMCIWnd
 42c0  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__SendMessageA@16

}
#endif

 42c7  89 ec             L318            mov     esp,ebp
 42c9  5d                                pop     ebp
 42ca  5f                                pop     edi
 42cb  5e                                pop     esi
 42cc  5a                                pop     edx
 42cd  59                                pop     ecx
 42ce  5b                                pop     ebx
 42cf  c3                                ret     

void centreMouse(void)
{

 42d0  53                centreMouse_    push    ebx
 42d1  51                                push    ecx
 42d2  52                                push    edx
 42d3  56                                push    esi
 42d4  57                                push    edi
 42d5  55                                push    ebp
 42d6  89 e5                             mov     ebp,esp
 42d8  81 ec 00 00 00 00                 sub     esp,00000000H

	mouse_event(MOUSEEVENTF_ABSOLUTE|MOUSEEVENTF_MOVE,32768,32768,0,0);
 42de  6a 00                             push    00000000H
 42e0  6a 00                             push    00000000H
 42e2  68 00 80 00 00                    push    00008000H
 42e7  68 00 80 00 00                    push    00008000H
 42ec  68 01 80 00 00                    push    00008001H
 42f1  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__mouse_event@20

}

 42f8  5d                                pop     ebp
 42f9  5f                                pop     edi
 42fa  5e                                pop     esi
 42fb  5a                                pop     edx
 42fc  59                                pop     ecx
 42fd  5b                                pop     ebx
 42fe  c3                                ret     

void JJSReadJoystick(void)
{
	JOYINFO myJoy;
	MMRESULT errVal;

 42ff                    JJSReadJoystick_:
 42ff  53                                push    ebx
 4300  51                                push    ecx
 4301  52                                push    edx
 4302  56                                push    esi
 4303  57                                push    edi
 4304  55                                push    ebp
 4305  89 e5                             mov     ebp,esp
 4307  81 ec 14 00 00 00                 sub     esp,00000014H

	errVal = joyGetPos(JOYSTICKID1,&myJoy);

 430d  8d 45 ec                          lea     eax,-14H[ebp]
 4310  50                                push    eax
 4311  6a 00                             push    00000000H
 4313  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__joyGetPos@8
 431a  89 45 fc                          mov     -4H[ebp],eax

	JoyXVal = myJoy.wXpos >> 8;
 431d  8b 45 ec                          mov     eax,-14H[ebp]
 4320  c1 e8 08                          shr     eax,08H
 4323  66 a3 00 00 00 00                 mov     _JoyXVal,ax

	JoyYVal = myJoy.wYpos >> 8;

 4329  8b 45 f0                          mov     eax,-10H[ebp]
 432c  c1 e8 08                          shr     eax,08H
 432f  66 a3 00 00 00 00                 mov     _JoyYVal,ax

	JoyButton1 = myJoy.wButtons & 0x0001;
 4335  8b 45 f8                          mov     eax,-8H[ebp]
 4338  25 01 00 00 00                    and     eax,00000001H
 433d  66 a3 00 00 00 00                 mov     _JoyButton1,ax

	JoyButton2 = myJoy.wButtons & 0x0002;
 4343  8b 45 f8                          mov     eax,-8H[ebp]
 4346  25 02 00 00 00                    and     eax,00000002H
 434b  66 a3 00 00 00 00                 mov     _JoyButton2,ax

}

 4351  89 ec                             mov     esp,ebp
 4353  5d                                pop     ebp
 4354  5f                                pop     edi
 4355  5e                                pop     esi
 4356  5a                                pop     edx
 4357  59                                pop     ecx
 4358  5b                                pop     ebx
 4359  c3                                ret     

void JJSJoyConfig(void)
{
	JOYCAPS mycaps;
	UINT joyrange;
 435a  53                JJSJoyConfig_   push    ebx
 435b  51                                push    ecx
 435c  52                                push    edx
 435d  56                                push    esi
 435e  57                                push    edi
 435f  55                                push    ebp
 4360  89 e5                             mov     ebp,esp
 4362  81 ec 98 01 00 00                 sub     esp,00000198H

	joyGetDevCaps(JOYSTICKID1,&mycaps,sizeof(mycaps));

	
 4368  68 94 01 00 00                    push    00000194H
 436d  8d 85 68 fe ff ff                 lea     eax,-198H[ebp]
 4373  50                                push    eax
 4374  6a 00                             push    00000000H
 4376  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__joyGetDevCapsA@12

	joyrange = mycaps.wXmax - mycaps.wXmin;
 437d  8b 85 90 fe ff ff                 mov     eax,-170H[ebp]
 4383  2b 85 8c fe ff ff                 sub     eax,-174H[ebp]
 4389  89 45 fc                          mov     -4H[ebp],eax

	joySetThreshold(JOYSTICKID1, 128/joyrange);//only 256 messages
 438c  31 d2                             xor     edx,edx
 438e  b8 80 00 00 00                    mov     eax,00000080H
 4393  f7 75 fc                          div     dword ptr -4H[ebp]
 4396  50                                push    eax
 4397  6a 00                             push    00000000H
 4399  2e ff 15 00 00 00 
       00                                call    dword ptr cs:__imp__joySetThreshold@8

	joyModVal = 128/32768;

	
 43a0  c7 05 00 00 00 00 
       00 00 00 00                       mov     dword ptr _joyModVal,00000000H

}
 43aa  89 ec                             mov     esp,ebp
 43ac  5d                                pop     ebp
 43ad  5f                                pop     edi
 43ae  5e                                pop     esi
 43af  5a                                pop     edx
 43b0  59                                pop     ecx
 43b1  5b                                pop     ebx
 43b2  c3                                ret     

No disassembly errors

------------------------------------------------------------

Segment: CONST  DWORD USE32  000004cc bytes  
 0000  77 69 70 65 6f 75 74 5c L319            - wipeout\
 0008  6e 65 77 67 72 61 70 68                 - newgraph
 0010  5c 6d 65 6e 75 5c 70 61                 - \menu\pa
 0018  67 65 31 32 2e 73 6a 72                 - ge12.sjr
 0020  00                                      - .
 0021  77 69 70 65 6f 75 74 5c L320            - wipeout\
 0029  6e 65 77 67 72 61 70 68                 - newgraph
 0031  5c 6d 65 6e 75 5c 70 61                 - \menu\pa
 0039  67 65 31 35 2e 73 6a 72                 - ge15.sjr
 0041  00                                      - .
 0042  77 69 70 65 6f 75 74 5c L321            - wipeout\
 004a  6e 65 77 67 72 61 70 68                 - newgraph
 0052  5c 6d 65 6e 75 5c 70 61                 - \menu\pa
 005a  67 65 31 37 2e 73 6a 72                 - ge17.sjr
 0062  00                                      - .
 0063  de 71 8a 8e e4 f2 6f 3f L322            - .q....o?
 006b  57 49 50 45 4f 55 54 00 L323            - WIPEOUT.
 0073  57 49 50 45 4f 55 54 20 L324            - WIPEOUT 
 007b  27 39 35 00                             - '95.
 007f  43 6f 75 6c 64 20 6e 6f L325            - Could no
 0087  74 20 63 72 65 61 74 65                 - t create
 008f  20 74 65 78 74 75 72 65                 -  texture
 0097  20 73 75 72 66 61 63 65                 -  surface
 009f  00                                      - .
 00a0  43 6f 75 6c 64 20 6e 6f L326            - Could no
 00a8  74 20 63 72 65 61 74 65                 - t create
 00b0  20 74 65 78 74 75 72 65                 -  texture
 00b8  20 73 75 72 66 61 63 65                 -  surface
 00c0  00                                      - .
 00c1  63 3a 77 69 70 65 6f 75 L327            - c:wipeou
 00c9  74 00                                   - t.
 00cb  43 6f 75 6c 64 20 6e 6f L328            - Could no
 00d3  74 20 69 6e 69 74 69 61                 - t initia
 00db  6c 69 7a 65 20 33 44 20                 - lize 3D 
 00e3  64 72 69 76 65 72 00                    - driver.
 00ea  43 6f 75 6c 64 20 6e 6f L329            - Could no
 00f2  74 20 63 72 65 61 74 65                 - t create
 00fa  20 33 44 20 72 65 6e 64                 -  3D rend
 0102  65 72 69 6e 67 20 63 6f                 - ering co
 010a  6e 74 65 78 74 00                       - ntext.
 0110  00 00 00 00 00 00 70 3f L330            - ......p?
 0118  00 00 00 00 00 00 70 3f L331            - ......p?
 0120  00 00 00 00 00 00 70 3f L332            - ......p?
 0128  00 00 00 00 00 00 70 3f L333            - ......p?
 0130  4c 6f 61 64 54 65 78 74 L334            - LoadText
 0138  75 72 65 20 25 73 3a 20                 - ure %s: 
 0140  69 6e 76 61 6c 69 64 20                 - invalid 
 0148  70 6f 69 6e 74 65 72 00                 - pointer.
 0150  43 6f 75 6c 64 20 6e 6f L335            - Could no
 0158  74 20 6f 70 65 6e 20 74                 - t open t
 0160  65 78 74 75 72 65 20 6d                 - exture m
 0168  61 70 20 66 69 6c 65 00                 - ap file.
 0170  45 72 72 6f 72 20 67 65 L336            - Error ge
 0178  74 74 69 6e 67 20 74 65                 - tting te
 0180  78 74 75 72 65 20 66 69                 - xture fi
 0188  6c 65 20 73 69 7a 65 00                 - le size.
 0190  43 6f 75 6c 64 20 6e 6f L337            - Could no
 0198  74 20 61 6c 6c 6f 63 61                 - t alloca
 01a0  74 65 20 6d 65 6d 6f 72                 - te memor
 01a8  79 20 66 6f 72 20 74 65                 - y for te
 01b0  78 74 75 72 65 20 6d 61                 - xture ma
 01b8  70 20 64 61 74 61 00                    - p data.
 01bf  45 72 72 6f 72 20 72 65 L338            - Error re
 01c7  61 64 69 6e 67 20 66 69                 - ading fi
 01cf  6c 65 20 68 65 61 64 65                 - le heade
 01d7  72 00                                   - r.
 01d9  45 72 72 6f 72 20 72 65 L339            - Error re
 01e1  61 64 69 6e 67 20 62 69                 - ading bi
 01e9  74 6d 61 70 20 68 65 61                 - tmap hea
 01f1  64 65 72 20 61 6e 64 20                 - der and 
 01f9  64 61 74 61 00                          - data.
 01fe  57 69 64 74 68 20 6f 66 L340            - Width of
 0206  20 74 65 78 74 75 72 65                 -  texture
 020e  20 25 73 20 67 72 65 61                 -  %s grea
 0216  74 65 72 20 74 68 61 6e                 - ter than
 021e  20 31 30 32 34 20 6f 72                 -  1024 or
 0226  20 6e 6f 74 20 61 20 70                 -  not a p
 022e  6f 77 65 72 20 6f 66 20                 - ower of 
 0236  32 00                                   - 2.
 0238  48 65 69 67 68 74 20 6f L341            - Height o
 0240  66 20 74 65 78 74 75 72                 - f textur
 0248  65 20 25 73 20 67 72 65                 - e %s gre
 0250  61 74 65 72 20 74 68 61                 - ater tha
 0258  6e 20 31 30 32 34 20 6f                 - n 1024 o
 0260  72 20 6e 6f 74 20 61 20                 - r not a 
 0268  70 6f 77 65 72 20 6f 66                 - power of
 0270  20 32 00                                -  2.
 0273  43 6f 75 6c 64 20 6e 6f L342            - Could no
 027b  74 20 63 72 65 61 74 65                 - t create
 0283  20 74 65 78 74 75 72 65                 -  texture
 028b  20 73 75 72 66 61 63 65                 -  surface
 0293  20 66 6f 72 20 66 69 6c                 -  for fil
 029b  65 20 25 73 00                          - e %s.
 02a0  45 72 72 6f 72 20 75 6e L343            - Error un
 02a8  6c 6f 63 6b 69 6e 67 20                 - locking 
 02b0  74 65 78 74 75 72 65 20                 - texture 
 02b8  73 75 72 66 61 63 65 20                 - surface 
 02c0  66 6f 72 20 66 69 6c 65                 - for file
 02c8  20 25 73 00                             -  %s.
 02cc  45 72 72 6f 72 20 72 65 L344            - Error re
 02d4  67 69 73 74 65 72 69 6e                 - gisterin
 02dc  67 20 74 65 78 74 75 72                 - g textur
 02e4  65 20 66 6f 72 20 66 69                 - e for fi
 02ec  6c 65 20 25 73 00                       - le %s.
 02f2  55 6e 6c 6f 61 64 54 65 L345            - UnloadTe
 02fa  78 74 75 72 65 3a 20 69                 - xture: i
 0302  6e 76 61 6c 69 64 20 70                 - nvalid p
 030a  6f 69 6e 74 65 72 00                    - ointer.
 0311  43 6f 75 6c 64 20 6e 6f L346            - Could no
 0319  74 20 6f 70 65 6e 20 74                 - t open t
 0321  65 78 74 75 72 65 20 6d                 - exture m
 0329  61 70 20 66 69 6c 65 00                 - ap file.
 0331  45 72 72 6f 72 20 75 6e L347            - Error un
 0339  6c 6f 63 6b 69 6e 67 20                 - locking 
 0341  74 65 78 74 75 72 65 20                 - texture 
 0349  73 75 72 66 61 63 65 20                 - surface 
 0351  66 6f 72 20 66 69 6c 65                 - for file
 0359  20 25 73 00                             -  %s.
 035d  45 72 72 6f 72 20 72 65 L348            - Error re
 0365  67 69 73 74 65 72 69 6e                 - gisterin
 036d  67 20 74 65 78 74 75 72                 - g textur
 0375  65 20 66 6f 72 20 66 69                 - e for fi
 037d  6c 65 20 25 73 00                       - le %s.
 0383  43 6f 75 6c 64 20 6e 6f L349            - Could no
 038b  74 20 6f 70 65 6e 20 74                 - t open t
 0393  65 78 74 75 72 65 20 6d                 - exture m
 039b  61 70 20 66 69 6c 65 00                 - ap file.
 03a3  45 72 72 6f 72 20 75 6e L350            - Error un
 03ab  6c 6f 63 6b 69 6e 67 20                 - locking 
 03b3  74 65 78 74 75 72 65 20                 - texture 
 03bb  73 75 72 66 61 63 65 20                 - surface 
 03c3  66 6f 72 20 66 69 6c 65                 - for file
 03cb  20 25 73 00                             -  %s.
 03cf  45 72 72 6f 72 20 72 65 L351            - Error re
 03d7  67 69 73 74 65 72 69 6e                 - gisterin
 03df  67 20 74 65 78 74 75 72                 - g textur
 03e7  65 20 66 6f 72 20 66 69                 - e for fi
 03ef  6c 65 20 25 73 00                       - le %s.
 03f5  43 6f 75 6c 64 20 6e 6f L352            - Could no
 03fd  74 20 6f 70 65 6e 20 74                 - t open t
 0405  65 78 74 75 72 65 20 6d                 - exture m
 040d  61 70 20 66 69 6c 65 00                 - ap file.
 0415  45 72 72 6f 72 20 67 65 L353            - Error ge
 041d  74 74 69 6e 67 20 74 65                 - tting te
 0425  78 74 75 72 65 20 66 69                 - xture fi
 042d  6c 65 20 73 69 7a 65 00                 - le size.
 0435  45 72 72 6f 72 20 75 6e L354            - Error un
 043d  6c 6f 63 6b 69 6e 67 20                 - locking 
 0445  74 65 78 74 75 72 65 20                 - texture 
 044d  73 75 72 66 61 63 65 20                 - surface 
 0455  66 6f 72 20 66 69 6c 65                 - for file
 045d  20 25 73 00                             -  %s.
 0461  45 72 72 6f 72 20 75 6e L355            - Error un
 0469  6c 6f 63 6b 69 6e 67 20                 - locking 
 0471  74 65 78 74 75 72 65 20                 - texture 
 0479  73 75 72 66 61 63 65 20                 - surface 
 0481  66 6f 72 20 66 69 6c 65                 - for file
 0489  20 25 73 00                             -  %s.
 048d  45 72 72 6f 72 20 72 65 L356            - Error re
 0495  67 69 73 74 65 72 69 6e                 - gisterin
 049d  67 20 74 65 78 74 75 72                 - g textur
 04a5  65 20 66 6f 72 20 66 69                 - e for fi
 04ad  6c 65 20 25 73 00                       - le %s.
 04b3  77 69 70 65 6f 75 74 2e L357            - wipeout.
 04bb  6d 70 67 00                             - mpg.
 04bf  5c 77 69 70 65 6f 75 74 L358            - \wipeout
 04c7  2e 6d 70 67 00                          - .mpg.

No disassembly errors

------------------------------------------------------------

Segment: _DATA  DWORD USE32  000000a7 bytes  
 0000  03 00 00 00             _quad           - ....
 0004  04 00 00 00             _shade          - ....
 0008  00 00 00 00             _light          - ....
 000c  00 00 00 00             _eDstAlpha      - ....
 0010  01 00 00 00             _eSrcAlpha      - ....
 0014  02 00 00 00             _ePerspCor      - ....
 0018  00 00 00 00             _eTexFilter     - ....
 001c  ff ff                   _texpage        - ..
 001e  00 00                   _numvert        - ..
 0020  00 00                   _tester         - ..
 0022  00 00 00 00             _Rendering      - ....
 0026  00 00 00 00             _bTexEn         - ....
 002a  00 00 00 00             _trans          - ....
 002e  00 00 00 00             _backLocked     - ....
 0032  50 61 67 65 20 46 6c 69 _szMsg          - Page Fli
 003a  70 70 69 6e 67 20 54 65                 - pping Te
 0042  73 74 3a 20 50 72 65 73                 - st: Pres
 004a  73 20 46 31 32 20 74 6f                 - s F12 to
 0052  20 65 78 69 74 00                       -  exit.
 0058  46 72 6f 6e 74 20 62 75 _szFrontMsg     - Front bu
 0060  66 66 65 72 20 28 46 31                 - ffer (F1
 0068  32 20 74 6f 20 71 75 69                 - 2 to qui
 0070  74 29 00                                - t).
 0073  42 61 63 6b 20 62 75 66 _szBackMsg      - Back buf
 007b  66 65 72 20 28 46 31 32                 - fer (F12
 0083  20 74 6f 20 71 75 69 74                 -  to quit
 008b  29 00                                   - ).
 008d  00 00 00 00             _old_pitch      - ....
 0091  00 00 00 00             L359            - ....
 0095  00 00                   _jjstestsrc     - ..
 0097  00 00                   _jjstestdst     - ..
 0099  80 00                   _jjstest3       - ..
 009b  00 00 00 00             L360            DD      DGROUP:L319
 009f  21 00 00 00                             DD      DGROUP:L320
 00a3  42 00 00 00                             DD      DGROUP:L321

No disassembly errors

------------------------------------------------------------

Segment: _BSS  DWORD USE32  000029e6 bytes  

No disassembly errors

------------------------------------------------------------

Segment: $$SYMBOLS  BYTE USE16  0000169c bytes  
 0000  13 12                                   - ..
 0002  00 00 00 00 00 00                       DP      _ddPalette
 0008  81 ff 64 64 50 61 6c 65                 - ..ddPale
 0010  74 74 65 12 12                          - tte..
 0015  00 00 00 00 00 00                       DP      _randlist
 001b  82 00 72 61 6e 64 6c 69                 - ..randli
 0023  73 74 14 12                             - st..
 0027  00 00 00 00 00 00                       DP      _ATIpalette
 002d  82 03 41 54 49 70 61 6c                 - ..ATIpal
 0035  65 74 74 65 13 12                       - ette..
 003b  00 00 00 00 00 00                       DP      _testarray
 0041  82 06 74 65 73 74 61 72                 - ..testar
 0049  72 61 79 12 12                          - ray..
 004e  00 00 00 00 00 00                       DP      _testlist
 0054  82 09 74 65 73 74 6c 69                 - ..testli
 005c  73 74 13 12                             - st..
 0060  00 00 00 00 00 00                       DP      _gszErrMsg
 0066  82 0a 67 73 7a 45 72 72                 - ..gszErr
 006e  4d 73 67 12 12                          - Msg..
 0073  00 00 00 00 00 00                       DP      _backDdsd
 0079  82 16 62 61 63 6b 44 64                 - ..backDd
 0081  73 64 0e 12                             - sd..
 0085  00 00 00 00 00 00                       DP      _ddsd
 008b  82 16 64 64 73 64 12 12                 - ..ddsd..
 0093  00 00 00 00 00 00                       DP      _old_pitch
 0099  08 6f 6c 64 5f 70 69 74                 - .old_pit
 00a1  63 68 0e 12                             - ch..
 00a5  00 00 00 00 00 00                       DP      _hwnd
 00ab  80 8f 68 77 6e 64 13 12                 - ..hwnd..
 00b3  00 00 00 00 00 00                       DP      _backLocked
 00b9  1a 62 61 63 6b 4c 6f 63                 - .backLoc
 00c1  6b 65 64 13 12                          - ked..
 00c6  00 00 00 00 00 00                       DP      _backscreen
 00cc  0b 62 61 63 6b 73 63 72                 - .backscr
 00d4  65 65 6e 10 12                          - een..
 00d9  00 00 00 00 00 00                       DP      _bActive
 00df  1a 62 41 63 74 69 76 65                 - .bActive
 00e7  17 12                                   - ..
 00e9  00 00 00 00 00 00                       DP      _lpBack_Buffer
 00ef  82 26 6c 70 42 61 63 6b                 - .&lpBack
 00f7  5f 42 75 66 66 65 72 13                 - _Buffer.
 00ff  12                                      - .
 0100  00 00 00 00 00 00                       DP      _lpDDSBack
 0106  82 26 6c 70 44 44 53 42                 - .&lpDDSB
 010e  61 63 6b 13 12                          - ack..
 0113  00 00 00 00 00 00                       DP      _RealScreen
 0119  0b 52 65 61 6c 53 63 72                 - .RealScr
 0121  65 65 6e 0e 12                          - een..
 0126  00 00 00 00 00 00                       DP      _lpDD
 012c  82 94 6c 70 44 44 16 12                 - ..lpDD..
 0134  00 00 00 00 00 00                       DP      _RealBackPitch
 013a  08 52 65 61 6c 42 61 63                 - .RealBac
 0142  6b 50 69 74 63 68 12 12                 - kPitch..
 014a  00 00 00 00 00 00                       DP      _RealPitch
 0150  08 52 65 61 6c 50 69 74                 - .RealPit
 0158  63 68 16 12                             - ch..
 015c  00 00 00 00 00 00                       DP      _lpDDSPrimary
 0162  82 26 6c 70 44 44 53 50                 - .&lpDDSP
 016a  72 69 6d 61 72 79 12 12                 - rimary..
 0172  00 00 00 00 00 00                       DP      _joyModVal
 0178  1d 6a 6f 79 4d 6f 64 56                 - .joyModV
 0180  61 6c 11 12                             - al..
 0184  00 00 00 00 00 00                       DP      _randnum
 018a  83 11 72 61 6e 64 6e 75                 - ..randnu
 0192  6d 14 12                                - m..
 0195  00 00 00 00 00 00                       DP      _SaveDirBase
 019b  0b 53 61 76 65 44 69 72                 - .SaveDir
 01a3  42 61 73 65 12 12                       - Base..
 01a9  00 00 00 00 00 00                       DP      _gInstance
 01af  6a 67 49 6e 73 74 61 6e                 - jgInstan
 01b7  63 65 0f 12                             - ce..
 01bb  00 00 00 00 00 00                       DP      _shade
 01c1  83 13 73 68 61 64 65 12                 - ..shade.
 01c9  12                                      - .
 01ca  00 00 00 00 00 00                       DP      _gbCIFInit
 01d0  1a 67 62 43 49 46 49 6e                 - .gbCIFIn
 01d8  69 74 14 12                             - it..
 01dc  00 00 00 00 00 00                       DP      _eTexFilter
 01e2  83 15 65 54 65 78 46 69                 - ..eTexFi
 01ea  6c 74 65 72 13 12                       - lter..
 01f0  00 00 00 00 00 00                       DP      _eSrcAlpha
 01f6  83 17 65 53 72 63 41 6c                 - ..eSrcAl
 01fe  70 68 61 12 12                          - pha..
 0203  00 00 00 00 00 00                       DP      _Rendering
 0209  1a 52 65 6e 64 65 72 69                 - .Renderi
 0211  6e 67 16 12                             - ng..
 0215  00 00 00 00 00 00                       DP      _dwMCIWndStyle
 021b  19 64 77 4d 43 49 57 6e                 - .dwMCIWn
 0223  64 53 74 79 6c 65 0e 12                 - dStyle..
 022b  00 00 00 00 00 00                       DP      _ghRC
 0231  81 fa 67 68 52 43 13 12                 - ..ghRC..
 0239  00 00 00 00 00 00                       DP      _eDstAlpha
 023f  83 19 65 44 73 74 41 6c                 - ..eDstAl
 0247  70 68 61 0e 12                          - pha..
 024c  00 00 00 00 00 00                       DP      _quad
 0252  83 1b 71 75 61 64 0f 12                 - ..quad..
 025a  00 00 00 00 00 00                       DP      _light
 0260  83 1d 6c 69 67 68 74 0e                 - ..light.
 0268  12                                      - .
 0269  00 00 00 00 00 00                       DP      _trans
 026f  1a 74 72 61 6e 73 0f 12                 - .trans..
 0277  00 00 00 00 00 00                       DP      _bTexEn
 027d  1a 62 54 65 78 45 6e 13                 - .bTexEn.
 0285  12                                      - .
 0286  00 00 00 00 00 00                       DP      _ePerspCor
 028c  83 1f 65 50 65 72 73 70                 - ..ePersp
 0294  43 6f 72 14 12                          - Cor..
 0299  00 00 00 00 00 00                       DP      _MPEGplaying
 029f  1a 4d 50 45 47 70 6c 61                 - .MPEGpla
 02a7  79 69 6e 67 16 12                       - ying..
 02ad  00 00 00 00 00 00                       DP      _g_hwndMCIWnd
 02b3  80 8f 67 5f 68 77 6e 64                 - ..g_hwnd
 02bb  4d 43 49 57 6e 64 0e 12                 - MCIWnd..
 02c3  00 00 00 00 00 00                       DP      _gTex
 02c9  83 22 67 54 65 78 14 12                 - ."gTex..
 02d1  00 00 00 00 00 00                       DP      _DebugScreen
 02d7  0b 44 65 62 75 67 53 63                 - .DebugSc
 02df  72 65 65 6e 12 12                       - reen..
 02e5  00 00 00 00 00 00                       DP      _dwICValue
 02eb  19 64 77 49 43 56 61 6c                 - .dwICVal
 02f3  75 65 0f 12                             - ue..
 02f7  00 00 00 00 00 00                       DP      _szMsg
 02fd  83 23 73 7a 4d 73 67 13                 - .#szMsg.
 0305  12                                      - .
 0306  00 00 00 00 00 00                       DP      _szBackMsg
 030c  83 24 73 7a 42 61 63 6b                 - .$szBack
 0314  4d 73 67 11 12                          - Msg..
 0319  00 00 00 00 00 00                       DP      _jjstest3
 031f  06 6a 6a 73 74 65 73 74                 - .jjstest
 0327  33 13 12                                - 3..
 032a  00 00 00 00 00 00                       DP      _jjstestdst
 0330  06 6a 6a 73 74 65 73 74                 - .jjstest
 0338  64 73 74 13 12                          - dst..
 033d  00 00 00 00 00 00                       DP      _jjstestsrc
 0343  06 6a 6a 73 74 65 73 74                 - .jjstest
 034b  73 72 63 13 12                          - src..
 0350  00 00 00 00 00 00                       DP      _JoyButton1
 0356  06 4a 6f 79 42 75 74 74                 - .JoyButt
 035e  6f 6e 31 13 12                          - on1..
 0363  00 00 00 00 00 00                       DP      _JoyButton2
 0369  06 4a 6f 79 42 75 74 74                 - .JoyButt
 0371  6f 6e 32 0c 12                          - on2..
 0376  00 00 00 00 00 00                       DP      _ctr
 037c  06 63 74 72 0f 12                       - .ctr..
 0382  00 00 00 00 00 00                       DP      _tester
 0388  06 74 65 73 74 65 72 10                 - .tester.
 0390  12                                      - .
 0391  00 00 00 00 00 00                       DP      _texpage
 0397  06 74 65 78 70 61 67 65                 - .texpage
 039f  10 12                                   - ..
 03a1  00 00 00 00 00 00                       DP      _numvert
 03a7  06 6e 75 6d 76 65 72 74                 - .numvert
 03af  14 12                                   - ..
 03b1  00 00 00 00 00 00                       DP      _szFrontMsg
 03b7  83 25 73 7a 46 72 6f 6e                 - .%szFron
 03bf  74 4d 73 67 08 32                       - tMsg.2
 03c5  00 00 00 00 00 00                       DP      _ICDecompressEx@56
 03cb  25 24 00 00 00 00 7d 00                 - %$....}.
 03d3  00 00 00 00 0c 09 10 00                 - ........
 03db  00 00 83 2a 30 1c 00 49                 - ...*0..I
 03e3  43 44 65 63 6f 6d 70 72                 - CDecompr
 03eb  65 73 73 45 78 09 11 10                 - essEx...
 03f3  14 81 4e 68 69 63 0c 11                 - ..Nhic..
 03fb  10 18 19 64 77 46 6c 61                 - ...dwFla
 0403  67 73 0d 11 10 1c 83 29                 - gs.....)
 040b  6c 70 62 69 53 72 63 0a                 - lpbiSrc.
 0413  11 10 20 35 6c 70 53 72                 - .. 5lpSr
 041b  63 09 11 10 24 08 78 53                 - c...$.xS
 0423  72 63 09 11 10 28 08 79                 - rc...(.y
 042b  53 72 63 0a 11 10 2c 08                 - Src...,.
 0433  64 78 53 72 63 0a 11 10                 - dxSrc...
 043b  30 08 64 79 53 72 63 0d                 - 0.dySrc.
 0443  11 10 34 83 29 6c 70 62                 - ..4.)lpb
 044b  69 44 73 74 0a 11 10 38                 - iDst...8
 0453  35 6c 70 44 73 74 09 11                 - 5lpDst..
 045b  10 3c 08 78 44 73 74 09                 - .<.xDst.
 0463  11 10 40 08 79 44 73 74                 - ..@.yDst
 046b  0a 11 10 44 08 64 78 44                 - ...D.dxD
 0473  73 74 0a 11 10 48 08 64                 - st...H.d
 047b  79 44 73 74 08 11 10 c8                 - yDst....
 0483  83 2c 69 63 2a 24 7d 00                 - .,ic*$}.
 048b  00 00 7d 00 00 00 00 00                 - ..}.....
 0493  0c 09 10 00 00 00 83 2a                 - .......*
 049b  30 1c 00 49 43 44 65 63                 - 0..ICDec
 04a3  6f 6d 70 72 65 73 73 45                 - ompressE
 04ab  78 42 65 67 69 6e 09 11                 - xBegin..
 04b3  10 14 81 4e 68 69 63 0c                 - ...Nhic.
 04bb  11 10 18 19 64 77 46 6c                 - ....dwFl
 04c3  61 67 73 0d 11 10 1c 83                 - ags.....
 04cb  29 6c 70 62 69 53 72 63                 - )lpbiSrc
 04d3  0a 11 10 20 35 6c 70 53                 - ... 5lpS
 04db  72 63 09 11 10 24 08 78                 - rc...$.x
 04e3  53 72 63 09 11 10 28 08                 - Src...(.
 04eb  79 53 72 63 0a 11 10 2c                 - ySrc...,
 04f3  08 64 78 53 72 63 0a 11                 - .dxSrc..
 04fb  10 30 08 64 79 53 72 63                 - .0.dySrc
 0503  0d 11 10 34 83 29 6c 70                 - ...4.)lp
 050b  62 69 44 73 74 0a 11 10                 - biDst...
 0513  38 35 6c 70 44 73 74 09                 - 85lpDst.
 051b  11 10 3c 08 78 44 73 74                 - ..<.xDst
 0523  09 11 10 40 08 79 44 73                 - ...@.yDs
 052b  74 0a 11 10 44 08 64 78                 - t...D.dx
 0533  44 73 74 0a 11 10 48 08                 - Dst...H.
 053b  64 79 44 73 74 08 11 10                 - dyDst...
 0543  c8 83 2c 69 63 2a 24 fa                 - ..,ic*$.
 054b  00 00 00 7d 00 00 00 00                 - ...}....
 0553  00 0c 09 10 00 00 00 83                 - ........
 055b  2a 30 1c 00 49 43 44 65                 - *0..ICDe
 0563  63 6f 6d 70 72 65 73 73                 - compress
 056b  45 78 51 75 65 72 79 09                 - ExQuery.
 0573  11 10 14 81 4e 68 69 63                 - ....Nhic
 057b  0c 11 10 18 19 64 77 46                 - .....dwF
 0583  6c 61 67 73 0d 11 10 1c                 - lags....
 058b  83 29 6c 70 62 69 53 72                 - .)lpbiSr
 0593  63 0a 11 10 20 35 6c 70                 - c... 5lp
 059b  53 72 63 09 11 10 24 08                 - Src...$.
 05a3  78 53 72 63 09 11 10 28                 - xSrc...(
 05ab  08 79 53 72 63 0a 11 10                 - .ySrc...
 05b3  2c 08 64 78 53 72 63 0a                 - ,.dxSrc.
 05bb  11 10 30 08 64 79 53 72                 - ..0.dySr
 05c3  63 0d 11 10 34 83 29 6c                 - c...4.)l
 05cb  70 62 69 44 73 74 0a 11                 - pbiDst..
 05d3  10 38 35 6c 70 44 73 74                 - .85lpDst
 05db  09 11 10 3c 08 78 44 73                 - ...<.xDs
 05e3  74 09 11 10 40 08 79 44                 - t...@.yD
 05eb  73 74 0a 11 10 44 08 64                 - st...D.d
 05f3  78 44 73 74 0a 11 10 48                 - xDst...H
 05fb  08 64 79 44 73 74 08 11                 - .dyDst..
 0603  10 c8 83 2c 69 63 2a 24                 - ...,ic*$
 060b  77 01 00 00 59 00 00 00                 - w...Y...
 0613  00 00 0c 09 10 00 00 00                 - ........
 061b  83 2d 30 1c 00 49 43 44                 - .-0..ICD
 0623  72 61 77 53 75 67 67 65                 - rawSugge
 062b  73 74 46 6f 72 6d 61 74                 - stFormat
 0633  09 11 10 14 81 4e 68 69                 - .....Nhi
 063b  63 0c 11 10 18 83 29 6c                 - c.....)l
 0643  70 62 69 49 6e 0d 11 10                 - pbiIn...
 064b  1c 83 29 6c 70 62 69 4f                 - ..)lpbiO
 0653  75 74 0a 11 10 20 08 64                 - ut... .d
 065b  78 53 72 63 0a 11 10 24                 - xSrc...$
 0663  08 64 79 53 72 63 0a 11                 - .dySrc..
 066b  10 28 08 64 78 44 73 74                 - .(.dxDst
 0673  0a 11 10 2c 08 64 79 44                 - ...,.dyD
 067b  73 74 0f 11 10 30 81 4e                 - st...0.N
 0683  68 69 63 44 65 63 6f 6d                 - hicDecom
 068b  70 08 11 10 e0 83 2f 69                 - p...../i
 0693  63 26 24 d0 01 00 00 41                 - c&$....A
 069b  00 00 00 00 00 0c 09 10                 - ........
 06a3  00 00 00 83 32 30 1c 00                 - ....20..
 06ab  49 43 53 65 74 53 74 61                 - ICSetSta
 06b3  74 75 73 50 72 6f 63 09                 - tusProc.
 06bb  11 10 14 81 4e 68 69 63                 - ....Nhic
 06c3  0c 11 10 18 19 64 77 46                 - .....dwF
 06cb  6c 61 67 73 0c 11 10 1c                 - lags....
 06d3  80 8e 6c 50 61 72 61 6d                 - ..lParam
 06db  10 11 10 20 83 31 66 70                 - ... .1fp
 06e3  66 6e 53 74 61 74 75 73                 - fnStatus
 06eb  08 11 10 f0 83 35 69 63                 - .....5ic
 06f3  21 24 11 02 00 00 c5 00                 - !$......
 06fb  00 00 00 00 0e 09 18 00                 - ........
 0703  00 00 83 36 00 00 66 69                 - ...6..fi
 070b  6e 69 4f 62 6a 65 63 74                 - niObject
 0713  73 06 11 10 fc 08 69 0c                 - s.....i.
 071b  23 43 04 00 00 0a 01 00                 - #C......
 0723  00 6e 07 09 11 10 a8 06                 - .n......
 072b  78 70 6f 73 0c 11 10 a4                 - xpos....
 0733  06 62 75 74 74 6f 6e 73                 - .buttons
 073b  09 11 10 ac 05 74 65 6d                 - .....tem
 0743  70 0c 23 6e 05 00 00 6b                 - p.#n...k
 074b  01 00 00 6e 07 0a 11 10                 - ...n....
 0753  8c 06 78 74 65 6d 70 0b                 - ..xtemp.
 075b  11 10 88 06 66 77 4b 65                 - ....fwKe
 0763  79 73 09 11 10 90 05 74                 - ys.....t
 076b  65 6d 70 21 24 d6 02 00                 - emp!$...
 0773  00 61 05 00 00 00 00 0c                 - .a......
 077b  09 10 00 00 00 83 37 30                 - ......70
 0783  1c 00 57 69 6e 64 6f 77                 - ..Window
 078b  50 72 6f 63 0a 11 10 14                 - Proc....
 0793  80 8f 68 57 6e 64 0c 11                 - ..hWnd..
 079b  10 18 3a 6d 65 73 73 61                 - ..:messa
 07a3  67 65 0c 11 10 1c 80 8c                 - ge......
 07ab  77 50 61 72 61 6d 0c 11                 - wParam..
 07b3  10 20 80 8d 6c 50 61 72                 - . ..lPar
 07bb  61 6d 08 11 10 b0 83 3b                 - am.....;
 07c3  70 73 0b 11 10 fc 05 6b                 - ps.....k
 07cb  65 79 68 69 74 0a 11 10                 - eyhit...
 07d3  f8 06 44 65 76 49 44 0e                 - ..DevID.
 07db  11 10 f0 2d 4e 6f 74 69                 - ...-Noti
 07e3  66 79 4d 73 67 2f 24 37                 - fyMsg/$7
 07eb  08 00 00 1a 01 00 00 00                 - ........
 07f3  00 0e 09 18 00 00 00 83                 - ........
 07fb  3c 30 1c 01 30 1c 53 65                 - <0..0.Se
 0803  74 53 75 72 66 61 63 65                 - tSurface
 080b  49 6e 74 6f 41 54 49 33                 - IntoATI3
 0813  44 43 49 46 0b 11 10 f0                 - DCIF....
 081b  82 26 6c 70 44 44 53 0a                 - .&lpDDS.
 0823  11 10 84 82 16 64 64 73                 - .....dds
 082b  64 0e 11 10 f4 81 90 64                 - d......d
 0833  64 72 65 74 76 61 6c 0b                 - dretval.
 083b  11 10 f8 83 3e 65 50 69                 - ....>ePi
 0843  78 46 0c 23 67 0f 00 00                 - xF.#g...
 084b  3a 00 00 00 59 08 08 11                 - :...Y...
 0853  11 d0 fd 83 3f 70 21 24                 - ....?p!$
 085b  51 09 00 00 67 06 00 00                 - Q...g...
 0863  00 00 0d 08 14 00 00 00                 - ........
 086b  83 40 30 1c 02 30 1c 30                 - .@0..0.0
 0873  1f 64 6f 49 6e 69 74 0e                 - .doInit.
 087b  11 10 d8 6a 68 49 6e 73                 - ...jhIns
 0883  74 61 6e 63 65 0d 11 10                 - tance...
 088b  dc 08 6e 43 6d 64 53 68                 - ..nCmdSh
 0893  6f 77 08 11 10 b0 83 44                 - ow.....D
 089b  77 63 0b 11 11 44 ff 82                 - wc...D..
 08a3  16 64 64 73 64 0d 11 10                 - .ddsd...
 08ab  e0 82 13 64 64 73 63 61                 - ...ddsca
 08b3  70 73 0d 11 11 98 fe 82                 - ps......
 08bb  b0 64 64 63 61 70 73 0e                 - .ddcaps.
 08c3  11 11 ec fd 82 b0 64 64                 - ......dd
 08cb  63 61 70 73 32 0c 11 10                 - caps2...
 08d3  e4 81 90 64 64 72 76 61                 - ...ddrva
 08db  6c 0e 11 10 e8 81 90 64                 - l......d
 08e3  64 72 65 74 76 61 6c 06                 - dretval.
 08eb  11 10 ec 08 69 15 11 10                 - ....i...
 08f3  f4 05 53 74 61 74 42 61                 - ..StatBa
 08fb  6e 6b 53 77 69 74 63 68                 - nkSwitch
 0903  65 64 13 11 10 fc 05 53                 - ed.....S
 090b  74 61 74 42 6c 74 53 74                 - tatBltSt
 0913  72 65 74 63 68 0c 11 10                 - retch...
 091b  f8 05 53 74 61 74 42 6c                 - ..StatBl
 0923  74 23 24 b8 0f 00 00 10                 - t#$.....
 092b  01 00 00 00 00 0c 07 10                 - ........
 0933  00 00 00 83 45 00 03 30                 - ....E..0
 093b  1c 30 1f 30 1d 43 6f 70                 - .0.0.Cop
 0943  79 50 61 6c 0c 11 10 ec                 - yPal....
 094b  0b 70 61 6c 65 74 74 65                 - .palette
 0953  0a 11 10 f8 06 73 74 61                 - .....sta
 095b  72 74 08 11 10 fc 06 65                 - rt.....e
 0963  6e 64 0c 11 10 f0 81 90                 - nd......
 096b  64 64 72 76 61 6c 06 11                 - ddrval..
 0973  10 f4 08 69 1f 24 c8 10                 - ...i.$..
 097b  00 00 5c 00 00 00 00 00                 - ..\.....
 0983  0e 09 18 00 00 00 81 88                 - ........
 098b  00 00 69 6e 69 74 72 61                 - ..initra
 0993  6e 64 79 06 11 10 fc 06                 - ndy.....
 099b  69 1b 24 24 11 00 00 57                 - i.$$...W
 09a3  00 00 00 00 00 0e 09 18                 - ........
 09ab  00 00 00 83 46 48 00 72                 - ....FH.r
 09b3  61 6e 64 79 08 11 10 f8                 - andy....
 09bb  06 6e 75 6d 1e 24 7b 11                 - .num.${.
 09c3  00 00 dd 00 00 00 00 00                 - ........
 09cb  0c 09 10 00 00 00 83 47                 - .......G
 09d3  30 1c 00 57 69 6e 4d 61                 - 0..WinMa
 09db  69 6e 0f 11 10 14 80 ab                 - in......
 09e3  68 49 6e 73 74 61 6e 63                 - hInstanc
 09eb  65 13 11 10 18 80 ab 68                 - e......h
 09f3  50 72 65 76 49 6e 73 74                 - PrevInst
 09fb  61 6e 63 65 0e 11 10 1c                 - ance....
 0a03  58 6c 70 43 6d 64 4c 69                 - XlpCmdLi
 0a0b  6e 65 0d 11 10 20 08 6e                 - ne... .n
 0a13  43 6d 64 53 68 6f 77 08                 - CmdShow.
 0a1b  11 10 f4 2d 74 6d 70 0b                 - ...-tmp.
 0a23  11 10 f8 08 72 65 74 76                 - ....retv
 0a2b  61 6c 26 24 58 12 00 00                 - al&$X...
 0a33  75 00 00 00 00 00 0e 09                 - u.......
 0a3b  18 00 00 00 83 48 30 1c                 - .....H0.
 0a43  00 50 72 6f 63 65 73 73                 - .Process
 0a4b  4d 65 73 73 61 67 65 73                 - Messages
 0a53  09 11 10 e0 83 4e 6d 73                 - .....Nms
 0a5b  67 25 24 cd 12 00 00 0f                 - g%$.....
 0a63  01 00 00 00 00 0e 09 18                 - ........
 0a6b  00 00 00 83 48 30 1c 00                 - ....H0..
 0a73  4c 6f 63 6b 42 61 63 6b                 - LockBack
 0a7b  42 75 66 66 65 72 08 11                 - Buffer..
 0a83  10 f4 26 70 74 72 0c 11                 - ..&ptr..
 0a8b  10 f8 81 90 64 64 72 76                 - ....ddrv
 0a93  61 6c 1d 24 dc 13 00 00                 - al.$....
 0a9b  1e 00 00 00 00 00 0e 07                 - ........
 0aa3  18 00 00 00 83 36 00 00                 - .....6..
 0aab  57 69 6e 42 65 65 70 26                 - WinBeep&
 0ab3  24 fa 13 00 00 4c 00 00                 - $....L..
 0abb  00 00 00 0e 07 18 00 00                 - ........
 0ac3  00 83 36 00 00 55 6e 6c                 - ..6..Unl
 0acb  6f 63 6b 42 61 63 6b 42                 - ockBackB
 0ad3  75 66 66 65 72 26 24 46                 - uffer&$F
 0adb  14 00 00 d7 00 00 00 00                 - ........
 0ae3  00 0e 09 18 00 00 00 83                 - ........
 0aeb  48 30 1c 00 4c 6f 63 6b                 - H0..Lock
 0af3  43 6c 65 61 72 42 75 66                 - ClearBuf
 0afb  66 65 72 08 11 10 f4 26                 - fer....&
 0b03  70 74 72 0c 11 10 f8 81                 - ptr.....
 0b0b  90 64 64 72 76 61 6c 27                 - .ddrval'
 0b13  24 1d 15 00 00 37 00 00                 - $....7..
 0b1b  00 00 00 0e 07 18 00 00                 - ........
 0b23  00 83 36 00 00 55 6e 6c                 - ..6..Unl
 0b2b  6f 63 6b 43 6c 65 61 72                 - ockClear
 0b33  42 75 66 66 65 72 26 24                 - Buffer&$
 0b3b  54 15 00 00 c3 00 00 00                 - T.......
 0b43  00 00 0e 09 18 00 00 00                 - ........
 0b4b  83 36 00 00 42 6c 74 43                 - .6..BltC
 0b53  6c 65 61 72 54 6f 53 63                 - learToSc
 0b5b  72 65 65 6e 0f 11 10 d8                 - reen....
 0b63  82 5d 64 65 73 74 5f 72                 - .]dest_r
 0b6b  65 63 74 0e 11 10 e8 82                 - ect.....
 0b73  5d 73 72 63 5f 72 65 63                 - ]src_rec
 0b7b  74 0c 11 10 f8 19 64 77                 - t.....dw
 0b83  46 6c 61 67 73 0e 11 11                 - Flags...
 0b8b  74 ff 82 31 44 44 42 6c                 - t..1DDBl
 0b93  74 46 58 0c 11 10 fc 81                 - tFX.....
 0b9b  90 64 64 72 76 61 6c 0c                 - .ddrval.
 0ba3  23 2e 16 00 00 48 00 00                 - #....H..
 0bab  00 ba 0b 0c 11 10 fc 81                 - ........
 0bb3  90 64 64 72 76 61 6c 1c                 - .ddrval.
 0bbb  24 17 16 00 00 68 00 00                 - $....h..
 0bc3  00 00 00 0e 09 18 00 00                 - ........
 0bcb  00 83 36 00 00 44 44 53                 - ..6..DDS
 0bd3  77 61 70 0c 23 35 17 00                 - wap.#5..
 0bdb  00 48 00 00 00 ee 0b 0c                 - .H......
 0be3  11 10 88 81 90 64 64 72                 - .....ddr
 0beb  76 61 6c 1c 24 7f 16 00                 - val.$...
 0bf3  00 07 01 00 00 00 00 0e                 - ........
 0bfb  09 18 00 00 00 83 36 00                 - ......6.
 0c03  00 44 72 61 77 49 54 0a                 - .DrawIT.
 0c0b  11 10 8c 82 16 64 64 73                 - .....dds
 0c13  64 08 11 10 f8 26 70 74                 - d....&pt
 0c1b  72 0c 11 10 fc 81 90 64                 - r......d
 0c23  64 72 76 61 6c 13 11 21                 - drval..!
 0c2b  91 00 00 00 00 00                       DP      DGROUP:L359
 0c31  08 65 72 72 5f 63 6f 75                 - .err_cou
 0c39  6e 74 1d 24 86 17 00 00                 - nt.$....
 0c41  28 00 00 00 00 00 0e 07                 - (.......
 0c49  18 00 00 00 83 36 00 00                 - .....6..
 0c51  57 69 6e 51 75 69 74 26                 - WinQuit&
 0c59  24 ae 17 00 00 57 00 00                 - $....W..
 0c61  00 00 00 0e 09 18 00 00                 - ........
 0c69  00 83 4f 00 01 30 1c 57                 - ..O..0.W
 0c71  69 6e 43 6c 65 61 72 53                 - inClearS
 0c79  63 72 65 65 6e 0b 11 10                 - creen...
 0c81  fc 05 63 6f 6c 6f 75 72                 - ..colour
 0c89  0d 11 10 98 82 31 64 64                 - .....1dd
 0c91  62 6c 74 66 78 27 24 05                 - bltfx'$.
 0c99  18 00 00 70 00 00 00 00                 - ...p....
 0ca1  00 0c 07 10 00 00 00 83                 - ........
 0ca9  51 00 03 30 1c 30 1f 30                 - Q..0.0.0
 0cb1  1d 50 69 74 63 68 4d 65                 - .PitchMe
 0cb9  6d 43 70 79 09 11 10 f0                 - mCpy....
 0cc1  0b 64 65 73 74 0b 11 10                 - .dest...
 0cc9  f4 0b 73 6f 75 72 63 65                 - ..source
 0cd1  0a 11 10 f8 83 50 72 65                 - .....Pre
 0cd9  63 74 09 11 10 fc 08 6c                 - ct.....l
 0ce1  6f 6f 70 2c 24 75 18 00                 - oop,$u..
 0ce9  00 77 00 00 00 00 00 0d                 - .w......
 0cf1  08 14 00 00 00 83 52 00                 - ......R.
 0cf9  02 30 1c 30 1f 50 69 74                 - .0.0.Pit
 0d01  63 68 4d 65 6d 43 70 79                 - chMemCpy
 0d09  33 32 30 58 32 30 30 09                 - 320X200.
 0d11  11 10 f8 0b 64 65 73 74                 - ....dest
 0d19  0b 11 10 f4 0b 73 6f 75                 - .....sou
 0d21  72 63 65 0a 11 10 e4 82                 - rce.....
 0d29  5d 72 65 63 74 09 11 10                 - ]rect...
 0d31  fc 08 6c 6f 6f 70 20 24                 - ..loop $
 0d39  ec 18 00 00 28 00 00 00                 - ....(...
 0d41  00 00 0e 07 18 00 00 00                 - ........
 0d49  83 36 00 00 53 65 74 43                 - .6..SetC
 0d51  6f 6e 74 65 78 74 23 24                 - ontext#$
 0d59  14 19 00 00 37 00 00 00                 - ....7...
 0d61  00 00 0e 07 18 00 00 00                 - ........
 0d69  83 36 00 00 43 6c 6f 73                 - .6..Clos
 0d71  65 41 54 49 33 44 43 49                 - eATI3DCI
 0d79  46 23 24 4b 19 00 00 7c                 - F#$K...|
 0d81  00 00 00 00 00 0e 09 18                 - ........
 0d89  00 00 00 83 53 30 1c 00                 - ....S0..
 0d91  49 6e 69 74 41 54 49 33                 - InitATI3
 0d99  44 43 49 46 24 24 c7 19                 - DCIF$$..
 0da1  00 00 92 00 00 00 00 00                 - ........
 0da9  0e 07 18 00 00 00 83 36                 - .......6
 0db1  00 00 73 65 74 52 65 6e                 - ..setRen
 0db9  64 65 72 42 65 67 69 6e                 - derBegin
 0dc1  22 24 59 1a 00 00 2d 00                 - "$Y...-.
 0dc9  00 00 00 00 0e 07 18 00                 - ........
 0dd1  00 00 83 36 00 00 73 65                 - ...6..se
 0dd9  74 52 65 6e 64 65 72 45                 - tRenderE
 0de1  6e 64 1e 24 86 1a 00 00                 - nd.$....
 0de9  5c 00 00 00 00 00 0e 07                 - \.......
 0df1  18 00 00 00 83 36 00 00                 - .....6..
 0df9  73 65 6e 64 4c 69 73 74                 - sendList
 0e01  27 24 e2 1a 00 00 0b 02                 - '$......
 0e09  00 00 00 00 0b 08 0c 00                 - ........
 0e11  00 00 83 54 30 1c 04 30                 - ...T0..0
 0e19  1c 30 1f 30 1d 30 1e 53                 - .0.0.0.S
 0e21  65 74 53 74 61 74 65 0a                 - etState.
 0e29  11 10 e4 83 1b 51 75 61                 - .....Qua
 0e31  64 0b 11 10 e8 83 13 53                 - d......S
 0e39  68 61 64 65 0b 11 10 ec                 - hade....
 0e41  1a 42 54 65 78 45 6e 0a                 - .BTexEn.
 0e49  11 10 f0 1a 54 72 61 6e                 - ....Tran
 0e51  73 0b 11 10 10 83 1d 4c                 - s......L
 0e59  69 67 68 74 0b 11 10 f4                 - ight....
 0e61  1a 63 68 61 6e 67 65 0b                 - .change.
 0e69  11 10 f8 81 fb 63 68 6b                 - .....chk
 0e71  65 79 29 24 ed 1c 00 00                 - ey)$....
 0e79  8d 03 00 00 00 00 0c 07                 - ........
 0e81  10 00 00 00 83 58 00 03                 - .....X..
 0e89  30 1c 30 1f 30 1d 4a 4a                 - 0.0.0.JJ
 0e91  53 44 72 61 77 53 70 72                 - SDrawSpr
 0e99  69 74 65 08 11 10 e4 83                 - ite.....
 0ea1  57 73 70 06 11 10 f4 06                 - Wsp.....
 0ea9  77 06 11 10 f0 06 68 07                 - w.....h.
 0eb1  11 10 ec 82 08 76 0b 11                 - .....v..
 0eb9  10 e8 81 fb 63 68 6b 65                 - ....chke
 0ec1  79 0a 11 10 f8 06 74 70                 - y.....tp
 0ec9  61 67 65 0b 11 10 fc 06                 - age.....
 0ed1  74 72 61 6e 73 6c 22 24                 - transl"$
 0ed9  7a 20 00 00 34 00 00 00                 - z ..4...
 0ee1  00 00 0e 09 18 00 00 00                 - ........
 0ee9  83 5c 00 01 30 1c 4a 4a                 - .\..0.JJ
 0ef1  53 5f 53 70 72 69 74 65                 - S_Sprite
 0ef9  08 11 10 fc 83 5b 73 70                 - .....[sp
 0f01  23 24 ae 20 00 00 2c 00                 - #$. ..,.
 0f09  00 00 00 00 0e 09 18 00                 - ........
 0f11  00 00 83 5d 00 01 30 1c                 - ...]..0.
 0f19  4a 4a 53 5f 53 70 72 69                 - JJS_Spri
 0f21  74 65 38 08 11 10 fc 83                 - te8.....
 0f29  57 73 70 0c 23 5c 21 00                 - Wsp.#\!.
 0f31  00 6d 00 00 00 3e 0f 06                 - .m...>..
 0f39  11 10 e8 08 72 26 24 da                 - ....r&$.
 0f41  20 00 00 4b 01 00 00 00                 -  ..K....
 0f49  00 0b 06 0c 00 00 00 83                 - ........
 0f51  5e 00 04 30 1c 30 1f 30                 - ^..0.0.0
 0f59  1d 30 1e 73 65 74 43 6f                 - .0.setCo
 0f61  6c 6f 72 07 11 10 f0 82                 - lor.....
 0f69  08 76 06 11 10 f4 05 72                 - .v.....r
 0f71  06 11 10 f8 05 67 06 11                 - .....g..
 0f79  10 fc 05 62 25 24 25 22                 - ...b%$%"
 0f81  00 00 58 01 00 00 00 00                 - ..X.....
 0f89  0e 09 18 00 00 00 83 62                 - .......b
 0f91  00 01 30 1c 4a 4a 53 44                 - ..0.JJSD
 0f99  72 61 77 50 6f 6c 79 46                 - rawPolyF
 0fa1  34 07 11 10 f8 83 61 70                 - 4.....ap
 0fa9  07 11 10 fc 82 08 76 25                 - ......v%
 0fb1  24 7d 23 00 00 58 01 00                 - $}#..X..
 0fb9  00 00 00 0e 09 18 00 00                 - ........
 0fc1  00 83 66 00 01 30 1c 4a                 - ..f..0.J
 0fc9  4a 53 44 72 61 77 50 6f                 - JSDrawPo
 0fd1  6c 79 47 34 07 11 10 f8                 - lyG4....
 0fd9  83 65 70 07 11 10 fc 82                 - .ep.....
 0fe1  08 76 26 24 d5 24 00 00                 - .v&$.$..
 0fe9  e1 02 00 00 00 00 0e 09                 - ........
 0ff1  18 00 00 00 83 6a 00 01                 - .....j..
 0ff9  30 1c 4a 4a 53 44 72 61                 - 0.JJSDra
 1001  77 50 6f 6c 79 46 54 34                 - wPolyFT4
 1009  07 11 10 f4 83 69 70 07                 - .....ip.
 1011  11 10 f8 82 08 76 0b 11                 - .....v..
 1019  10 fc 81 fb 63 68 6b 65                 - ....chke
 1021  79 25 24 b6 27 00 00 1e                 - y%$.'...
 1029  01 00 00 00 00 0e 09 18                 - ........
 1031  00 00 00 83 62 00 01 30                 - ....b..0
 1039  1c 4a 4a 53 44 72 61 77                 - .JJSDraw
 1041  50 6f 6c 79 46 33 07 11                 - PolyF3..
 1049  10 f8 83 61 70 07 11 10                 - ...ap...
 1051  fc 82 08 76 25 24 d4 28                 - ...v%$.(
 1059  00 00 1e 01 00 00 00 00                 - ........
 1061  0e 09 18 00 00 00 83 6e                 - .......n
 1069  00 01 30 1c 4a 4a 53 44                 - ..0.JJSD
 1071  72 61 77 50 6f 6c 79 47                 - rawPolyG
 1079  33 07 11 10 f8 83 6d 70                 - 3.....mp
 1081  07 11 10 fc 82 08 76 26                 - ......v&
 1089  24 f2 29 00 00 22 02 00                 - $.).."..
 1091  00 00 00 0e 09 18 00 00                 - ........
 1099  00 83 72 00 01 30 1c 4a                 - ..r..0.J
 10a1  4a 53 44 72 61 77 50 6f                 - JSDrawPo
 10a9  6c 79 46 54 33 07 11 10                 - lyFT3...
 10b1  f8 83 71 70 07 11 10 fc                 - ..qp....
 10b9  82 08 76 26 24 14 2c 00                 - ..v&$.,.
 10c1  00 22 02 00 00 00 00 0e                 - ."......
 10c9  09 18 00 00 00 83 76 00                 - ......v.
 10d1  01 30 1c 4a 4a 53 44 72                 - .0.JJSDr
 10d9  61 77 50 6f 6c 79 47 54                 - awPolyGT
 10e1  33 07 11 10 f8 83 75 70                 - 3.....up
 10e9  07 11 10 fc 82 08 76 29                 - ......v)
 10f1  24 36 2e 00 00 31 07 00                 - $6...1..
 10f9  00 00 00 0d 08 14 00 00                 - ........
 1101  00 83 7a 30 1c 02 30 1c                 - ..z0..0.
 1109  30 1f 4c 6f 61 64 54 65                 - 0.LoadTe
 1111  78 74 75 72 65 42 4d 50                 - xtureBMP
 1119  15 11 10 ac 83 77 6c 70                 - .....wlp
 1121  73 7a 54 65 78 46 69 6c                 - szTexFil
 1129  65 6e 61 6d 65 0a 11 10                 - ename...
 1131  b0 83 79 70 54 65 78 0e                 - ..ypTex.
 1139  11 10 b4 81 90 64 64 72                 - .....ddr
 1141  65 74 76 61 6c 0b 11 10                 - etval...
 1149  c8 81 e9 6c 6f 67 32 58                 - ...log2X
 1151  0b 11 10 cc 81 e9 6c 6f                 - ......lo
 1159  67 32 59 0b 11 11 30 ff                 - g2Y...0.
 1161  83 81 54 4d 61 70 06 11                 - ..TMap..
 1169  10 b8 08 6b 0c 11 10 bc                 - ...k....
 1171  08 6d 61 78 6c 6f 67 32                 - .maxlog2
 1179  0e 11 10 c0 83 83 65 63                 - ......ec
 1181  52 65 74 56 61 6c 0d 11                 - RetVal..
 1189  10 c4 6a 68 54 65 78 46                 - ..jhTexF
 1191  69 6c 65 0a 11 10 9c 83                 - ile.....
 1199  86 62 6d 66 68 0b 11 11                 - .bmfh...
 11a1  74 ff 83 87 62 6d 69 68                 - t...bmih
 11a9  0d 11 10 d0 81 e9 62 75                 - ......bu
 11b1  66 73 69 7a 65 0a 11 10                 - fsize...
 11b9  d4 34 70 74 6d 61 70 0b                 - .4ptmap.
 11c1  11 10 d8 34 62 6d 64 61                 - ...4bmda
 11c9  74 61 0b 11 10 dc 81 e9                 - ta......
 11d1  70 69 74 63 68 07 11 10                 - pitch...
 11d9  fc 81 eb 72 07 11 10 f8                 - ...r....
 11e1  81 eb 67 07 11 10 f4 81                 - ..g.....
 11e9  eb 62 0c 11 10 f0 81 ea                 - .b......
 11f1  72 67 62 35 36 35 0e 11                 - rgb565..
 11f9  10 e4 19 62 79 74 65 73                 - ...bytes
 1201  72 65 61 64 06 11 10 e8                 - read....
 1209  08 78 06 11 10 ec 08 79                 - .x.....y
 1211  26 24 67 35 00 00 7d 00                 - &$g5..}.
 1219  00 00 00 00 0e 09 18 00                 - ........
 1221  00 00 83 88 30 1c 01 30                 - ....0..0
 1229  1c 55 6e 6c 6f 61 64 54                 - .UnloadT
 1231  65 78 74 75 72 65 0a 11                 - exture..
 1239  10 f8 83 79 70 54 65 78                 - ...ypTex
 1241  2a 24 e4 35 00 00 44 03                 - *$.5..D.
 1249  00 00 00 00 0e 09 18 00                 - ........
 1251  00 00 83 89 30 1c 01 30                 - ....0..0
 1259  1c 53 4a 52 4c 6f 61 64                 - .SJRLoad
 1261  54 65 78 74 75 72 65 42                 - TextureB
 1269  4d 50 15 11 10 b8 83 77                 - MP.....w
 1271  6c 70 73 7a 54 65 78 46                 - lpszTexF
 1279  69 6c 65 6e 61 6d 65 07                 - ilename.
 1281  11 10 c0 08 66 70 0e 11                 - ....fp..
 1289  10 bc 81 90 64 64 72 65                 - ....ddre
 1291  74 76 61 6c 0b 11 11 74                 - tval...t
 1299  ff 83 81 54 4d 61 70 06                 - ...TMap.
 12a1  11 10 c4 08 6b 0c 11 10                 - ....k...
 12a9  c8 08 6d 61 78 6c 6f 67                 - ..maxlog
 12b1  32 0e 11 10 cc 83 83 65                 - 2......e
 12b9  63 52 65 74 56 61 6c 0d                 - cRetVal.
 12c1  11 10 d0 6a 68 54 65 78                 - ...jhTex
 12c9  46 69 6c 65 0d 11 10 d4                 - File....
 12d1  81 e9 62 75 66 73 69 7a                 - ..bufsiz
 12d9  65 11 11 10 d8 08 77 68                 - e.....wh
 12e1  69 63 68 53 75 72 66 61                 - ichSurfa
 12e9  63 65 06 11 10 dc 08 69                 - ce.....i
 12f1  0c 11 10 e0 2d 74 65 78                 - ....-tex
 12f9  73 69 7a 65 09 11 10 e4                 - size....
 1301  83 8a 70 74 72 0c 11 10                 - ..ptr...
 1309  e8 0b 62 6d 70 64 61 74                 - ..bmpdat
 1311  61 07 11 10 ec 0b 70 31                 - a.....p1
 1319  08 11 10 f0 81 5b 70 32                 - .....[p2
 1321  08 11 10 f4 81 5b 74 32                 - .....[t2
 1329  06 11 10 fc 07 74 25 24                 - .....t%$
 1331  28 39 00 00 28 03 00 00                 - (9..(...
 1339  00 00 0e 09 18 00 00 00                 - ........
 1341  83 53 30 1c 00 4a 4a 53                 - .S0..JJS
 1349  4c 6f 61 64 53 70 72 69                 - LoadSpri
 1351  74 65 73 07 11 10 cc 08                 - tes.....
 1359  66 70 0e 11 10 c8 81 90                 - fp......
 1361  64 64 72 65 74 76 61 6c                 - ddretval
 1369  0a 11 10 84 83 81 54 4d                 - ......TM
 1371  61 70 06 11 10 d0 08 6b                 - ap.....k
 1379  0c 11 10 d4 08 6d 61 78                 - .....max
 1381  6c 6f 67 32 0e 11 10 d8                 - log2....
 1389  83 83 65 63 52 65 74 56                 - ..ecRetV
 1391  61 6c 0d 11 10 dc 6a 68                 - al....jh
 1399  54 65 78 46 69 6c 65 0d                 - TexFile.
 13a1  11 10 e0 81 e9 62 75 66                 - .....buf
 13a9  73 69 7a 65 06 11 10 e4                 - size....
 13b1  08 69 07 11 10 e8 08 73                 - .i.....s
 13b9  70 0c 11 10 ec 2d 74 65                 - p....-te
 13c1  78 73 69 7a 65 09 11 10                 - xsize...
 13c9  f0 83 8a 70 74 72 0c 11                 - ...ptr..
 13d1  10 f4 0b 62 6d 70 64 61                 - ...bmpda
 13d9  74 61 07 11 10 f8 0b 70                 - ta.....p
 13e1  31 1a 11 21                             - 1..!
 13e5  9b 00 00 00 00 00                       DP      DGROUP:L360
 13eb  83 8b 6c 70 73 7a 54 65                 - ..lpszTe
 13f3  78 46 69 6c 65 6e 61 6d                 - xFilenam
 13fb  65 2a 24 50 3c 00 00 7b                 - e*$P<..{
 1403  05 00 00 00 00 0e 09 18                 - ........
 140b  00 00 00 83 89 30 1c 01                 - .....0..
 1413  30 1c 4a 4a 53 4c 6f 61                 - 0.JJSLoa
 141b  64 54 65 78 74 75 72 65                 - dTexture
 1423  42 4d 50 15 11 10 a4 83                 - BMP.....
 142b  77 6c 70 73 7a 54 65 78                 - wlpszTex
 1433  46 69 6c 65 6e 61 6d 65                 - Filename
 143b  07 11 10 b8 08 66 70 0e                 - .....fp.
 1443  11 10 bc 81 90 64 64 72                 - .....ddr
 144b  65 74 76 61 6c 0b 11 11                 - etval...
 1453  28 ff 83 81 54 4d 61 70                 - (...TMap
 145b  06 11 10 a8 08 6b 0c 11                 - .....k..
 1463  10 ac 08 6d 61 78 6c 6f                 - ...maxlo
 146b  67 32 0e 11 10 b0 83 83                 - g2......
 1473  65 63 52 65 74 56 61 6c                 - ecRetVal
 147b  0d 11 10 b4 6a 68 54 65                 - ....jhTe
 1483  78 46 69 6c 65 0a 11 10                 - xFile...
 148b  94 83 86 62 6d 66 68 0b                 - ...bmfh.
 1493  11 11 6c ff 83 87 62 6d                 - ..l...bm
 149b  69 68 0d 11 10 c0 81 e9                 - ih......
 14a3  62 75 66 73 69 7a 65 0b                 - bufsize.
 14ab  11 10 c4 0b 62 6d 64 61                 - ....bmda
 14b3  74 61 08 11 10 c8 83 11                 - ta......
 14bb  70 31 0b 11 10 cc 81 e9                 - p1......
 14c3  70 69 74 63 68 07 11 10                 - pitch...
 14cb  f8 81 eb 72 07 11 10 fc                 - ...r....
 14d3  81 eb 67 07 11 10 f4 81                 - ..g.....
 14db  eb 62 0c 11 10 f0 81 ea                 - .b......
 14e3  72 67 62 35 36 35 06 11                 - rgb565..
 14eb  10 e0 08 78 06 11 10 e4                 - ...x....
 14f3  08 79 0a 11 10 e8 08 63                 - .y.....c
 14fb  6f 75 6e 74 11 11 10 d0                 - ount....
 1503  08 77 68 69 63 68 53 75                 - .whichSu
 150b  72 66 61 63 65 06 11 10                 - rface...
 1513  d4 08 69 11 11 10 d8 6a                 - ..i....j
 151b  68 46 69 6c 65 4d 61 70                 - hFileMap
 1523  70 69 6e 67 0a 11 10 dc                 - ping....
 152b  26 70 42 61 73 65 26 24                 - &pBase&$
 1533  cb 41 00 00 28 00 00 00                 - .A..(...
 153b  00 00 0e 09 18 00 00 00                 - ........
 1543  83 8c 30 1c 01 30 1c 4a                 - ..0..0.J
 154b  4a 53 4e 65 77 54 65 78                 - JSNewTex
 1553  74 75 72 65 0d 11 10 f8                 - ture....
 155b  0b 66 69 6c 65 6e 61 6d                 - .filenam
 1563  65 26 24 f3 41 00 00 28                 - e&$.A..(
 156b  00 00 00 00 00 0e 09 18                 - ........
 1573  00 00 00 83 8c 30 1c 01                 - .....0..
 157b  30 1c 53 4a 52 4e 65 77                 - 0.SJRNew
 1583  54 65 78 74 75 72 65 0d                 - Texture.
 158b  11 10 f8 0b 66 69 6c 65                 - ....file
 1593  6e 61 6d 65 1e 24 1b 42                 - name.$.B
 159b  00 00 b5 00 00 00 00 00                 - ........
 15a3  0e 09 18 00 00 00 83 36                 - .......6
 15ab  00 00 6d 70 65 67 61 6e                 - ..mpegan
 15b3  69 6d 07 11 10 f8 08 66                 - im.....f
 15bb  70 09 11 10 e8 82 5d 70                 - p.....]p
 15c3  72 63 17 11 21                          - rc..!
 15c8  46 29 00 00 00 00                       DP      DGROUP:L361
 15ce  83 8d 52 65 74 75 72 6e                 - ..Return
 15d6  53 74 72 69 6e 67 12 11                 - String..
 15de  21                                      - !
 15df  96 29 00 00 00 00                       DP      DGROUP:L362
 15e5  83 8e 63 6f 6d 6d 61 6e                 - ..comman
 15ed  64 15 11 10 fc 58 6c 70                 - d....Xlp
 15f5  73 7a 52 65 74 75 72 6e                 - szReturn
 15fd  53 74 72 69 6e 67 21 24                 - String!$
 1605  d0 42 00 00 2f 00 00 00                 - .B../...
 160d  00 00 0e 07 18 00 00 00                 - ........
 1615  83 36 00 00 63 65 6e 74                 - .6..cent
 161d  72 65 4d 6f 75 73 65 25                 - reMouse%
 1625  24 ff 42 00 00 5b 00 00                 - $.B..[..
 162d  00 00 00 0e 09 18 00 00                 - ........
 1635  00 83 36 00 00 4a 4a 53                 - ..6..JJS
 163d  52 65 61 64 4a 6f 79 73                 - ReadJoys
 1645  74 69 63 6b 0b 11 10 ec                 - tick....
 164d  83 91 6d 79 4a 6f 79 0c                 - ..myJoy.
 1655  11 10 fc 81 0d 65 72 72                 - .....err
 165d  56 61 6c 22 24 5a 43 00                 - Val"$ZC.
 1665  00 59 00 00 00 00 00 0e                 - .Y......
 166d  09 18 00 00 00 83 36 00                 - ......6.
 1675  00 4a 4a 53 4a 6f 79 43                 - .JJSJoyC
 167d  6f 6e 66 69 67 0d 11 11                 - onfig...
 1685  68 fe 83 98 6d 79 63 61                 - h...myca
 168d  70 73 0d 11 10 fc 3a 6a                 - ps....:j
 1695  6f 79 72 61 6e 67 65                    - oyrange

No disassembly errors

------------------------------------------------------------

Segment: $$TYPES  BYTE USE16  0000408c bytes  
 0000  06 13 b7 40 00 00 08 11                 - ...@....
 0008  73 74 72 75 63 74 07 11                 - struct..
 0010  75 6e 69 6f 6e 06 11 65                 - union..e
 0018  6e 75 6d 0e 10 00 73 69                 - num...si
 0020  67 6e 65 64 20 63 68 61                 - gned cha
 0028  72 10 10 10 75 6e 73 69                 - r...unsi
 0030  67 6e 65 64 20 63 68 61                 - gned cha
 0038  72 08 10 01 73 68 6f 72                 - r...shor
 0040  74 11 10 11 75 6e 73 69                 - t...unsi
 0048  67 6e 65 64 20 73 68 6f                 - gned sho
 0050  72 74 06 10 03 69 6e 74                 - rt...int
 0058  0f 10 13 75 6e 73 69 67                 - ...unsig
 0060  6e 65 64 20 69 6e 74 0b                 - ned int.
 0068  12 00 07 77 63 68 61 72                 - ...wchar
 0070  5f 74 03 46 05 04 20 00                 - _t.F.. .
 0078  0b 0b 12 00 0c 76 61 5f                 - .....va_
 0080  6c 69 73 74 10 10 13 75                 - list...u
 0088  6e 73 69 67 6e 65 64 20                 - nsigned 
 0090  6c 6f 6e 67 09 12 00 0e                 - long....
 0098  55 4c 4f 4e 47 03 46 0f                 - ULONG.F.
 00a0  0a 12 00 10 50 55 4c 4f                 - ....PULO
 00a8  4e 47 0a 12 00 07 55 53                 - NG....US
 00b0  48 4f 52 54 03 46 12 0b                 - HORT.F..
 00b8  12 00 13 50 55 53 48 4f                 - ...PUSHO
 00c0  52 54 09 12 00 05 55 43                 - RT....UC
 00c8  48 41 52 03 46 15 0a 12                 - HAR.F...
 00d0  00 16 50 55 43 48 41 52                 - ..PUCHAR
 00d8  07 12 00 0b 50 53 5a 09                 - ....PSZ.
 00e0  12 00 0e 44 57 4f 52 44                 - ...DWORD
 00e8  08 12 00 08 42 4f 4f 4c                 - ....BOOL
 00f0  08 12 00 05 42 59 54 45                 - ....BYTE
 00f8  08 12 00 07 57 4f 52 44                 - ....WORD
 0100  08 10 23 66 6c 6f 61 74                 - ..#float
 0108  09 12 00 1d 46 4c 4f 41                 - ....FLOA
 0110  54 03 46 1e 0a 12 00 1f                 - T.F.....
 0118  50 46 4c 4f 41 54 03 46                 - PFLOAT.F
 0120  1a 09 12 00 21 50 42 4f                 - ....!PBO
 0128  4f 4c 0a 12 00 21 4c 50                 - OL...!LP
 0130  42 4f 4f 4c 03 46 1b 09                 - BOOL.F..
 0138  12 00 24 50 42 59 54 45                 - ..$PBYTE
 0140  0a 12 00 24 4c 50 42 59                 - ...$LPBY
 0148  54 45 03 46 08 08 12 00                 - TE.F....
 0150  27 50 49 4e 54 09 12 00                 - 'PINT...
 0158  27 4c 50 49 4e 54 03 46                 - 'LPINT.F
 0160  1c 09 12 00 2a 50 57 4f                 - ....*PWO
 0168  52 44 0a 12 00 2a 4c 50                 - RD...*LP
 0170  57 4f 52 44 07 10 03 6c                 - WORD...l
 0178  6f 6e 67 03 46 2d 0a 12                 - ong.F-..
 0180  00 2e 4c 50 4c 4f 4e 47                 - ..LPLONG
 0188  03 46 19 0a 12 00 30 50                 - .F....0P
 0190  44 57 4f 52 44 0b 12 00                 - DWORD...
 0198  30 4c 50 44 57 4f 52 44                 - 0LPDWORD
 01a0  07 10 30 76 6f 69 64 03                 - ..0void.
 01a8  46 33 0a 12 00 34 4c 50                 - F3...4LP
 01b0  56 4f 49 44 07 10 30 76                 - VOID..0v
 01b8  6f 69 64 03 46 36 0b 12                 - oid.F6..
 01c0  00 37 4c 50 43 56 4f 49                 - .7LPCVOI
 01c8  44 07 12 00 08 49 4e 54                 - D....INT
 01d0  08 12 00 09 55 49 4e 54                 - ....UINT
 01d8  03 46 09 09 12 00 3b 50                 - .F....;P
 01e0  55 49 4e 54 09 12 00 34                 - UINT...4
 01e8  50 56 4f 49 44 08 12 00                 - PVOID...
 01f0  05 43 48 41 52 09 12 00                 - .CHAR...
 01f8  06 53 48 4f 52 54 08 12                 - .SHORT..
 0200  00 2d 4c 4f 4e 47 09 12                 - .-LONG..
 0208  00 0a 57 43 48 41 52 03                 - ..WCHAR.
 0210  46 41 0a 12 00 42 50 57                 - FA...BPW
 0218  43 48 41 52 09 12 00 42                 - CHAR...B
 0220  4c 50 57 43 48 08 12 00                 - LPWCH...
 0228  42 50 57 43 48 09 12 00                 - BPWCH...
 0230  0a 57 43 48 41 52 03 46                 - .WCHAR.F
 0238  46 0a 12 00 47 4c 50 43                 - F...GLPC
 0240  57 43 48 09 12 00 47 50                 - WCH...GP
 0248  43 57 43 48 0a 12 00 42                 - CWCH...B
 0250  4e 57 50 53 54 52 0a 12                 - NWPSTR..
 0258  00 42 4c 50 57 53 54 52                 - .BLPWSTR
 0260  09 12 00 42 50 57 53 54                 - ...BPWST
 0268  52 0b 12 00 47 4c 50 43                 - R...GLPC
 0270  57 53 54 52 0a 12 00 47                 - WSTR...G
 0278  50 43 57 53 54 52 03 46                 - PCWSTR.F
 0280  3e 09 12 00 4f 50 43 48                 - >...OPCH
 0288  41 52 08 12 00 4f 4c 50                 - AR...OLP
 0290  43 48 07 12 00 4f 50 43                 - CH...OPC
 0298  48 08 12 00 05 43 48 41                 - H....CHA
 02a0  52 03 46 53 09 12 00 54                 - R.FS...T
 02a8  4c 50 43 43 48 08 12 00                 - LPCCH...
 02b0  54 50 43 43 48 09 12 00                 - TPCCH...
 02b8  4f 4e 50 53 54 52 09 12                 - ONPSTR..
 02c0  00 4f 4c 50 53 54 52 08                 - .OLPSTR.
 02c8  12 00 4f 50 53 54 52 0a                 - ..OPSTR.
 02d0  12 00 54 4c 50 43 53 54                 - ..TLPCST
 02d8  52 09 12 00 54 50 43 53                 - R...TPCS
 02e0  54 52 09 12 00 05 54 43                 - TR....TC
 02e8  48 41 52 0a 12 00 0b 50                 - HAR....P
 02f0  54 43 48 41 52 09 12 00                 - TCHAR...
 02f8  05 54 42 59 54 45 03 46                 - .TBYTE.F
 0300  05 0a 12 00 5f 50 54 42                 - ...._PTB
 0308  59 54 45 09 12 00 58 4c                 - YTE...XL
 0310  50 54 43 48 08 12 00 58                 - PTCH...X
 0318  50 54 43 48 09 12 00 58                 - PTCH...X
 0320  50 54 53 54 52 0a 12 00                 - PTSTR...
 0328  58 4c 50 54 53 54 52 0b                 - XLPTSTR.
 0330  12 00 5a 4c 50 43 54 53                 - ..ZLPCTS
 0338  54 52 03 46 3f 0a 12 00                 - TR.F?...
 0340  66 50 53 48 4f 52 54 03                 - fPSHORT.
 0348  46 40 09 12 00 68 50 4c                 - F@...hPL
 0350  4f 4e 47 0a 12 00 3d 48                 - ONG...=H
 0358  41 4e 44 4c 45 03 46 6a                 - ANDLE.Fj
 0360  0b 12 00 6b 50 48 41 4e                 - ...kPHAN
 0368  44 4c 45 09 12 00 05 43                 - DLE....C
 0370  43 48 41 52 08 12 00 19                 - CHAR....
 0378  4c 43 49 44 09 12 00 31                 - LCID...1
 0380  50 4c 43 49 44 0a 12 00                 - PLCID...
 0388  1c 4c 41 4e 47 49 44 09                 - .LANGID.
 0390  10 27 64 6f 75 62 6c 65                 - .'double
 0398  0c 12 00 71 4c 4f 4e 47                 - ...qLONG
 03a0  4c 4f 4e 47 0d 12 00 71                 - LONG...q
 03a8  44 57 4f 52 44 4c 4f 4e                 - DWORDLON
 03b0  47 03 46 72 0d 12 00 74                 - G.Fr...t
 03b8  50 4c 4f 4e 47 4c 4f 4e                 - PLONGLON
 03c0  47 03 46 73 0e 12 00 76                 - G.Fs...v
 03c8  50 44 57 4f 52 44 4c 4f                 - PDWORDLO
 03d0  4e 47 0b 12 00 1b 42 4f                 - NG....BO
 03d8  4f 4c 45 41 4e 03 46 78                 - OLEAN.Fx
 03e0  0c 12 00 79 50 42 4f 4f                 - ...yPBOO
 03e8  4c 45 41 4e 0e 12 00 19                 - LEAN....
 03f0  4b 53 50 49 4e 5f 4c 4f                 - KSPIN_LO
 03f8  43 4b 11 12 00 3d 50 41                 - CK...=PA
 0400  43 43 45 53 53 5f 54 4f                 - CCESS_TO
 0408  4b 45 4e 18 12 00 3d 50                 - KEN...=P
 0410  53 45 43 55 52 49 54 59                 - SECURITY
 0418  5f 44 45 53 43 52 49 50                 - _DESCRIP
 0420  54 4f 52 08 12 00 3d 50                 - TOR...=P
 0428  53 49 44 0f 12 00 19 41                 - SID....A
 0430  43 43 45 53 53 5f 4d 41                 - CCESS_MA
 0438  53 4b 03 46 7f 11 12 00                 - SK.F....
 0440  80 80 50 41 43 43 45 53                 - ..PACCES
 0448  53 5f 4d 41 53 4b 1f 12                 - S_MASK..
 0450  00 1c 53 45 43 55 52 49                 - ..SECURI
 0458  54 59 5f 44 45 53 43 52                 - TY_DESCR
 0460  49 50 54 4f 52 5f 43 4f                 - IPTOR_CO
 0468  4e 54 52 4f 4c 20 12 00                 - NTROL ..
 0470  2a 50 53 45 43 55 52 49                 - *PSECURI
 0478  54 59 5f 44 45 53 43 52                 - TY_DESCR
 0480  49 50 54 4f 52 5f 43 4f                 - IPTOR_CO
 0488  4e 54 52 4f 4c 22 12 00                 - NTROL"..
 0490  78 53 45 43 55 52 49 54                 - xSECURIT
 0498  59 5f 43 4f 4e 54 45 58                 - Y_CONTEX
 04a0  54 5f 54 52 41 43 4b 49                 - T_TRACKI
 04a8  4e 47 5f 4d 4f 44 45 23                 - NG_MODE#
 04b0  12 00 79 50 53 45 43 55                 - ..yPSECU
 04b8  52 49 54 59 5f 43 4f 4e                 - RITY_CON
 04c0  54 45 58 54 5f 54 52 41                 - TEXT_TRA
 04c8  43 4b 49 4e 47 5f 4d 4f                 - CKING_MO
 04d0  44 45 18 12 00 19 53 45                 - DE....SE
 04d8  43 55 52 49 54 59 5f 49                 - CURITY_I
 04e0  4e 46 4f 52 4d 41 54 49                 - NFORMATI
 04e8  4f 4e 19 12 00 30 50 53                 - ON...0PS
 04f0  45 43 55 52 49 54 59 5f                 - ECURITY_
 04f8  49 4e 46 4f 52 4d 41 54                 - INFORMAT
 0500  49 4f 4e 07 72 33 03 3d                 - ION.r3.=
 0508  19 3d 04 46 80 88 18 12                 - .=.F....
 0510  00 80 89 50 49 4d 41 47                 - ...PIMAG
 0518  45 5f 54 4c 53 5f 43 41                 - E_TLS_CA
 0520  4c 4c 42 41 43 4b 0a 12                 - LLBACK..
 0528  00 09 73 69 7a 65 5f 74                 - ..size_t
 0530  0a 12 00 3a 57 50 41 52                 - ...:WPAR
 0538  41 4d 0a 12 00 40 4c 50                 - AM...@LP
 0540  41 52 41 4d 0b 12 00 40                 - ARAM...@
 0548  4c 52 45 53 55 4c 54 08                 - LRESULT.
 0550  12 00 6a 48 57 4e 44 09                 - ..jHWND.
 0558  12 00 6a 48 48 4f 4f 4b                 - ..jHHOOK
 0560  08 12 00 1c 41 54 4f 4d                 - ....ATOM
 0568  0c 12 00 6b 53 50 48 41                 - ...kSPHA
 0570  4e 44 4c 45 0c 12 00 6b                 - NDLE...k
 0578  4c 50 48 41 4e 44 4c 45                 - LPHANDLE
 0580  0b 12 00 6a 48 47 4c 4f                 - ...jHGLO
 0588  42 41 4c 0a 12 00 6a 48                 - BAL...jH
 0590  4c 4f 43 41 4c 10 12 00                 - LOCAL...
 0598  6a 47 4c 4f 42 41 4c 48                 - jGLOBALH
 05a0  41 4e 44 4c 45 0f 12 00                 - ANDLE...
 05a8  6a 4c 4f 43 41 4c 48 41                 - jLOCALHA
 05b0  4e 44 4c 45 04 72 08 00                 - NDLE.r..
 05b8  04 46 80 98 0c 12 00 80                 - .F......
 05c0  99 46 41 52 50 52 4f 43                 - .FARPROC
 05c8  04 46 80 98 0d 12 00 80                 - .F......
 05d0  9b 4e 45 41 52 50 52 4f                 - .NEARPRO
 05d8  43 04 46 80 98 09 12 00                 - C.F.....
 05e0  80 9d 50 52 4f 43 0b 12                 - ..PROC..
 05e8  00 6a 48 47 44 49 4f 42                 - .jHGDIOB
 05f0  4a 0a 12 00 6a 48 41 43                 - J...jHAC
 05f8  43 45 4c 0b 12 00 6a 48                 - CEL...jH
 0600  42 49 54 4d 41 50 0a 12                 - BITMAP..
 0608  00 6a 48 42 52 55 53 48                 - .jHBRUSH
 0610  07 12 00 6a 48 44 43 09                 - ...jHDC.
 0618  12 00 6a 48 47 4c 52 43                 - ..jHGLRC
 0620  09 12 00 6a 48 44 45 53                 - ...jHDES
 0628  4b 10 12 00 6a 48 45 4e                 - K...jHEN
 0630  48 4d 45 54 41 46 49 4c                 - HMETAFIL
 0638  45 09 12 00 6a 48 46 4f                 - E...jHFO
 0640  4e 54 09 12 00 6a 48 49                 - NT...jHI
 0648  43 4f 4e 09 12 00 6a 48                 - CON...jH
 0650  4d 45 4e 55 0d 12 00 6a                 - MENU...j
 0658  48 4d 45 54 41 46 49 4c                 - HMETAFIL
 0660  45 0d 12 00 6a 48 49 4e                 - E...jHIN
 0668  53 54 41 4e 43 45 0c 12                 - STANCE..
 0670  00 80 ab 48 4d 4f 44 55                 - ...HMODU
 0678  4c 45 0c 12 00 6a 48 50                 - LE...jHP
 0680  41 4c 45 54 54 45 08 12                 - ALETTE..
 0688  00 6a 48 50 45 4e 08 12                 - .jHPEN..
 0690  00 6a 48 52 47 4e 09 12                 - .jHRGN..
 0698  00 6a 48 52 53 52 43 08                 - .jHRSRC.
 06a0  12 00 6a 48 53 54 52 09                 - ..jHSTR.
 06a8  12 00 6a 48 54 41 53 4b                 - ..jHTASK
 06b0  0b 12 00 6a 48 57 49 4e                 - ...jHWIN
 06b8  53 54 41 07 12 00 6a 48                 - STA...jH
 06c0  4b 4c 09 12 00 08 48 46                 - KL....HF
 06c8  49 4c 45 0c 12 00 80 a8                 - ILE.....
 06d0  48 43 55 52 53 4f 52 0c                 - HCURSOR.
 06d8  12 00 19 43 4f 4c 4f 52                 - ...COLOR
 06e0  52 45 46 0e 12 00 30 4c                 - REF...0L
 06e8  50 43 4f 4c 4f 52 52 45                 - PCOLORRE
 06f0  46 05 72 19 01 35 04 46                 - F.r..5.F
 06f8  80 b9 1a 12 00 80 ba 50                 - .......P
 0700  54 48 52 45 41 44 5f 53                 - THREAD_S
 0708  54 41 52 54 5f 52 4f 55                 - TART_ROU
 0710  54 49 4e 45 1b 12 00 80                 - TINE....
 0718  bb 4c 50 54 48 52 45 41                 - .LPTHREA
 0720  44 5f 53 54 41 52 54 5f                 - D_START_
 0728  52 4f 55 54 49 4e 45 09                 - ROUTINE.
 0730  12 00 0e 44 57 4f 52 44                 - ...DWORD
 0738  0a 12 00 3d 48 41 4e 44                 - ...=HAND
 0740  4c 45 0a 12 00 34 4c 50                 - LE...4LP
 0748  56 4f 49 44 14 12 00 80                 - VOID....
 0750  9a 45 4e 55 4d 52 45 53                 - .ENUMRES
 0758  54 59 50 45 50 52 4f 43                 - TYPEPROC
 0760  14 12 00 80 9a 45 4e 55                 - .....ENU
 0768  4d 52 45 53 4e 41 4d 45                 - MRESNAME
 0770  50 52 4f 43 14 12 00 80                 - PROC....
 0778  9a 45 4e 55 4d 52 45 53                 - .ENUMRES
 0780  4c 41 4e 47 50 52 4f 43                 - LANGPROC
 0788  14 12 00 80 9a 4f 4c 44                 - .....OLD
 0790  46 4f 4e 54 45 4e 55 4d                 - FONTENUM
 0798  50 52 4f 43 11 12 00 80                 - PROC....
 07a0  9a 47 4f 42 4a 45 4e 55                 - .GOBJENU
 07a8  4d 50 52 4f 43 10 12 00                 - MPROC...
 07b0  80 9a 4c 49 4e 45 44 44                 - ..LINEDD
 07b8  41 50 52 4f 43 11 12 00                 - APROC...
 07c0  80 c3 46 4f 4e 54 45 4e                 - ..FONTEN
 07c8  55 4d 50 52 4f 43 07 12                 - UMPROC..
 07d0  00 08 49 4e 54 08 12 00                 - ..INT...
 07d8  05 42 59 54 45 0e 12 00                 - .BYTE...
 07e0  80 9a 41 42 4f 52 54 50                 - ..ABORTP
 07e8  52 4f 43 08 12 00 6a 48                 - ROC...jH
 07f0  44 57 50 11 12 00 33 4d                 - DWP...3M
 07f8  45 4e 55 54 45 4d 50 4c                 - ENUTEMPL
 0800  41 54 45 41 11 12 00 33                 - ATEA...3
 0808  4d 45 4e 55 54 45 4d 50                 - MENUTEMP
 0810  4c 41 54 45 57 11 12 00                 - LATEW...
 0818  80 cb 4d 45 4e 55 54 45                 - ..MENUTE
 0820  4d 50 4c 41 54 45 13 12                 - MPLATE..
 0828  00 3d 4c 50 4d 45 4e 55                 - .=LPMENU
 0830  54 45 4d 50 4c 41 54 45                 - TEMPLATE
 0838  41 13 12 00 3d 4c 50 4d                 - A...=LPM
 0840  45 4e 55 54 45 4d 50 4c                 - ENUTEMPL
 0848  41 54 45 57 13 12 00 80                 - ATEW....
 0850  ce 4c 50 4d 45 4e 55 54                 - .LPMENUT
 0858  45 4d 50 4c 41 54 45 0c                 - EMPLATE.
 0860  72 80 8e 04 80 8f 3a 80                 - r.....:.
 0868  8c 80 8d 04 46 80 d1 0c                 - ....F...
 0870  12 00 80 d2 57 4e 44 50                 - ....WNDP
 0878  52 4f 43 0c 12 00 80 9a                 - ROC.....
 0880  44 4c 47 50 52 4f 43 0e                 - DLGPROC.
 0888  12 00 80 9a 54 49 4d 45                 - ....TIME
 0890  52 50 52 4f 43 13 12 00                 - RPROC...
 0898  80 9a 47 52 41 59 53 54                 - ..GRAYST
 08a0  52 49 4e 47 50 52 4f 43                 - RINGPROC
 08a8  10 12 00 80 9a 57 4e 44                 - .....WND
 08b0  45 4e 55 4d 50 52 4f 43                 - ENUMPROC
 08b8  0d 12 00 80 9a 48 4f 4f                 - .....HOO
 08c0  4b 50 52 4f 43 12 12 00                 - KPROC...
 08c8  80 9a 53 45 4e 44 41 53                 - ..SENDAS
 08d0  59 4e 43 50 52 4f 43 17                 - YNCPROC.
 08d8  12 00 80 9a 45 44 49 54                 - ....EDIT
 08e0  57 4f 52 44 42 52 45 41                 - WORDBREA
 08e8  4b 50 52 4f 43 41 17 12                 - KPROCA..
 08f0  00 80 9a 45 44 49 54 57                 - ...EDITW
 08f8  4f 52 44 42 52 45 41 4b                 - ORDBREAK
 0900  50 52 4f 43 57 12 12 00                 - PROCW...
 0908  80 9a 50 52 4f 50 45 4e                 - ..PROPEN
 0910  55 4d 50 52 4f 43 41 12                 - UMPROCA.
 0918  12 00 80 9a 50 52 4f 50                 - ....PROP
 0920  45 4e 55 4d 50 52 4f 43                 - ENUMPROC
 0928  57 14 12 00 80 9a 50 52                 - W.....PR
 0930  4f 50 45 4e 55 4d 50 52                 - OPENUMPR
 0938  4f 43 45 58 41 14 12 00                 - OCEXA...
 0940  80 9a 50 52 4f 50 45 4e                 - ..PROPEN
 0948  55 4d 50 52 4f 43 45 58                 - UMPROCEX
 0950  57 11 12 00 80 dc 50 52                 - W.....PR
 0958  4f 50 45 4e 55 4d 50 52                 - OPENUMPR
 0960  4f 43 13 12 00 80 de 50                 - OC.....P
 0968  52 4f 50 45 4e 55 4d 50                 - ROPENUMP
 0970  52 4f 43 45 58 16 12 00                 - ROCEX...
 0978  80 da 45 44 49 54 57 4f                 - ..EDITWO
 0980  52 44 42 52 45 41 4b 50                 - RDBREAKP
 0988  52 4f 43 11 12 00 33 4d                 - ROC...3M
 0990  45 4e 55 54 45 4d 50 4c                 - ENUTEMPL
 0998  41 54 45 41 11 12 00 33                 - ATEA...3
 09a0  4d 45 4e 55 54 45 4d 50                 - MENUTEMP
 09a8  4c 41 54 45 57 0c 12 00                 - LATEW...
 09b0  19 43 4f 4c 4f 52 52 45                 - .COLORRE
 09b8  46 0c 12 00 19 48 45 4c                 - F....HEL
 09c0  50 50 4f 4c 59 0a 12 00                 - PPOLY...
 09c8  19 4c 43 54 59 50 45 0b                 - .LCTYPE.
 09d0  12 00 19 43 41 4c 54 59                 - ...CALTY
 09d8  50 45 09 12 00 19 43 41                 - PE....CA
 09e0  4c 49 44 15 12 00 80 9a                 - LID.....
 09e8  4c 4f 43 41 4c 45 5f 45                 - LOCALE_E
 09f0  4e 55 4d 50 52 4f 43 41                 - NUMPROCA
 09f8  17 12 00 80 9a 43 4f 44                 - .....COD
 0a00  45 50 41 47 45 5f 45 4e                 - EPAGE_EN
 0a08  55 4d 50 52 4f 43 41 16                 - UMPROCA.
 0a10  12 00 80 9a 44 41 54 45                 - ....DATE
 0a18  46 4d 54 5f 45 4e 55 4d                 - FMT_ENUM
 0a20  50 52 4f 43 41 16 12 00                 - PROCA...
 0a28  80 9a 54 49 4d 45 46 4d                 - ..TIMEFM
 0a30  54 5f 45 4e 55 4d 50 52                 - T_ENUMPR
 0a38  4f 43 41 16 12 00 80 9a                 - OCA.....
 0a40  43 41 4c 49 4e 46 4f 5f                 - CALINFO_
 0a48  45 4e 55 4d 50 52 4f 43                 - ENUMPROC
 0a50  41 15 12 00 80 9a 4c 4f                 - A.....LO
 0a58  43 41 4c 45 5f 45 4e 55                 - CALE_ENU
 0a60  4d 50 52 4f 43 57 17 12                 - MPROCW..
 0a68  00 80 9a 43 4f 44 45 50                 - ...CODEP
 0a70  41 47 45 5f 45 4e 55 4d                 - AGE_ENUM
 0a78  50 52 4f 43 57 16 12 00                 - PROCW...
 0a80  80 9a 44 41 54 45 46 4d                 - ..DATEFM
 0a88  54 5f 45 4e 55 4d 50 52                 - T_ENUMPR
 0a90  4f 43 57 16 12 00 80 9a                 - OCW.....
 0a98  54 49 4d 45 46 4d 54 5f                 - TIMEFMT_
 0aa0  45 4e 55 4d 50 52 4f 43                 - ENUMPROC
 0aa8  57 16 12 00 80 9a 43 41                 - W.....CA
 0ab0  4c 49 4e 46 4f 5f 45 4e                 - LINFO_EN
 0ab8  55 4d 50 52 4f 43 57 05                 - UMPROCW.
 0ac0  72 1a 01 19 04 46 80 f4                 - r....F..
 0ac8  15 12 00 80 f5 50 48 41                 - .....PHA
 0ad0  4e 44 4c 45 52 5f 52 4f                 - NDLER_RO
 0ad8  55 54 49 4e 45 08 12 00                 - UTINE...
 0ae0  07 57 4f 52 44 0a 12 00                 - .WORD...
 0ae8  7f 52 45 47 53 41 4d 08                 - .REGSAM.
 0af0  12 00 6a 48 4b 45 59 04                 - ..jHKEY.
 0af8  46 80 f9 0a 12 00 80 fa                 - F.......
 0b00  50 48 4b 45 59 0d 12 00                 - PHKEY...
 0b08  6a 53 43 5f 48 41 4e 44                 - jSC_HAND
 0b10  4c 45 04 46 80 fc 10 12                 - LE.F....
 0b18  00 80 fd 4c 50 53 43 5f                 - ...LPSC_
 0b20  48 41 4e 44 4c 45 19 12                 - HANDLE..
 0b28  00 19 53 45 52 56 49 43                 - ..SERVIC
 0b30  45 5f 53 54 41 54 55 53                 - E_STATUS
 0b38  5f 48 41 4e 44 4c 45 0b                 - _HANDLE.
 0b40  12 00 35 53 43 5f 4c 4f                 - ..5SC_LO
 0b48  43 4b 03 46 4b 07 72 33                 - CK.FK.r3
 0b50  02 19 81 01 04 46 81 02                 - .....F..
 0b58  1d 12 00 81 03 4c 50 53                 - .....LPS
 0b60  45 52 56 49 43 45 5f 4d                 - ERVICE_M
 0b68  41 49 4e 5f 46 55 4e 43                 - AIN_FUNC
 0b70  54 49 4f 4e 57 03 46 58                 - TIONW.FX
 0b78  07 72 33 02 19 81 05 04                 - .r3.....
 0b80  46 81 06 1d 12 00 81 07                 - F.......
 0b88  4c 50 53 45 52 56 49 43                 - LPSERVIC
 0b90  45 5f 4d 41 49 4e 5f 46                 - E_MAIN_F
 0b98  55 4e 43 54 49 4f 4e 41                 - UNCTIONA
 0ba0  05 72 33 01 19 04 46 81                 - .r3...F.
 0ba8  09 17 12 00 81 0a 4c 50                 - ......LP
 0bb0  48 41 4e 44 4c 45 52 5f                 - HANDLER_
 0bb8  46 55 4e 43 54 49 4f 4e                 - FUNCTION
 0bc0  0d 12 00 3a 4d 4d 56 45                 - ...:MMVE
 0bc8  52 53 49 4f 4e 0c 12 00                 - RSION...
 0bd0  3a 4d 4d 52 45 53 55 4c                 - :MMRESUL
 0bd8  54 03 46 3a 0b 12 00 81                 - T.F:....
 0be0  0e 4c 50 55 49 4e 54 09                 - .LPUINT.
 0be8  12 00 6a 48 44 52 56 52                 - ..jHDRVR
 0bf0  0d 72 80 8e 05 19 81 10                 - .r......
 0bf8  3a 80 8d 80 8d 04 46 81                 - :.....F.
 0c00  11 0f 12 00 81 12 44 52                 - ......DR
 0c08  49 56 45 52 50 52 4f 43                 - IVERPROC
 0c10  0a 72 33 05 81 10 3a 19                 - .r3...:.
 0c18  19 19 10 12 00 81 14 44                 - .......D
 0c20  52 56 43 41 4c 4c 42 41                 - RVCALLBA
 0c28  43 4b 04 46 81 15 12 12                 - CK.F....
 0c30  00 81 16 4c 50 44 52 56                 - ...LPDRV
 0c38  43 41 4c 4c 42 41 43 4b                 - CALLBACK
 0c40  11 12 00 81 16 50 44 52                 - .....PDR
 0c48  56 43 41 4c 4c 42 41 43                 - VCALLBAC
 0c50  4b 09 12 00 6a 48 57 41                 - K...jHWA
 0c58  56 45 0b 12 00 6a 48 57                 - VE...jHW
 0c60  41 56 45 49 4e 0c 12 00                 - AVEIN...
 0c68  6a 48 57 41 56 45 4f 55                 - jHWAVEOU
 0c70  54 04 46 81 1a 0e 12 00                 - T.F.....
 0c78  81 1c 4c 50 48 57 41 56                 - ..LPHWAV
 0c80  45 49 4e 04 46 81 1b 0f                 - EIN.F...
 0c88  12 00 81 1e 4c 50 48 57                 - ....LPHW
 0c90  41 56 45 4f 55 54 11 12                 - AVEOUT..
 0c98  00 81 15 57 41 56 45 43                 - ...WAVEC
 0ca0  41 4c 4c 42 41 43 4b 04                 - ALLBACK.
 0ca8  46 81 20 13 12 00 81 21                 - F. ....!
 0cb0  4c 50 57 41 56 45 43 41                 - LPWAVECA
 0cb8  4c 4c 42 41 43 4b 09 12                 - LLBACK..
 0cc0  00 6a 48 4d 49 44 49 0b                 - .jHMIDI.
 0cc8  12 00 6a 48 4d 49 44 49                 - ..jHMIDI
 0cd0  49 4e 0c 12 00 6a 48 4d                 - IN...jHM
 0cd8  49 44 49 4f 55 54 0d 12                 - IDIOUT..
 0ce0  00 6a 48 4d 49 44 49 53                 - .jHMIDIS
 0ce8  54 52 4d 04 46 81 23 0c                 - TRM.F.#.
 0cf0  12 00 81 27 4c 50 48 4d                 - ...'LPHM
 0cf8  49 44 49 04 46 81 24 0e                 - IDI.F.$.
 0d00  12 00 81 29 4c 50 48 4d                 - ...)LPHM
 0d08  49 44 49 49 4e 04 46 81                 - IDIIN.F.
 0d10  25 0f 12 00 81 2b 4c 50                 - %....+LP
 0d18  48 4d 49 44 49 4f 55 54                 - HMIDIOUT
 0d20  04 46 81 26 10 12 00 81                 - .F.&....
 0d28  2d 4c 50 48 4d 49 44 49                 - -LPHMIDI
 0d30  53 54 52 4d 11 12 00 81                 - STRM....
 0d38  15 4d 49 44 49 43 41 4c                 - .MIDICAL
 0d40  4c 42 41 43 4b 04 46 81                 - LBACK.F.
 0d48  2f 13 12 00 81 30 4c 50                 - /....0LP
 0d50  4d 49 44 49 43 41 4c 4c                 - MIDICALL
 0d58  42 41 43 4b 04 20 7f 1c                 - BACK. ..
 0d60  0f 12 00 81 32 50 41 54                 - ....2PAT
 0d68  43 48 41 52 52 41 59 10                 - CHARRAY.
 0d70  12 00 2a 4c 50 50 41 54                 - ..*LPPAT
 0d78  43 48 41 52 52 41 59 04                 - CHARRAY.
 0d80  20 7f 1c 0d 12 00 81 35                 -  ......5
 0d88  4b 45 59 41 52 52 41 59                 - KEYARRAY
 0d90  0e 12 00 2a 4c 50 4b 45                 - ...*LPKE
 0d98  59 41 52 52 41 59 0d 12                 - YARRAY..
 0da0  00 6a 48 4d 49 58 45 52                 - .jHMIXER
 0da8  4f 42 4a 04 46 81 38 10                 - OBJ.F.8.
 0db0  12 00 81 39 4c 50 48 4d                 - ...9LPHM
 0db8  49 58 45 52 4f 42 4a 0a                 - IXEROBJ.
 0dc0  12 00 6a 48 4d 49 58 45                 - ..jHMIXE
 0dc8  52 04 46 81 3b 0d 12 00                 - R.F.;...
 0dd0  81 3c 4c 50 48 4d 49 58                 - .<LPHMIX
 0dd8  45 52 09 72 33 05 3a 3a                 - ER.r3.::
 0de0  19 19 19 11 12 00 81 3e                 - .......>
 0de8  54 49 4d 45 43 41 4c 4c                 - TIMECALL
 0df0  42 41 43 4b 04 46 81 3f                 - BACK.F.?
 0df8  13 12 00 81 40 4c 50 54                 - ....@LPT
 0e00  49 4d 45 43 41 4c 4c 42                 - IMECALLB
 0e08  41 43 4b 0a 12 00 19 46                 - ACK....F
 0e10  4f 55 52 43 43 09 12 00                 - OURCC...
 0e18  0b 48 50 53 54 52 09 12                 - .HPSTR..
 0e20  00 6a 48 4d 4d 49 4f 0b                 - .jHMMIO.
 0e28  72 80 8e 04 58 3a 80 8d                 - r...X:..
 0e30  80 8d 0d 12 00 81 45 4d                 - ......EM
 0e38  4d 49 4f 50 52 4f 43 04                 - MIOPROC.
 0e40  46 81 46 0f 12 00 81 47                 - F.F....G
 0e48  4c 50 4d 4d 49 4f 50 52                 - LPMMIOPR
 0e50  4f 43 0c 12 00 19 4d 43                 - OC....MC
 0e58  49 45 52 52 4f 52 0f 12                 - IERROR..
 0e60  00 3a 4d 43 49 44 45 56                 - .:MCIDEV
 0e68  49 43 45 49 44 07 72 3a                 - ICEID.r:
 0e70  02 81 4a 19 04 46 81 4b                 - ..J..F.K
 0e78  0e 12 00 81 4c 59 49 45                 - ....LYIE
 0e80  4c 44 50 52 4f 43 07 12                 - LDPROC..
 0e88  00 6a 48 49 43 0c 12 00                 - .jHIC...
 0e90  6a 48 44 52 41 57 44 49                 - jHDRAWDI
 0e98  42 09 12 00 1c 54 57 4f                 - B....TWO
 0ea0  43 43 05 72 1a 01 08 04                 - CC.r....
 0ea8  46 81 51 14 12 00 81 52                 - F.Q....R
 0eb0  41 56 49 53 41 56 45 43                 - AVISAVEC
 0eb8  41 4c 4c 42 41 43 4b 10                 - ALLBACK.
 0ec0  12 00 34 49 5f 52 50 43                 - ..4I_RPC
 0ec8  5f 48 41 4e 44 4c 45 0e                 - _HANDLE.
 0ed0  12 00 2d 52 50 43 5f 53                 - ..-RPC_S
 0ed8  54 41 54 55 53 17 12 00                 - TATUS...
 0ee0  81 54 52 50 43 5f 42 49                 - .TRPC_BI
 0ee8  4e 44 49 4e 47 5f 48 41                 - NDING_HA
 0ef0  4e 44 4c 45 0d 12 00 81                 - NDLE....
 0ef8  56 68 61 6e 64 6c 65 5f                 - Vhandle_
 0f00  74 11 12 00 34 52 50 43                 - t...4RPC
 0f08  5f 49 46 5f 48 41 4e 44                 - _IF_HAND
 0f10  4c 45 1c 12 00 34 52 50                 - LE...4RP
 0f18  43 5f 41 55 54 48 5f 49                 - C_AUTH_I
 0f20  44 45 4e 54 49 54 59 5f                 - DENTITY_
 0f28  48 41 4e 44 4c 45 14 12                 - HANDLE..
 0f30  00 34 52 50 43 5f 41 55                 - .4RPC_AU
 0f38  54 48 5a 5f 48 41 4e 44                 - THZ_HAND
 0f40  4c 45 03 46 07 03 46 34                 - LE.F..F4
 0f48  04 46 81 55 0c 72 33 05                 - .F.U.r3.
 0f50  34 81 5b 0e 81 5c 81 5d                 - 4.[..\.]
 0f58  04 46 81 5e 1e 12 00 81                 - .F.^....
 0f60  5f 52 50 43 5f 41 55 54                 - _RPC_AUT
 0f68  48 5f 4b 45 59 5f 52 45                 - H_KEY_RE
 0f70  54 52 49 45 56 41 4c 5f                 - TRIEVAL_
 0f78  46 4e 04 46 81 54 16 12                 - FN.F.T..
 0f80  00 81 61 52 50 43 5f 45                 - ..aRPC_E
 0f88  50 5f 49 4e 51 5f 48 41                 - P_INQ_HA
 0f90  4e 44 4c 45 09 72 08 03                 - NDLE.r..
 0f98  81 56 0e 81 5d 04 46 81                 - .V..].F.
 0fa0  63 1e 12 00 81 64 52 50                 - c....dRP
 0fa8  43 5f 4d 47 4d 54 5f 41                 - C_MGMT_A
 0fb0  55 54 48 4f 52 49 5a 41                 - UTHORIZA
 0fb8  54 49 4f 4e 5f 46 4e 0f                 - TION_FN.
 0fc0  12 00 34 49 5f 52 50 43                 - ..4I_RPC
 0fc8  5f 4d 55 54 45 58 05 72                 - _MUTEX.r
 0fd0  33 01 34 04 46 81 67 11                 - 3.4.F.g.
 0fd8  12 00 81 68 50 52 50 43                 - ...hPRPC
 0fe0  5f 52 55 4e 44 4f 57 4e                 - _RUNDOWN
 0fe8  11 12 00 34 52 50 43 5f                 - ...4RPC_
 0ff0  4e 53 5f 48 41 4e 44 4c                 - NS_HANDL
 0ff8  45 08 12 00 05 62 79 74                 - E....byt
 1000  65 0b 12 00 05 62 6f 6f                 - e....boo
 1008  6c 65 61 6e 09 12 00 71                 - lean...q
 1010  68 79 70 65 72 0f 12 00                 - hyper...
 1018  71 4d 49 44 4c 5f 75 68                 - qMIDL_uh
 1020  79 70 65 72 10 12 00 34                 - yper...4
 1028  4e 44 52 5f 43 43 4f 4e                 - NDR_CCON
 1030  54 45 58 54 04 46 81 67                 - TEXT.F.g
 1038  10 12 00 81 70 4e 44 52                 - ....pNDR
 1040  5f 52 55 4e 44 4f 57 4e                 - _RUNDOWN
 1048  12 12 00 0e 65 72 72 6f                 - ....erro
 1050  72 5f 73 74 61 74 75 73                 - r_status
 1058  5f 74 0e 12 00 5f 52 50                 - _t..._RP
 1060  43 5f 42 55 46 50 54 52                 - C_BUFPTR
 1068  0e 12 00 0e 52 50 43 5f                 - ....RPC_
 1070  4c 45 4e 47 54 48 03 46                 - LENGTH.F
 1078  05 13 12 00 81 75 50 46                 - .....uPF
 1080  4f 52 4d 41 54 5f 53 54                 - ORMAT_ST
 1088  52 49 4e 47 05 72 34 01                 - RING.r4.
 1090  34 04 46 81 77 1c 12 00                 - 4.F.w...
 1098  81 78 47 45 4e 45 52 49                 - .xGENERI
 10a0  43 5f 42 49 4e 44 49 4e                 - C_BINDIN
 10a8  47 5f 52 4f 55 54 49 4e                 - G_ROUTIN
 10b0  45 06 72 33 02 34 5f 04                 - E.r3.4_.
 10b8  46 81 7a 1b 12 00 81 7b                 - F.z....{
 10c0  47 45 4e 45 52 49 43 5f                 - GENERIC_
 10c8  55 4e 42 49 4e 44 5f 52                 - UNBIND_R
 10d0  4f 55 54 49 4e 45 10 12                 - OUTINE..
 10d8  00 81 70 4e 44 52 5f 52                 - ..pNDR_R
 10e0  55 4e 44 4f 57 4e 13 12                 - UNDOWN..
 10e8  00 34 50 4d 49 44 4c 5f                 - .4PMIDL_
 10f0  58 4d 49 54 5f 54 59 50                 - XMIT_TYP
 10f8  45 04 72 2d 00 04 46 81                 - E.r-..F.
 1100  7f 13 12 00 81 80 53 45                 - ......SE
 1108  52 56 45 52 5f 52 4f 55                 - RVER_ROU
 1110  54 49 4e 45 13 12 00 81                 - TINE....
 1118  80 53 45 52 56 45 52 5f                 - .SERVER_
 1120  52 4f 55 54 49 4e 45 18                 - ROUTINE.
 1128  12 00 34 52 50 43 5f 53                 - ..4RPC_S
 1130  53 5f 54 48 52 45 41 44                 - S_THREAD
 1138  5f 48 41 4e 44 4c 45 06                 - _HANDLE.
 1140  72 34 01 80 8b 15 12 00                 - r4......
 1148  81 84 52 50 43 5f 43 4c                 - ..RPC_CL
 1150  49 45 4e 54 5f 41 4c 4c                 - IENT_ALL
 1158  4f 43 14 12 00 81 67 52                 - OC....gR
 1160  50 43 5f 43 4c 49 45 4e                 - PC_CLIEN
 1168  54 5f 46 52 45 45 0b 12                 - T_FREE..
 1170  00 07 77 63 68 61 72 5f                 - ..wchar_
 1178  74 04 72 33 00 04 46 81                 - t.r3..F.
 1180  88 0d 12 00 81 89 6f 6e                 - ......on
 1188  65 78 69 74 5f 74 11 12                 - exit_t..
 1190  00 34 48 4d 45 54 41 46                 - .4HMETAF
 1198  49 4c 45 50 49 43 54 0b                 - ILEPICT.
 11a0  12 00 05 4f 4c 45 43 48                 - ...OLECH
 11a8  41 52 0c 12 00 58 4c 50                 - AR...XLP
 11b0  4f 4c 45 53 54 52 0d 12                 - OLESTR..
 11b8  00 5a 4c 50 43 4f 4c 45                 - .ZLPCOLE
 11c0  53 54 52 09 12 00 40 53                 - STR...@S
 11c8  43 4f 44 45 0b 12 00 40                 - CODE...@
 11d0  48 52 45 53 55 4c 54 04                 - HRESULT.
 11d8  46 81 8f 0b 12 00 81 91                 - F.......
 11e0  50 53 43 4f 44 45 0c 12                 - PSCODE..
 11e8  00 34 48 43 4f 4e 54 45                 - .4HCONTE
 11f0  58 54 08 12 00 05 62 79                 - XT....by
 11f8  74 65 04 46 81 8c 04 46                 - te.F...F
 1200  81 95 08 12 00 81 96 53                 - .......S
 1208  4e 42 0b 12 00 05 4f 4c                 - NB....OL
 1210  45 43 48 41 52 0e 12 00                 - ECHAR...
 1218  1c 43 4c 49 50 46 4f 52                 - .CLIPFOR
 1220  4d 41 54 04 46 81 99 11                 - MAT.F...
 1228  12 00 81 9a 4c 50 43 4c                 - ....LPCL
 1230  49 50 46 4f 52 4d 41 54                 - IPFORMAT
 1238  11 12 00 0e 52 50 43 4f                 - ....RPCO
 1240  4c 45 44 41 54 41 52 45                 - LEDATARE
 1248  50 06 72 81 90 01 33 04                 - P.r...3.
 1250  46 81 9d 15 12 00 81 9e                 - F.......
 1258  4c 50 46 4e 43 41 4e 55                 - LPFNCANU
 1260  4e 4c 4f 41 44 4e 4f 57                 - NLOADNOW
 1268  09 12 00 81 95 42 53 54                 - .....BST
 1270  52 04 46 81 a0 0b 12 00                 - R.F.....
 1278  81 a1 4c 50 42 53 54 52                 - ..LPBSTR
 1280  08 12 00 71 44 41 54 45                 - ...qDATE
 1288  10 12 00 06 56 41 52 49                 - ....VARI
 1290  41 4e 54 5f 42 4f 4f 4c                 - ANT_BOOL
 1298  0b 12 00 07 56 41 52 54                 - ....VART
 12a0  59 50 45 0a 12 00 40 44                 - YPE...@D
 12a8  49 53 50 49 44 0d 12 00                 - ISPID...
 12b0  81 a6 4d 45 4d 42 45 52                 - ..MEMBER
 12b8  49 44 0c 12 00 19 48 52                 - ID....HR
 12c0  45 46 54 59 50 45 0a 12                 - EFTYPE..
 12c8  00 0f 50 52 4f 50 49 44                 - ..PROPID
 12d0  0d 12 00 80 94 48 4f 4c                 - .....HOL
 12d8  45 4d 45 4e 55 0a 12 00                 - EMENU...
 12e0  6a 48 56 49 44 45 4f 04                 - jHVIDEO.
 12e8  46 81 ab 0d 12 00 81 ac                 - F.......
 12f0  4c 50 48 56 49 44 45 4f                 - LPHVIDEO
 12f8  07 72 80 8e 01 80 8f 04                 - .r......
 1300  46 81 ae 15 12 00 81 af                 - F.......
 1308  43 41 50 59 49 45 4c 44                 - CAPYIELD
 1310  43 41 4c 4c 42 41 43 4b                 - CALLBACK
 1318  09 72 80 8e 03 80 8f 08                 - .r......
 1320  4d 04 46 81 b1 17 12 00                 - M.F.....
 1328  81 b2 43 41 50 53 54 41                 - ..CAPSTA
 1330  54 55 53 43 41 4c 4c 42                 - TUSCALLB
 1338  41 43 4b 57 04 46 81 b1                 - ACKW.F..
 1340  16 12 00 81 b4 43 41 50                 - .....CAP
 1348  45 52 52 4f 52 43 41 4c                 - ERRORCAL
 1350  4c 42 41 43 4b 57 09 72                 - LBACKW.r
 1358  80 8e 03 80 8f 08 5a 04                 - ......Z.
 1360  46 81 b6 17 12 00 81 b7                 - F.......
 1368  43 41 50 53 54 41 54 55                 - CAPSTATU
 1370  53 43 41 4c 4c 42 41 43                 - SCALLBAC
 1378  4b 41 04 46 81 b6 16 12                 - KA.F....
 1380  00 81 b9 43 41 50 45 52                 - ...CAPER
 1388  52 4f 52 43 41 4c 4c 42                 - RORCALLB
 1390  41 43 4b 41 08 72 80 8e                 - ACKA.r..
 1398  02 80 8f 08 04 46 81 bb                 - .....F..
 13a0  17 12 00 81 bc 43 41 50                 - .....CAP
 13a8  43 4f 4e 54 52 4f 4c 43                 - CONTROLC
 13b0  41 4c 4c 42 41 43 4b 10                 - ALLBACK.
 13b8  12 00 6a 48 41 43 4d 44                 - ..jHACMD
 13c0  52 49 56 45 52 49 44 04                 - RIVERID.
 13c8  46 81 be 12 12 00 81 bf                 - F.......
 13d0  50 48 41 43 4d 44 52 49                 - PHACMDRI
 13d8  56 45 52 49 44 13 12 00                 - VERID...
 13e0  81 bf 4c 50 48 41 43 4d                 - ..LPHACM
 13e8  44 52 49 56 45 52 49 44                 - DRIVERID
 13f0  0e 12 00 6a 48 41 43 4d                 - ...jHACM
 13f8  44 52 49 56 45 52 04 46                 - DRIVER.F
 1400  81 c2 10 12 00 81 c3 50                 - .......P
 1408  48 41 43 4d 44 52 49 56                 - HACMDRIV
 1410  45 52 11 12 00 81 c3 4c                 - ER.....L
 1418  50 48 41 43 4d 44 52 49                 - PHACMDRI
 1420  56 45 52 0e 12 00 6a 48                 - VER...jH
 1428  41 43 4d 53 54 52 45 41                 - ACMSTREA
 1430  4d 04 46 81 c6 10 12 00                 - M.F.....
 1438  81 c7 50 48 41 43 4d 53                 - ..PHACMS
 1440  54 52 45 41 4d 11 12 00                 - TREAM...
 1448  81 c7 4c 50 48 41 43 4d                 - ..LPHACM
 1450  53 54 52 45 41 4d 0b 12                 - STREAM..
 1458  00 6a 48 41 43 4d 4f 42                 - .jHACMOB
 1460  4a 04 46 81 ca 0d 12 00                 - J.F.....
 1468  81 cb 50 48 41 43 4d 4f                 - ..PHACMO
 1470  42 4a 0e 12 00 81 cb 4c                 - BJ.....L
 1478  50 48 41 43 4d 4f 42 4a                 - PHACMOBJ
 1480  08 72 1a 03 81 be 19 19                 - .r......
 1488  04 46 81 ce 14 12 00 81                 - .F......
 1490  cf 41 43 4d 44 52 49 56                 - .ACMDRIV
 1498  45 52 45 4e 55 4d 43 42                 - ERENUMCB
 14a0  0d 72 80 8e 05 19 81 be                 - .r......
 14a8  3a 80 8d 80 8d 04 46 81                 - :.....F.
 14b0  d1 12 12 00 81 d2 41 43                 - ......AC
 14b8  4d 44 52 49 56 45 52 50                 - MDRIVERP
 14c0  52 4f 43 04 46 81 d3 14                 - ROC.F...
 14c8  12 00 81 d4 4c 50 41 43                 - ....LPAC
 14d0  4d 44 52 49 56 45 52 50                 - MDRIVERP
 14d8  52 4f 43 0b 72 3a 04 80                 - ROC.r:..
 14e0  8f 3a 80 8c 80 8d 04 46                 - .:.....F
 14e8  81 d6 1d 12 00 81 d7 41                 - .......A
 14f0  43 4d 46 4f 52 4d 41 54                 - CMFORMAT
 14f8  43 48 4f 4f 53 45 48 4f                 - CHOOSEHO
 1500  4f 4b 50 52 4f 43 41 04                 - OKPROCA.
 1508  46 81 d6 1d 12 00 81 d9                 - F.......
 1510  41 43 4d 46 4f 52 4d 41                 - ACMFORMA
 1518  54 43 48 4f 4f 53 45 48                 - TCHOOSEH
 1520  4f 4f 4b 50 52 4f 43 57                 - OOKPROCW
 1528  04 46 81 d6 1d 12 00 81                 - .F......
 1530  db 41 43 4d 46 49 4c 54                 - .ACMFILT
 1538  45 52 43 48 4f 4f 53 45                 - ERCHOOSE
 1540  48 4f 4f 4b 50 52 4f 43                 - HOOKPROC
 1548  41 04 46 81 d6 1d 12 00                 - A.F.....
 1550  81 dd 41 43 4d 46 49 4c                 - ..ACMFIL
 1558  54 45 52 43 48 4f 4f 53                 - TERCHOOS
 1560  45 48 4f 4f 4b 50 52 4f                 - EHOOKPRO
 1568  43 57 04 20 00 0b 0e 12                 - CW. ....
 1570  00 81 df 5f 5f 76 61 5f                 - ...__va_
 1578  6c 69 73 74 0a 12 00 2d                 - list...-
 1580  66 70 6f 73 5f 74 0a 12                 - fpos_t..
 1588  00 2d 66 70 6f 73 5f 74                 - .-fpos_t
 1590  0a 12 00 0e 74 69 6d 65                 - ....time
 1598  5f 74 09 12 00 09 69 6e                 - _t....in
 15a0  6f 5f 74 09 12 00 08 64                 - o_t....d
 15a8  65 76 5f 74 09 12 00 2d                 - ev_t...-
 15b0  6f 66 66 5f 74 0c 12 00                 - off_t...
 15b8  09 43 33 44 5f 42 4f 4f                 - .C3D_BOO
 15c0  4c 0d 12 00 09 43 33 44                 - L....C3D
 15c8  5f 49 4e 54 33 32 0e 12                 - _INT32..
 15d0  00 09 43 33 44 5f 55 49                 - ..C3D_UI
 15d8  4e 54 33 32 0e 12 00 07                 - NT32....
 15e0  43 33 44 5f 55 49 4e 54                 - C3D_UINT
 15e8  31 36 0d 12 00 05 43 33                 - 16....C3
 15f0  44 5f 55 49 4e 54 38 0f                 - D_UINT8.
 15f8  12 00 1d 43 33 44 5f 46                 - ...C3D_F
 1600  4c 4f 41 54 33 32 0d 12                 - LOAT32..
 1608  00 3b 43 33 44 5f 50 42                 - .;C3D_PB
 1610  4f 4f 4c 0e 12 00 3b 43                 - OOL...;C
 1618  33 44 5f 50 49 4e 54 33                 - 3D_PINT3
 1620  32 0f 12 00 3b 43 33 44                 - 2...;C3D
 1628  5f 50 55 49 4e 54 33 32                 - _PUINT32
 1630  10 12 00 81 5b 43 33 44                 - ....[C3D
 1638  5f 50 55 49 4e 54 31 36                 - _PUINT16
 1640  0e 12 00 5f 43 33 44 5f                 - ..._C3D_
 1648  50 55 49 4e 54 38 03 46                 - PUINT8.F
 1650  1d 11 12 00 81 f2 43 33                 - ......C3
 1658  44 5f 50 46 4c 4f 41 54                 - D_PFLOAT
 1660  33 32 0d 12 00 34 43 33                 - 32...4C3
 1668  44 5f 50 56 4f 49 44 0e                 - D_PVOID.
 1670  12 00 34 43 33 44 5f 56                 - ..4C3D_V
 1678  53 54 52 49 50 0e 12 00                 - STRIP...
 1680  81 5c 43 33 44 5f 56 4c                 - .\C3D_VL
 1688  49 53 54 0b 12 00 34 43                 - IST...4C
 1690  33 44 5f 48 54 58 04 46                 - 3D_HTX.F
 1698  81 f7 0d 12 00 81 f8 43                 - .......C
 16a0  33 44 5f 50 48 54 58 0b                 - 3D_PHTX.
 16a8  12 00 34 43 33 44 5f 48                 - ..4C3D_H
 16b0  52 43 0f 12 00 34 43 33                 - RC...4C3
 16b8  44 5f 50 52 53 44 41 54                 - D_PRSDAT
 16c0  41 08 60 04 00 04 00 00                 - A.`.....
 16c8  00 0b 61 03 1b 70 65 46                 - ..a..peF
 16d0  6c 61 67 73 0a 61 02 1b                 - lags.a..
 16d8  70 65 42 6c 75 65 0b 61                 - peBlue.a
 16e0  01 1b 70 65 47 72 65 65                 - ..peGree
 16e8  6e 09 61 00 1b 70 65 52                 - n.a..peR
 16f0  65 64 14 12 01 81 fc 74                 - ed.....t
 16f8  61 67 50 41 4c 45 54 54                 - agPALETT
 1700  45 45 4e 54 52 59 11 12                 - EENTRY..
 1708  00 81 fd 50 41 4c 45 54                 - ...PALET
 1710  54 45 45 4e 54 52 59 06                 - TEENTRY.
 1718  21 ff 00 81 fe 05 21 cf                 - !.....!.
 1720  07 06 08 60 03 00 02 00                 - ...`....
 1728  00 00 09 64 00 0a 05 07                 - ...d....
 1730  72 65 64 0b 64 00 05 05                 - red.d...
 1738  07 67 72 65 65 6e 0a 64                 - .green.d
 1740  00 00 05 07 62 6c 75 65                 - ....blue
 1748  0a 12 00 82 01 42 49 54                 - .....BIT
 1750  31 35 06 21 ff 00 82 02                 - 15.!....
 1758  08 60 0a 00 28 00 00 00                 - .`..(...
 1760  06 61 24 81 ec 61 06 61                 - .a$..a.a
 1768  20 81 ec 62 06 61 1c 81                 -  ..b.a..
 1770  ec 67 06 61 18 81 ec 72                 - .g.a...r
 1778  06 61 14 81 ec 77 06 61                 - .a...w.a
 1780  10 81 ec 74 06 61 0c 81                 - ...t.a..
 1788  ec 73 06 61 08 81 ec 7a                 - .s.a...z
 1790  06 61 04 81 ec 79 06 61                 - .a...y.a
 1798  00 81 ec 78 0d 12 00 82                 - ...x....
 17a0  04 43 33 44 5f 56 54 43                 - .C3D_VTC
 17a8  46 05 20 27 82 05 04 46                 - F. '...F
 17b0  82 04 0e 12 00 82 07 43                 - .......C
 17b8  33 44 5f 50 56 54 43 46                 - 3D_PVTCF
 17c0  05 20 27 82 08 04 20 3f                 - . '... ?
 17c8  05 08 60 02 00 08 00 00                 - ..`.....
 17d0  00 19 61 04 19 64 77 43                 - ..a..dwC
 17d8  6f 6c 6f 72 53 70 61 63                 - olorSpac
 17e0  65 48 69 67 68 56 61 6c                 - eHighVal
 17e8  75 65 18 61 00 19 64 77                 - ue.a..dw
 17f0  43 6f 6c 6f 72 53 70 61                 - ColorSpa
 17f8  63 65 4c 6f 77 56 61 6c                 - ceLowVal
 1800  75 65 10 12 01 82 0b 5f                 - ue....._
 1808  44 44 43 4f 4c 4f 52 4b                 - DDCOLORK
 1810  45 59 0f 12 00 82 0c 44                 - EY.....D
 1818  44 43 4f 4c 4f 52 4b 45                 - DCOLORKE
 1820  59 08 60 0f 00 20 00 00                 - Y.`.. ..
 1828  00 15 61 1c 19 64 77 59                 - ..a..dwY
 1830  55 56 41 6c 70 68 61 42                 - UVAlphaB
 1838  69 74 4d 61 73 6b 15 61                 - itMask.a
 1840  1c 19 64 77 52 47 42 41                 - ..dwRGBA
 1848  6c 70 68 61 42 69 74 4d                 - lphaBitM
 1850  61 73 6b 0e 61 18 19 64                 - ask.a..d
 1858  77 56 42 69 74 4d 61 73                 - wVBitMas
 1860  6b 0e 61 18 19 64 77 42                 - k.a..dwB
 1868  42 69 74 4d 61 73 6b 0e                 - BitMask.
 1870  61 14 19 64 77 55 42 69                 - a..dwUBi
 1878  74 4d 61 73 6b 0e 61 14                 - tMask.a.
 1880  19 64 77 47 42 69 74 4d                 - .dwGBitM
 1888  61 73 6b 0e 61 10 19 64                 - ask.a..d
 1890  77 59 42 69 74 4d 61 73                 - wYBitMas
 1898  6b 0e 61 10 19 64 77 52                 - k.a..dwR
 18a0  42 69 74 4d 61 73 6b 13                 - BitMask.
 18a8  61 0c 19 64 77 41 6c 70                 - a..dwAlp
 18b0  68 61 42 69 74 44 65 70                 - haBitDep
 18b8  74 68 15 61 0c 19 64 77                 - th.a..dw
 18c0  5a 42 75 66 66 65 72 42                 - ZBufferB
 18c8  69 74 44 65 70 74 68 11                 - itDepth.
 18d0  61 0c 19 64 77 59 55 56                 - a..dwYUV
 18d8  42 69 74 43 6f 75 6e 74                 - BitCount
 18e0  11 61 0c 19 64 77 52 47                 - .a..dwRG
 18e8  42 42 69 74 43 6f 75 6e                 - BBitCoun
 18f0  74 0c 61 08 19 64 77 46                 - t.a..dwF
 18f8  6f 75 72 43 43 0b 61 04                 - ourCC.a.
 1900  19 64 77 46 6c 61 67 73                 - .dwFlags
 1908  0a 61 00 19 64 77 53 69                 - .a..dwSi
 1910  7a 65 13 12 01 82 0e 5f                 - ze....._
 1918  44 44 50 49 58 45 4c 46                 - DDPIXELF
 1920  4f 52 4d 41 54 12 12 00                 - ORMAT...
 1928  82 0f 44 44 50 49 58 45                 - ..DDPIXE
 1930  4c 46 4f 52 4d 41 54 08                 - LFORMAT.
 1938  60 01 00 04 00 00 00 0a                 - `.......
 1940  61 00 19 64 77 43 61 70                 - a..dwCap
 1948  73 0d 12 01 82 11 5f 44                 - s....._D
 1950  44 53 43 41 50 53 0c 12                 - DSCAPS..
 1958  00 82 12 44 44 53 43 41                 - ...DDSCA
 1960  50 53 08 60 10 00 6c 00                 - PS.`..l.
 1968  00 00 0c 61 68 82 13 64                 - ...ah..d
 1970  64 73 43 61 70 73 14 61                 - dsCaps.a
 1978  48 82 10 64 64 70 66 50                 - H..ddpfP
 1980  69 78 65 6c 46 6f 72 6d                 - ixelForm
 1988  61 74 11 61 40 82 0d 64                 - at.a@..d
 1990  64 63 6b 43 4b 53 72 63                 - dckCKSrc
 1998  42 6c 74 15 61 38 82 0d                 - Blt.a8..
 19a0  64 64 63 6b 43 4b 53 72                 - ddckCKSr
 19a8  63 4f 76 65 72 6c 61 79                 - cOverlay
 19b0  12 61 30 82 0d 64 64 63                 - .a0..ddc
 19b8  6b 43 4b 44 65 73 74 42                 - kCKDestB
 19c0  6c 74 16 61 28 82 0d 64                 - lt.a(..d
 19c8  64 63 6b 43 4b 44 65 73                 - dckCKDes
 19d0  74 4f 76 65 72 6c 61 79                 - tOverlay
 19d8  0d 61 24 35 6c 70 53 75                 - .a$5lpSu
 19e0  72 66 61 63 65 0e 61 20                 - rface.a 
 19e8  19 64 77 52 65 73 65 72                 - .dwReser
 19f0  76 65 64 13 61 1c 19 64                 - ved.a..d
 19f8  77 41 6c 70 68 61 42 69                 - wAlphaBi
 1a00  74 44 65 70 74 68 15 61                 - tDepth.a
 1a08  18 19 64 77 5a 42 75 66                 - ..dwZBuf
 1a10  66 65 72 42 69 74 44 65                 - ferBitDe
 1a18  70 74 68 15 61 14 19 64                 - pth.a..d
 1a20  77 42 61 63 6b 42 75 66                 - wBackBuf
 1a28  66 65 72 43 6f 75 6e 74                 - ferCount
 1a30  0a 61 10 40 6c 50 69 74                 - .a.@lPit
 1a38  63 68 0b 61 0c 19 64 77                 - ch.a..dw
 1a40  57 69 64 74 68 0c 61 08                 - Width.a.
 1a48  19 64 77 48 65 69 67 68                 - .dwHeigh
 1a50  74 0b 61 04 19 64 77 46                 - t.a..dwF
 1a58  6c 61 67 73 0a 61 00 19                 - lags.a..
 1a60  64 77 53 69 7a 65 13 12                 - dwSize..
 1a68  01 82 14 5f 44 44 53 55                 - ..._DDSU
 1a70  52 46 41 43 45 44 45 53                 - RFACEDES
 1a78  43 12 12 00 82 15 44 44                 - C.....DD
 1a80  53 55 52 46 41 43 45 44                 - SURFACED
 1a88  45 53 43 17 12 01 83 0f                 - ESC.....
 1a90  49 44 69 72 65 63 74 44                 - IDirectD
 1a98  72 61 77 53 75 72 66 61                 - rawSurfa
 1aa0  63 65 17 12 00 82 17 49                 - ce.....I
 1aa8  44 69 72 65 63 74 44 72                 - DirectDr
 1ab0  61 77 53 75 72 66 61 63                 - awSurfac
 1ab8  65 04 46 82 18 04 20 07                 - e.F... .
 1ac0  05 08 60 04 00 10 00 00                 - ..`.....
 1ac8  00 0a 61 08 82 1a 44 61                 - ..a...Da
 1ad0  74 61 34 09 61 06 07 44                 - ta4.a..D
 1ad8  61 74 61 33 09 61 04 07                 - ata3.a..
 1ae0  44 61 74 61 32 09 61 00                 - Data2.a.
 1ae8  0e 44 61 74 61 31 0a 12                 - .Data1..
 1af0  01 82 1b 5f 47 55 49 44                 - ..._GUID
 1af8  09 12 00 82 1c 47 55 49                 - .....GUI
 1b00  44 08 12 00 82 1d 49 49                 - D.....II
 1b08  44 04 46 82 1e 03 46 35                 - D.F...F5
 1b10  0b 72 81 90 03 82 19 82                 - .r......
 1b18  1f 82 20 04 46 82 21 06                 - .. .F.!.
 1b20  72 0f 01 82 19 04 46 82                 - r.....F.
 1b28  23 04 46 82 23 18 12 00                 - #.F.#...
 1b30  83 10 4c 50 44 49 52 45                 - ..LPDIRE
 1b38  43 54 44 52 41 57 53 55                 - CTDRAWSU
 1b40  52 46 41 43 45 09 72 81                 - RFACE.r.
 1b48  90 02 82 19 82 26 04 46                 - .....&.F
 1b50  82 27 08 60 04 00 10 00                 - .'.`....
 1b58  00 00 0a 61 0c 40 62 6f                 - ...a.@bo
 1b60  74 74 6f 6d 09 61 08 40                 - ttom.a.@
 1b68  72 69 67 68 74 07 61 04                 - right.a.
 1b70  40 74 6f 70 08 61 00 40                 - @top.a.@
 1b78  6c 65 66 74 0c 12 01 82                 - left....
 1b80  29 74 61 67 52 45 43 54                 - )tagRECT
 1b88  04 46 82 2a 0b 12 00 82                 - .F.*....
 1b90  2b 4c 50 52 45 43 54 09                 - +LPRECT.
 1b98  72 81 90 02 82 19 82 2c                 - r......,
 1ba0  04 46 82 2d 08 60 1c 00                 - .F.-.`..
 1ba8  64 00 00 00 14 61 5c 82                 - d....a\.
 1bb0  0d 64 64 63 6b 53 72 63                 - .ddckSrc
 1bb8  43 6f 6c 6f 72 6b 65 79                 - Colorkey
 1bc0  15 61 54 82 0d 64 64 63                 - .aT..ddc
 1bc8  6b 44 65 73 74 43 6f 6c                 - kDestCol
 1bd0  6f 72 6b 65 79 11 61 50                 - orkey.aP
 1bd8  82 26 6c 70 44 44 53 50                 - .&lpDDSP
 1be0  61 74 74 65 72 6e 0f 61                 - attern.a
 1be8  50 19 64 77 46 69 6c 6c                 - P.dwFill
 1bf0  43 6f 6c 6f 72 12 61 4c                 - Color.aL
 1bf8  82 26 6c 70 44 44 53 41                 - .&lpDDSA
 1c00  6c 70 68 61 53 72 63 13                 - lphaSrc.
 1c08  61 4c 19 64 77 41 6c 70                 - aL.dwAlp
 1c10  68 61 53 72 63 43 6f 6e                 - haSrcCon
 1c18  73 74 1b 61 48 19 64 77                 - st.aH.dw
 1c20  41 6c 70 68 61 53 72 63                 - AlphaSrc
 1c28  43 6f 6e 73 74 42 69 74                 - ConstBit
 1c30  44 65 70 74 68 13 61 44                 - Depth.aD
 1c38  82 26 6c 70 44 44 53 41                 - .&lpDDSA
 1c40  6c 70 68 61 44 65 73 74                 - lphaDest
 1c48  14 61 44 19 64 77 41 6c                 - .aD.dwAl
 1c50  70 68 61 44 65 73 74 43                 - phaDestC
 1c58  6f 6e 73 74 1c 61 40 19                 - onst.a@.
 1c60  64 77 41 6c 70 68 61 44                 - dwAlphaD
 1c68  65 73 74 43 6f 6e 73 74                 - estConst
 1c70  42 69 74 44 65 70 74 68                 - BitDepth
 1c78  0e 61 3c 19 64 77 52 65                 - .a<.dwRe
 1c80  73 65 72 76 65 64 14 61                 - served.a
 1c88  38 19 64 77 41 6c 70 68                 - 8.dwAlph
 1c90  61 45 64 67 65 42 6c 65                 - aEdgeBle
 1c98  6e 64 1c 61 34 19 64 77                 - nd.a4.dw
 1ca0  41 6c 70 68 61 45 64 67                 - AlphaEdg
 1ca8  65 42 6c 65 6e 64 42 69                 - eBlendBi
 1cb0  74 44 65 70 74 68 14 61                 - tDepth.a
 1cb8  30 82 26 6c 70 44 44 53                 - 0.&lpDDS
 1cc0  5a 42 75 66 66 65 72 53                 - ZBufferS
 1cc8  72 63 0f 61 30 19 64 77                 - rc.a0.dw
 1cd0  5a 53 72 63 43 6f 6e 73                 - ZSrcCons
 1cd8  74 17 61 2c 19 64 77 5a                 - t.a,.dwZ
 1ce0  53 72 63 43 6f 6e 73 74                 - SrcConst
 1ce8  42 69 74 44 65 70 74 68                 - BitDepth
 1cf0  15 61 28 82 26 6c 70 44                 - .a(.&lpD
 1cf8  44 53 5a 42 75 66 66 65                 - DSZBuffe
 1d00  72 44 65 73 74 10 61 28                 - rDest.a(
 1d08  19 64 77 5a 44 65 73 74                 - .dwZDest
 1d10  43 6f 6e 73 74 18 61 24                 - Const.a$
 1d18  19 64 77 5a 44 65 73 74                 - .dwZDest
 1d20  43 6f 6e 73 74 42 69 74                 - ConstBit
 1d28  44 65 70 74 68 15 61 20                 - Depth.a 
 1d30  19 64 77 5a 42 75 66 66                 - .dwZBuff
 1d38  65 72 42 61 73 65 44 65                 - erBaseDe
 1d40  73 74 11 61 1c 19 64 77                 - st.a..dw
 1d48  5a 42 75 66 66 65 72 48                 - ZBufferH
 1d50  69 67 68 10 61 18 19 64                 - igh.a..d
 1d58  77 5a 42 75 66 66 65 72                 - wZBuffer
 1d60  4c 6f 77 13 61 14 19 64                 - Low.a..d
 1d68  77 5a 42 75 66 66 65 72                 - wZBuffer
 1d70  4f 70 43 6f 64 65 13 61                 - OpCode.a
 1d78  10 19 64 77 52 6f 74 61                 - ..dwRota
 1d80  74 69 6f 6e 41 6e 67 6c                 - tionAngl
 1d88  65 0b 61 0c 19 64 77 44                 - e.a..dwD
 1d90  44 52 4f 50 09 61 08 19                 - DROP.a..
 1d98  64 77 52 4f 50 0a 61 04                 - dwROP.a.
 1da0  19 64 77 44 44 46 58 0a                 - .dwDDFX.
 1da8  61 00 19 64 77 53 69 7a                 - a..dwSiz
 1db0  65 0d 12 01 82 2f 5f 44                 - e..../_D
 1db8  44 42 4c 54 46 58 0c 12                 - DBLTFX..
 1dc0  00 82 30 44 44 42 4c 54                 - ..0DDBLT
 1dc8  46 58 04 46 82 31 0e 12                 - FX.F.1..
 1dd0  00 82 32 4c 50 44 44 42                 - ..2LPDDB
 1dd8  4c 54 46 58 10 72 81 90                 - LTFX.r..
 1de0  06 82 19 82 2c 82 26 82                 - ....,.&.
 1de8  2c 19 82 33 04 46 82 34                 - ,..3.F.4
 1df0  08 60 05 00 14 00 00 00                 - .`......
 1df8  0e 61 10 82 33 6c 70 44                 - .a..3lpD
 1e00  44 42 6c 74 46 78 0b 61                 - DBltFx.a
 1e08  0c 19 64 77 46 6c 61 67                 - ..dwFlag
 1e10  73 0b 61 08 82 2c 6c 70                 - s.a..,lp
 1e18  72 53 72 63 0d 61 04 82                 - rSrc.a..
 1e20  26 6c 70 44 44 53 53 72                 - &lpDDSSr
 1e28  63 0c 61 00 82 2c 6c 70                 - c.a..,lp
 1e30  72 44 65 73 74 10 12 01                 - rDest...
 1e38  82 36 5f 44 44 42 4c 54                 - .6_DDBLT
 1e40  42 41 54 43 48 0f 12 00                 - BATCH...
 1e48  82 37 44 44 42 4c 54 42                 - .7DDBLTB
 1e50  41 54 43 48 04 46 82 38                 - ATCH.F.8
 1e58  11 12 00 82 39 4c 50 44                 - ....9LPD
 1e60  44 42 4c 54 42 41 54 43                 - DBLTBATC
 1e68  48 0b 72 81 90 04 82 19                 - H.r.....
 1e70  82 3a 19 19 04 46 82 3b                 - .:...F.;
 1e78  0e 72 81 90 06 82 19 19                 - .r......
 1e80  19 82 26 82 2c 19 04 46                 - ..&.,..F
 1e88  82 3d 0a 72 81 90 03 82                 - .=.r....
 1e90  19 19 82 26 04 46 82 3f                 - ...&.F.?
 1e98  04 46 82 15 14 12 00 82                 - .F......
 1ea0  41 4c 50 44 44 53 55 52                 - ALPDDSUR
 1ea8  46 41 43 45 44 45 53 43                 - FACEDESC
 1eb0  0a 72 81 90 03 82 26 82                 - .r....&.
 1eb8  42 35 04 46 82 43 1d 12                 - B5.F.C..
 1ec0  00 82 44 4c 50 44 44 45                 - ..DLPDDE
 1ec8  4e 55 4d 53 55 52 46 41                 - NUMSURFA
 1ed0  43 45 53 43 41 4c 4c 42                 - CESCALLB
 1ed8  41 43 4b 0a 72 81 90 03                 - ACK.r...
 1ee0  82 19 35 82 45 04 46 82                 - ..5.E.F.
 1ee8  46 0b 72 81 90 04 82 19                 - F.r.....
 1ef0  19 35 82 45 04 46 82 48                 - .5.E.F.H
 1ef8  0a 72 81 90 03 82 19 82                 - .r......
 1f00  26 19 04 46 82 4a 04 46                 - &..F.J.F
 1f08  82 13 0e 12 00 82 4c 4c                 - ......LL
 1f10  50 44 44 53 43 41 50 53                 - PDDSCAPS
 1f18  04 46 82 26 0b 72 81 90                 - .F.&.r..
 1f20  03 82 19 82 4d 82 4e 04                 - ....M.N.
 1f28  46 82 4f 08 72 81 90 02                 - F.O.r...
 1f30  82 19 19 04 46 82 51 09                 - ....F.Q.
 1f38  72 81 90 02 82 19 82 4d                 - r......M
 1f40  04 46 82 53 17 12 01 82                 - .F.S....
 1f48  da 49 44 69 72 65 63 74                 - .IDirect
 1f50  44 72 61 77 43 6c 69 70                 - DrawClip
 1f58  70 65 72 17 12 00 82 55                 - per....U
 1f60  49 44 69 72 65 63 74 44                 - IDirectD
 1f68  72 61 77 43 6c 69 70 70                 - rawClipp
 1f70  65 72 04 46 82 56 0b 72                 - er.F.V.r
 1f78  81 90 03 82 57 82 1f 82                 - ....W...
 1f80  20 04 46 82 58 06 72 0f                 -  .F.X.r.
 1f88  01 82 57 04 46 82 5a 04                 - ..W.F.Z.
 1f90  46 82 5a 09 12 00 82 2a                 - F.Z....*
 1f98  52 45 43 54 08 60 05 00                 - RECT.`..
 1fa0  20 00 00 00 0c 61 10 82                 -  ....a..
 1fa8  5d 72 63 42 6f 75 6e 64                 - ]rcBound
 1fb0  0c 61 0c 19 6e 52 67 6e                 - .a..nRgn
 1fb8  53 69 7a 65 0a 61 08 19                 - Size.a..
 1fc0  6e 43 6f 75 6e 74 09 61                 - nCount.a
 1fc8  04 19 69 54 79 70 65 0a                 - ..iType.
 1fd0  61 00 19 64 77 53 69 7a                 - a..dwSiz
 1fd8  65 13 12 01 82 5e 5f 52                 - e....^_R
 1fe0  47 4e 44 41 54 41 48 45                 - GNDATAHE
 1fe8  41 44 45 52 12 12 00 82                 - ADER....
 1ff0  5f 52 47 4e 44 41 54 41                 - _RGNDATA
 1ff8  48 45 41 44 45 52 04 20                 - HEADER. 
 2000  00 05 08 60 02 00 24 00                 - ...`..$.
 2008  00 00 0b 61 20 82 61 42                 - ...a .aB
 2010  75 66 66 65 72 08 61 00                 - uffer.a.
 2018  82 60 72 64 68 0d 12 01                 - .`rdh...
 2020  82 62 5f 52 47 4e 44 41                 - .b_RGNDA
 2028  54 41 04 46 82 63 0e 12                 - TA.F.c..
 2030  00 82 64 4c 50 52 47 4e                 - ..dLPRGN
 2038  44 41 54 41 0c 72 81 90                 - DATA.r..
 2040  04 82 57 82 2c 82 65 32                 - ..W.,.e2
 2048  04 46 82 66 04 46 80 8f                 - .F.f.F..
 2050  09 72 81 90 02 82 57 82                 - .r....W.
 2058  68 04 46 82 69 10 12 01                 - h.F.i...
 2060  82 cd 49 44 69 72 65 63                 - ..IDirec
 2068  74 44 72 61 77 10 12 00                 - tDraw...
 2070  82 6b 49 44 69 72 65 63                 - .kIDirec
 2078  74 44 72 61 77 04 46 82                 - tDraw.F.
 2080  6c 0b 72 81 90 03 82 6d                 - l.r....m
 2088  82 1f 82 20 04 46 82 6e                 - ... .F.n
 2090  06 72 0f 01 82 6d 04 46                 - .r...m.F
 2098  82 70 04 46 82 70 07 72                 - .p.F.p.r
 20a0  81 90 01 82 6d 04 46 82                 - ....m.F.
 20a8  73 18 12 00 82 db 4c 50                 - s.....LP
 20b0  44 49 52 45 43 54 44 52                 - DIRECTDR
 20b8  41 57 43 4c 49 50 50 45                 - AWCLIPPE
 20c0  52 04 46 82 75 0d 12 00                 - R.F.u...
 20c8  82 82 49 55 6e 6b 6e 6f                 - ..IUnkno
 20d0  77 6e 04 46 82 77 0b 72                 - wn.F.w.r
 20d8  81 90 03 82 78 82 1f 81                 - ....x...
 20e0  5c 04 46 82 79 06 72 0f                 - \.F.y.r.
 20e8  01 82 78 04 46 82 7b 04                 - ..x.F.{.
 20f0  46 82 7b 08 60 03 00 0c                 - F.{.`...
 20f8  00 00 00 0c 61 08 82 7d                 - ....a..}
 2100  52 65 6c 65 61 73 65 0b                 - Release.
 2108  61 04 82 7c 41 64 64 52                 - a..|AddR
 2110  65 66 13 61 00 82 7a 51                 - ef.a..zQ
 2118  75 65 72 79 49 6e 74 65                 - ueryInte
 2120  72 66 61 63 65 11 12 01                 - rface...
 2128  82 7e 49 55 6e 6b 6e 6f                 - .~IUnkno
 2130  77 6e 56 74 62 6c 04 46                 - wnVtbl.F
 2138  82 7f 08 60 01 00 04 00                 - ...`....
 2140  00 00 0b 61 00 82 80 6c                 - ...a...l
 2148  70 56 74 62 6c 0d 12 01                 - pVtbl...
 2150  82 81 49 55 6e 6b 6e 6f                 - ..IUnkno
 2158  77 6e 04 46 82 77 0c 72                 - wn.F.w.r
 2160  81 90 04 82 6d 19 82 76                 - ....m..v
 2168  82 83 04 46 82 84 04 46                 - ...F...F
 2170  81 fd 13 12 00 82 86 4c                 - .......L
 2178  50 50 41 4c 45 54 54 45                 - PPALETTE
 2180  45 4e 54 52 59 17 12 01                 - ENTRY...
 2188  82 9b 49 44 69 72 65 63                 - ..IDirec
 2190  74 44 72 61 77 50 61 6c                 - tDrawPal
 2198  65 74 74 65 17 12 00 82                 - ette....
 21a0  88 49 44 69 72 65 63 74                 - .IDirect
 21a8  44 72 61 77 50 61 6c 65                 - DrawPale
 21b0  74 74 65 04 46 82 89 0b                 - tte.F...
 21b8  72 81 90 03 82 8a 82 1f                 - r.......
 21c0  82 20 04 46 82 8b 06 72                 - . .F...r
 21c8  0f 01 82 8a 04 46 82 8d                 - .....F..
 21d0  04 46 82 8d 08 72 81 90                 - .F...r..
 21d8  02 82 8a 32 04 46 82 90                 - ...2.F..
 21e0  0c 72 81 90 05 82 8a 19                 - .r......
 21e8  19 19 82 87 04 46 82 92                 - .....F..
 21f0  11 12 00 82 ce 4c 50 44                 - .....LPD
 21f8  49 52 45 43 54 44 52 41                 - IRECTDRA
 2200  57 0c 72 81 90 04 82 8a                 - W.r.....
 2208  82 94 19 82 87 04 46 82                 - ......F.
 2210  95 04 46 82 92 08 60 07                 - ..F...`.
 2218  00 1c 00 00 00 0f 61 18                 - ......a.
 2220  82 97 53 65 74 45 6e 74                 - ..SetEnt
 2228  72 69 65 73 0f 61 14 82                 - ries.a..
 2230  96 49 6e 69 74 69 61 6c                 - .Initial
 2238  69 7a 65 0f 61 10 82 93                 - ize.a...
 2240  47 65 74 45 6e 74 72 69                 - GetEntri
 2248  65 73 0c 61 0c 82 91 47                 - es.a...G
 2250  65 74 43 61 70 73 0c 61                 - etCaps.a
 2258  08 82 8f 52 65 6c 65 61                 - ...Relea
 2260  73 65 0b 61 04 82 8e 41                 - se.a...A
 2268  64 64 52 65 66 13 61 00                 - ddRef.a.
 2270  82 8c 51 75 65 72 79 49                 - ..QueryI
 2278  6e 74 65 72 66 61 63 65                 - nterface
 2280  1b 12 01 82 98 49 44 69                 - .....IDi
 2288  72 65 63 74 44 72 61 77                 - rectDraw
 2290  50 61 6c 65 74 74 65 56                 - PaletteV
 2298  74 62 6c 04 46 82 99 08                 - tbl.F...
 22a0  60 01 00 04 00 00 00 0b                 - `.......
 22a8  61 00 82 9a 6c 70 56 74                 - a...lpVt
 22b0  62 6c 04 46 82 88 18 12                 - bl.F....
 22b8  00 82 9c 4c 50 44 49 52                 - ...LPDIR
 22c0  45 43 54 44 52 41 57 50                 - ECTDRAWP
 22c8  41 4c 45 54 54 45 04 46                 - ALETTE.F
 22d0  82 9d 0e 72 81 90 05 82                 - ...r....
 22d8  6d 19 82 87 82 9e 82 83                 - m.......
 22e0  04 46 82 9f 0d 72 81 90                 - .F...r..
 22e8  04 82 6d 82 42 82 4e 82                 - ..m.B.N.
 22f0  83 04 46 82 a1 0b 72 81                 - ..F...r.
 22f8  90 03 82 6d 82 26 82 4e                 - ...m.&.N
 2300  04 46 82 a3 08 72 81 90                 - .F...r..
 2308  02 82 42 35 04 46 82 a5                 - ..B5.F..
 2310  1a 12 00 82 a6 4c 50 44                 - .....LPD
 2318  44 45 4e 55 4d 4d 4f 44                 - DENUMMOD
 2320  45 53 43 41 4c 4c 42 41                 - ESCALLBA
 2328  43 4b 0d 72 81 90 05 82                 - CK.r....
 2330  6d 19 82 42 35 82 a7 04                 - m..B5...
 2338  46 82 a8 0d 72 81 90 05                 - F...r...
 2340  82 6d 19 82 42 35 82 45                 - .m..B5.E
 2348  04 46 82 aa 04 46 82 73                 - .F...F.s
 2350  04 20 07 19 08 60 24 00                 - . ...`$.
 2358  ac 00 00 00 0f 61 a8 19                 - .....a..
 2360  64 77 52 65 73 65 72 76                 - dwReserv
 2368  65 64 33 0f 61 a4 19 64                 - ed3.a..d
 2370  77 52 65 73 65 72 76 65                 - wReserve
 2378  64 32 0f 61 a0 19 64 77                 - d2.a..dw
 2380  52 65 73 65 72 76 65 64                 - Reserved
 2388  31 17 61 9c 19 64 77 4d                 - 1.a..dwM
 2390  61 78 48 77 43 6f 64 65                 - axHwCode
 2398  63 53 74 72 65 74 63 68                 - cStretch
 23a0  17 61 98 19 64 77 4d 69                 - .a..dwMi
 23a8  6e 48 77 43 6f 64 65 63                 - nHwCodec
 23b0  53 74 72 65 74 63 68 19                 - Stretch.
 23b8  61 94 19 64 77 4d 61 78                 - a..dwMax
 23c0  4c 69 76 65 56 69 64 65                 - LiveVide
 23c8  6f 53 74 72 65 74 63 68                 - oStretch
 23d0  19 61 90 19 64 77 4d 69                 - .a..dwMi
 23d8  6e 4c 69 76 65 56 69 64                 - nLiveVid
 23e0  65 6f 53 74 72 65 74 63                 - eoStretc
 23e8  68 17 61 8c 19 64 77 4d                 - h.a..dwM
 23f0  61 78 4f 76 65 72 6c 61                 - axOverla
 23f8  79 53 74 72 65 74 63 68                 - yStretch
 2400  17 61 88 19 64 77 4d 69                 - .a..dwMi
 2408  6e 4f 76 65 72 6c 61 79                 - nOverlay
 2410  53 74 72 65 74 63 68 0c                 - Stretch.
 2418  61 84 82 13 64 64 73 43                 - a...ddsC
 2420  61 70 73 0b 61 64 82 ad                 - aps.ad..
 2428  64 77 52 6f 70 73 16 61                 - dwRops.a
 2430  60 19 64 77 41 6c 69 67                 - `.dwAlig
 2438  6e 53 74 72 69 64 65 41                 - nStrideA
 2440  6c 69 67 6e 13 61 5c 19                 - lign.a\.
 2448  64 77 41 6c 69 67 6e 53                 - dwAlignS
 2450  69 7a 65 44 65 73 74 17                 - izeDest.
 2458  61 58 19 64 77 41 6c 69                 - aX.dwAli
 2460  67 6e 42 6f 75 6e 64 61                 - gnBounda
 2468  72 79 44 65 73 74 12 61                 - ryDest.a
 2470  54 19 64 77 41 6c 69 67                 - T.dwAlig
 2478  6e 53 69 7a 65 53 72 63                 - nSizeSrc
 2480  16 61 50 19 64 77 41 6c                 - .aP.dwAl
 2488  69 67 6e 42 6f 75 6e 64                 - ignBound
 2490  61 72 79 53 72 63 14 61                 - arySrc.a
 2498  4c 19 64 77 4e 75 6d 46                 - L.dwNumF
 24a0  6f 75 72 43 43 43 6f 64                 - ourCCCod
 24a8  65 73 19 61 48 19 64 77                 - es.aH.dw
 24b0  43 75 72 72 56 69 73 69                 - CurrVisi
 24b8  62 6c 65 4f 76 65 72 6c                 - bleOverl
 24c0  61 79 73 18 61 44 19 64                 - ays.aD.d
 24c8  77 4d 61 78 56 69 73 69                 - wMaxVisi
 24d0  62 6c 65 4f 76 65 72 6c                 - bleOverl
 24d8  61 79 73 10 61 40 19 64                 - ays.a@.d
 24e0  77 56 69 64 4d 65 6d 46                 - wVidMemF
 24e8  72 65 65 11 61 3c 19 64                 - ree.a<.d
 24f0  77 56 69 64 4d 65 6d 54                 - wVidMemT
 24f8  6f 74 61 6c 16 61 38 19                 - otal.a8.
 2500  64 77 5a 42 75 66 66 65                 - dwZBuffe
 2508  72 42 69 74 44 65 70 74                 - rBitDept
 2510  68 73 22 61 34 19 64 77                 - hs"a4.dw
 2518  41 6c 70 68 61 4f 76 65                 - AlphaOve
 2520  72 6c 61 79 53 75 72 66                 - rlaySurf
 2528  61 63 65 42 69 74 44 65                 - aceBitDe
 2530  70 74 68 73 20 61 30 19                 - pths a0.
 2538  64 77 41 6c 70 68 61 4f                 - dwAlphaO
 2540  76 65 72 6c 61 79 50 69                 - verlayPi
 2548  78 65 6c 42 69 74 44 65                 - xelBitDe
 2550  70 74 68 73 20 61 2c 19                 - pths a,.
 2558  64 77 41 6c 70 68 61 4f                 - dwAlphaO
 2560  76 65 72 6c 61 79 43 6f                 - verlayCo
 2568  6e 73 74 42 69 74 44 65                 - nstBitDe
 2570  70 74 68 73 1e 61 28 19                 - pths.a(.
 2578  64 77 41 6c 70 68 61 42                 - dwAlphaB
 2580  6c 74 53 75 72 66 61 63                 - ltSurfac
 2588  65 42 69 74 44 65 70 74                 - eBitDept
 2590  68 73 1c 61 24 19 64 77                 - hs.a$.dw
 2598  41 6c 70 68 61 42 6c 74                 - AlphaBlt
 25a0  50 69 78 65 6c 42 69 74                 - PixelBit
 25a8  44 65 70 74 68 73 1c 61                 - Depths.a
 25b0  20 19 64 77 41 6c 70 68                 -  .dwAlph
 25b8  61 42 6c 74 43 6f 6e 73                 - aBltCons
 25c0  74 42 69 74 44 65 70 74                 - tBitDept
 25c8  68 73 0c 61 1c 19 64 77                 - hs.a..dw
 25d0  53 56 43 61 70 73 0d 61                 - SVCaps.a
 25d8  18 19 64 77 50 61 6c 43                 - ..dwPalC
 25e0  61 70 73 11 61 14 19 64                 - aps.a..d
 25e8  77 46 58 41 6c 70 68 61                 - wFXAlpha
 25f0  43 61 70 73 0c 61 10 19                 - Caps.a..
 25f8  64 77 46 58 43 61 70 73                 - dwFXCaps
 2600  0e 61 0c 19 64 77 43 4b                 - .a..dwCK
 2608  65 79 43 61 70 73 0b 61                 - eyCaps.a
 2610  08 19 64 77 43 61 70 73                 - ..dwCaps
 2618  32 0a 61 04 19 64 77 43                 - 2.a..dwC
 2620  61 70 73 0a 61 00 19 64                 - aps.a..d
 2628  77 53 69 7a 65 0c 12 01                 - wSize...
 2630  82 ae 5f 44 44 43 41 50                 - .._DDCAP
 2638  53 0b 12 00 82 af 44 44                 - S.....DD
 2640  43 41 50 53 04 46 82 b0                 - CAPS.F..
 2648  0d 12 00 82 b1 4c 50 44                 - .....LPD
 2650  44 43 41 50 53 0b 72 81                 - DCAPS.r.
 2658  90 03 82 6d 82 b2 82 b2                 - ...m....
 2660  04 46 82 b3 09 72 81 90                 - .F...r..
 2668  02 82 6d 82 42 04 46 82                 - ..m.B.F.
 2670  b5 09 72 81 90 03 82 6d                 - ..r....m
 2678  32 32 04 46 82 b7 09 72                 - 22.F...r
 2680  81 90 02 82 6d 82 4e 04                 - ....m.N.
 2688  46 82 b9 08 72 81 90 02                 - F...r...
 2690  82 6d 32 04 46 82 bb 04                 - .m2.F...
 2698  46 82 bb 08 72 81 90 02                 - F...r...
 26a0  82 6d 23 04 46 82 be 04                 - .m#.F...
 26a8  46 82 1d 09 72 81 90 02                 - F...r...
 26b0  82 6d 82 c0 04 46 82 c1                 - .m...F..
 26b8  04 46 82 73 0a 72 81 90                 - .F.s.r..
 26c0  03 82 6d 80 8f 19 04 46                 - ..m....F
 26c8  82 c4 0a 72 81 90 04 82                 - ...r....
 26d0  6d 19 19 19 04 46 82 c6                 - m....F..
 26d8  09 72 81 90 03 82 6d 19                 - .r....m.
 26e0  6a 04 46 82 c8 08 60 17                 - j.F...`.
 26e8  00 5c 00 00 00 19 61 58                 - .\....aX
 26f0  82 c9 57 61 69 74 46 6f                 - ..WaitFo
 26f8  72 56 65 72 74 69 63 61                 - rVertica
 2700  6c 42 6c 61 6e 6b 13 61                 - lBlank.a
 2708  54 82 c7 53 65 74 44 69                 - T..SetDi
 2710  73 70 6c 61 79 4d 6f 64                 - splayMod
 2718  65 18 61 50 82 c5 53 65                 - e.aP..Se
 2720  74 43 6f 6f 70 65 72 61                 - tCoopera
 2728  74 69 76 65 4c 65 76 65                 - tiveLeve
 2730  6c 17 61 4c 82 c3 52 65                 - l.aL..Re
 2738  73 74 6f 72 65 44 69 73                 - storeDis
 2740  70 6c 61 79 4d 6f 64 65                 - playMode
 2748  0f 61 48 82 c2 49 6e 69                 - .aH..Ini
 2750  74 69 61 6c 69 7a 65 1b                 - tialize.
 2758  61 44 82 bf 47 65 74 56                 - aD..GetV
 2760  65 72 74 69 63 61 6c 42                 - erticalB
 2768  6c 61 6e 6b 53 74 61 74                 - lankStat
 2770  75 73 10 61 40 82 bd 47                 - us.a@..G
 2778  65 74 53 63 61 6e 4c 69                 - etScanLi
 2780  6e 65 18 61 3c 82 bc 47                 - ne.a<..G
 2788  65 74 4d 6f 6e 69 74 6f                 - etMonito
 2790  72 46 72 65 71 75 65 6e                 - rFrequen
 2798  63 79 12 61 38 82 ba 47                 - cy.a8..G
 27a0  65 74 47 44 49 53 75 72                 - etGDISur
 27a8  66 61 63 65 13 61 34 82                 - face.a4.
 27b0  b8 47 65 74 46 6f 75 72                 - .GetFour
 27b8  43 43 43 6f 64 65 73 13                 - CCCodes.
 27c0  61 30 82 b6 47 65 74 44                 - a0..GetD
 27c8  69 73 70 6c 61 79 4d 6f                 - isplayMo
 27d0  64 65 0c 61 2c 82 b4 47                 - de.a,..G
 27d8  65 74 43 61 70 73 15 61                 - etCaps.a
 27e0  28 82 ac 46 6c 69 70 54                 - (..FlipT
 27e8  6f 47 44 49 53 75 72 66                 - oGDISurf
 27f0  61 63 65 11 61 24 82 ab                 - ace.a$..
 27f8  45 6e 75 6d 53 75 72 66                 - EnumSurf
 2800  61 63 65 73 15 61 20 82                 - aces.a .
 2808  a9 45 6e 75 6d 44 69 73                 - .EnumDis
 2810  70 6c 61 79 4d 6f 64 65                 - playMode
 2818  73 15 61 1c 82 a4 44 75                 - s.a...Du
 2820  70 6c 69 63 61 74 65 53                 - plicateS
 2828  75 72 66 61 63 65 12 61                 - urface.a
 2830  18 82 a2 43 72 65 61 74                 - ...Creat
 2838  65 53 75 72 66 61 63 65                 - eSurface
 2840  12 61 14 82 a0 43 72 65                 - .a...Cre
 2848  61 74 65 50 61 6c 65 74                 - atePalet
 2850  74 65 12 61 10 82 85 43                 - te.a...C
 2858  72 65 61 74 65 43 6c 69                 - reateCli
 2860  70 70 65 72 0c 61 0c 82                 - pper.a..
 2868  74 43 6f 6d 70 61 63 74                 - tCompact
 2870  0c 61 08 82 72 52 65 6c                 - .a..rRel
 2878  65 61 73 65 0b 61 04 82                 - ease.a..
 2880  71 41 64 64 52 65 66 13                 - qAddRef.
 2888  61 00 82 6f 51 75 65 72                 - a..oQuer
 2890  79 49 6e 74 65 72 66 61                 - yInterfa
 2898  63 65 14 12 01 82 ca 49                 - ce.....I
 28a0  44 69 72 65 63 74 44 72                 - DirectDr
 28a8  61 77 56 74 62 6c 04 46                 - awVtbl.F
 28b0  82 cb 08 60 01 00 04 00                 - ...`....
 28b8  00 00 0b 61 00 82 cc 6c                 - ...a...l
 28c0  70 56 74 62 6c 04 46 82                 - pVtbl.F.
 28c8  6b 0a 72 81 90 03 82 57                 - k.r....W
 28d0  82 94 19 04 46 82 cf 08                 - ....F...
 28d8  72 81 90 02 82 57 21 04                 - r....W!.
 28e0  46 82 d1 0a 72 81 90 03                 - F...r...
 28e8  82 57 82 65 19 04 46 82                 - .W.e..F.
 28f0  d3 0a 72 81 90 03 82 57                 - ..r....W
 28f8  19 80 8f 04 46 82 d5 08                 - ....F...
 2900  60 09 00 24 00 00 00 0c                 - `..$....
 2908  61 20 82 d6 53 65 74 48                 - a ..SetH
 2910  57 6e 64 10 61 1c 82 d4                 - Wnd.a...
 2918  53 65 74 43 6c 69 70 4c                 - SetClipL
 2920  69 73 74 16 61 18 82 d2                 - ist.a...
 2928  49 73 43 6c 69 70 4c 69                 - IsClipLi
 2930  73 74 43 68 61 6e 67 65                 - stChange
 2938  64 0f 61 14 82 d0 49 6e                 - d.a...In
 2940  69 74 69 61 6c 69 7a 65                 - itialize
 2948  0c 61 10 82 6a 47 65 74                 - .a..jGet
 2950  48 57 6e 64 10 61 0c 82                 - HWnd.a..
 2958  67 47 65 74 43 6c 69 70                 - gGetClip
 2960  4c 69 73 74 0c 61 08 82                 - List.a..
 2968  5c 52 65 6c 65 61 73 65                 - \Release
 2970  0b 61 04 82 5b 41 64 64                 - .a..[Add
 2978  52 65 66 13 61 00 82 59                 - Ref.a..Y
 2980  51 75 65 72 79 49 6e 74                 - QueryInt
 2988  65 72 66 61 63 65 1b 12                 - erface..
 2990  01 82 d7 49 44 69 72 65                 - ...IDire
 2998  63 74 44 72 61 77 43 6c                 - ctDrawCl
 29a0  69 70 70 65 72 56 74 62                 - ipperVtb
 29a8  6c 04 46 82 d8 08 60 01                 - l.F...`.
 29b0  00 04 00 00 00 0b 61 00                 - ......a.
 29b8  82 d9 6c 70 56 74 62 6c                 - ..lpVtbl
 29c0  04 46 82 55 04 46 82 75                 - .F.U.F.u
 29c8  09 72 81 90 02 82 19 82                 - .r......
 29d0  dc 04 46 82 dd 04 46 82                 - ..F...F.
 29d8  0d 11 12 00 82 df 4c 50                 - ......LP
 29e0  44 44 43 4f 4c 4f 52 4b                 - DDCOLORK
 29e8  45 59 0a 72 81 90 03 82                 - EY.r....
 29f0  19 19 82 e0 04 46 82 e1                 - .....F..
 29f8  04 46 80 a3 09 72 81 90                 - .F...r..
 2a00  02 82 19 82 e3 04 46 82                 - ......F.
 2a08  e4 04 46 82 51 09 72 81                 - ..F.Q.r.
 2a10  90 03 82 19 2f 2f 04 46                 - ....//.F
 2a18  82 e7 09 72 81 90 02 82                 - ...r....
 2a20  19 82 9e 04 46 82 e9 04                 - ....F...
 2a28  46 82 10 14 12 00 82 eb                 - F.......
 2a30  4c 50 44 44 50 49 58 45                 - LPDDPIXE
 2a38  4c 46 4f 52 4d 41 54 09                 - LFORMAT.
 2a40  72 81 90 02 82 19 82 ec                 - r.......
 2a48  04 46 82 ed 09 72 81 90                 - .F...r..
 2a50  02 82 19 82 42 04 46 82                 - ....B.F.
 2a58  ef 0b 72 81 90 03 82 19                 - ..r.....
 2a60  82 94 82 42 04 46 82 f1                 - ...B.F..
 2a68  07 72 81 90 01 82 19 04                 - .r......
 2a70  46 82 f3 0d 72 81 90 05                 - F...r...
 2a78  82 19 82 2c 82 42 19 6a                 - ...,.B.j
 2a80  04 46 82 f5 09 72 81 90                 - .F...r..
 2a88  02 82 19 80 a3 04 46 82                 - ......F.
 2a90  f7 04 46 82 f3 09 72 81                 - ..F...r.
 2a98  90 02 82 19 82 75 04 46                 - .....u.F
 2aa0  82 fa 04 46 82 e1 09 72                 - ...F...r
 2aa8  81 90 03 82 19 40 40 04                 - .....@@.
 2ab0  46 82 fd 09 72 81 90 02                 - F...r...
 2ab8  82 19 82 9d 04 46 82 ff                 - .....F..
 2ac0  08 72 81 90 02 82 19 35                 - .r.....5
 2ac8  04 46 83 01 08 60 0e 00                 - .F...`..
 2ad0  38 00 00 00 0b 61 34 19                 - 8....a4.
 2ad8  64 77 46 6c 61 67 73 0a                 - dwFlags.
 2ae0  61 30 19 64 77 44 44 46                 - a0.dwDDF
 2ae8  58 13 61 28 82 0d 64 63                 - X.a(..dc
 2af0  6b 53 72 63 43 6f 6c 6f                 - kSrcColo
 2af8  72 6b 65 79 14 61 20 82                 - rkey.a .
 2b00  0d 64 63 6b 44 65 73 74                 - .dckDest
 2b08  43 6f 6c 6f 72 6b 65 79                 - Colorkey
 2b10  12 61 1c 82 26 6c 70 44                 - .a..&lpD
 2b18  44 53 41 6c 70 68 61 53                 - DSAlphaS
 2b20  72 63 13 61 1c 19 64 77                 - rc.a..dw
 2b28  41 6c 70 68 61 53 72 63                 - AlphaSrc
 2b30  43 6f 6e 73 74 1b 61 18                 - Const.a.
 2b38  19 64 77 41 6c 70 68 61                 - .dwAlpha
 2b40  53 72 63 43 6f 6e 73 74                 - SrcConst
 2b48  42 69 74 44 65 70 74 68                 - BitDepth
 2b50  13 61 14 82 26 6c 70 44                 - .a..&lpD
 2b58  44 53 41 6c 70 68 61 44                 - DSAlphaD
 2b60  65 73 74 14 61 14 19 64                 - est.a..d
 2b68  77 41 6c 70 68 61 44 65                 - wAlphaDe
 2b70  73 74 43 6f 6e 73 74 1c                 - stConst.
 2b78  61 10 19 64 77 41 6c 70                 - a..dwAlp
 2b80  68 61 44 65 73 74 43 6f                 - haDestCo
 2b88  6e 73 74 42 69 74 44 65                 - nstBitDe
 2b90  70 74 68 0e 61 0c 19 64                 - pth.a..d
 2b98  77 52 65 73 65 72 76 65                 - wReserve
 2ba0  64 14 61 08 19 64 77 41                 - d.a..dwA
 2ba8  6c 70 68 61 45 64 67 65                 - lphaEdge
 2bb0  42 6c 65 6e 64 1c 61 04                 - Blend.a.
 2bb8  19 64 77 41 6c 70 68 61                 - .dwAlpha
 2bc0  45 64 67 65 42 6c 65 6e                 - EdgeBlen
 2bc8  64 42 69 74 44 65 70 74                 - dBitDept
 2bd0  68 0a 61 00 19 64 77 53                 - h.a..dwS
 2bd8  69 7a 65 11 12 01 83 03                 - ize.....
 2be0  5f 44 44 4f 56 45 52 4c                 - _DDOVERL
 2be8  41 59 46 58 10 12 00 83                 - AYFX....
 2bf0  04 44 44 4f 56 45 52 4c                 - .DDOVERL
 2bf8  41 59 46 58 04 46 83 05                 - AYFX.F..
 2c00  12 12 00 83 06 4c 50 44                 - .....LPD
 2c08  44 4f 56 45 52 4c 41 59                 - DOVERLAY
 2c10  46 58 10 72 81 90 06 82                 - FX.r....
 2c18  19 82 2c 82 26 82 2c 19                 - ..,.&.,.
 2c20  83 07 04 46 83 08 04 46                 - ...F...F
 2c28  82 51 04 46 82 3f 08 60                 - .Q.F.?.`
 2c30  24 00 90 00 00 00 18 61                 - $......a
 2c38  8c 83 0b 55 70 64 61 74                 - ...Updat
 2c40  65 4f 76 65 72 6c 61 79                 - eOverlay
 2c48  5a 4f 72 64 65 72 19 61                 - ZOrder.a
 2c50  88 83 0a 55 70 64 61 74                 - ...Updat
 2c58  65 4f 76 65 72 6c 61 79                 - eOverlay
 2c60  44 69 73 70 6c 61 79 12                 - Display.
 2c68  61 84 83 09 55 70 64 61                 - a...Upda
 2c70  74 65 4f 76 65 72 6c 61                 - teOverla
 2c78  79 0b 61 80 83 02 55 6e                 - y.a...Un
 2c80  6c 6f 63 6b 0f 61 7c 83                 - lock.a|.
 2c88  00 53 65 74 50 61 6c 65                 - .SetPale
 2c90  74 74 65 17 61 78 82 fe                 - tte.ax..
 2c98  53 65 74 4f 76 65 72 6c                 - SetOverl
 2ca0  61 79 50 6f 73 69 74 69                 - ayPositi
 2ca8  6f 6e 10 61 74 82 fc 53                 - on.at..S
 2cb0  65 74 43 6f 6c 6f 72 4b                 - etColorK
 2cb8  65 79 0f 61 70 82 fb 53                 - ey.ap..S
 2cc0  65 74 43 6c 69 70 70 65                 - etClippe
 2cc8  72 0c 61 6c 82 f9 52 65                 - r.al..Re
 2cd0  73 74 6f 72 65 0e 61 68                 - store.ah
 2cd8  82 f8 52 65 6c 65 61 73                 - ..Releas
 2ce0  65 44 43 09 61 64 82 f6                 - eDC.ad..
 2ce8  4c 6f 63 6b 0b 61 60 82                 - Lock.a`.
 2cf0  f4 49 73 4c 6f 73 74 0f                 - .IsLost.
 2cf8  61 5c 82 f2 49 6e 69 74                 - a\..Init
 2d00  69 61 6c 69 7a 65 13 61                 - ialize.a
 2d08  58 82 f0 47 65 74 53 75                 - X..GetSu
 2d10  72 66 61 63 65 44 65 73                 - rfaceDes
 2d18  63 13 61 54 82 ee 47 65                 - c.aT..Ge
 2d20  74 50 69 78 65 6c 46 6f                 - tPixelFo
 2d28  72 6d 61 74 0f 61 50 82                 - rmat.aP.
 2d30  ea 47 65 74 50 61 6c 65                 - .GetPale
 2d38  74 74 65 17 61 4c 82 e8                 - tte.aL..
 2d40  47 65 74 4f 76 65 72 6c                 - GetOverl
 2d48  61 79 50 6f 73 69 74 69                 - ayPositi
 2d50  6f 6e 12 61 48 82 e6 47                 - on.aH..G
 2d58  65 74 46 6c 69 70 53 74                 - etFlipSt
 2d60  61 74 75 73 0a 61 44 82                 - atus.aD.
 2d68  e5 47 65 74 44 43 10 61                 - .GetDC.a
 2d70  40 82 e2 47 65 74 43 6f                 - @..GetCo
 2d78  6c 6f 72 4b 65 79 0f 61                 - lorKey.a
 2d80  3c 82 de 47 65 74 43 6c                 - <..GetCl
 2d88  69 70 70 65 72 0c 61 38                 - ipper.a8
 2d90  82 54 47 65 74 43 61 70                 - .TGetCap
 2d98  73 11 61 34 82 52 47 65                 - s.a4.RGe
 2da0  74 42 6c 74 53 74 61 74                 - tBltStat
 2da8  75 73 17 61 30 82 50 47                 - us.a0.PG
 2db0  65 74 41 74 74 61 63 68                 - etAttach
 2db8  65 64 53 75 72 66 61 63                 - edSurfac
 2dc0  65 09 61 2c 82 4b 46 6c                 - e.a,.KFl
 2dc8  69 70 17 61 28 82 49 45                 - ip.a(.IE
 2dd0  6e 75 6d 4f 76 65 72 6c                 - numOverl
 2dd8  61 79 5a 4f 72 64 65 72                 - ayZOrder
 2de0  73 19 61 24 82 47 45 6e                 - s.a$.GEn
 2de8  75 6d 41 74 74 61 63 68                 - umAttach
 2df0  65 64 53 75 72 66 61 63                 - edSurfac
 2df8  65 73 1a 61 20 82 40 44                 - es.a .@D
 2e00  65 6c 65 74 65 41 74 74                 - eleteAtt
 2e08  61 63 68 65 64 53 75 72                 - achedSur
 2e10  66 61 63 65 0c 61 1c 82                 - face.a..
 2e18  3e 42 6c 74 46 61 73 74                 - >BltFast
 2e20  0d 61 18 82 3c 42 6c 74                 - .a..<Blt
 2e28  42 61 74 63 68 08 61 14                 - Batch.a.
 2e30  82 35 42 6c 74 18 61 10                 - .5Blt.a.
 2e38  82 2e 41 64 64 4f 76 65                 - ..AddOve
 2e40  72 6c 61 79 44 69 72 74                 - rlayDirt
 2e48  79 52 65 63 74 17 61 0c                 - yRect.a.
 2e50  82 28 41 64 64 41 74 74                 - .(AddAtt
 2e58  61 63 68 65 64 53 75 72                 - achedSur
 2e60  66 61 63 65 0c 61 08 82                 - face.a..
 2e68  25 52 65 6c 65 61 73 65                 - %Release
 2e70  0b 61 04 82 24 41 64 64                 - .a..$Add
 2e78  52 65 66 13 61 00 82 22                 - Ref.a.."
 2e80  51 75 65 72 79 49 6e 74                 - QueryInt
 2e88  65 72 66 61 63 65 1b 12                 - erface..
 2e90  01 83 0c 49 44 69 72 65                 - ...IDire
 2e98  63 74 44 72 61 77 53 75                 - ctDrawSu
 2ea0  72 66 61 63 65 56 74 62                 - rfaceVtb
 2ea8  6c 04 46 83 0d 08 60 01                 - l.F...`.
 2eb0  00 04 00 00 00 0b 61 00                 - ......a.
 2eb8  83 0e 6c 70 56 74 62 6c                 - ..lpVtbl
 2ec0  04 46 82 17 03 46 06 05                 - .F...F..
 2ec8  50 05 00 03 0e 51 04 43                 - P....Q.C
 2ed0  33 44 5f 45 53 48 5f 4e                 - 3D_ESH_N
 2ed8  55 4d 11 51 03 43 33 44                 - UM.Q.C3D
 2ee0  5f 45 53 48 5f 53 4d 4f                 - _ESH_SMO
 2ee8  4f 54 48 0f 51 02 43 33                 - OTH.Q.C3
 2ef0  44 5f 45 53 48 5f 46 4c                 - D_ESH_FL
 2ef8  41 54 10 51 01 43 33 44                 - AT.Q.C3D
 2f00  5f 45 53 48 5f 53 4f 4c                 - _ESH_SOL
 2f08  49 44 0f 51 00 43 33 44                 - ID.Q.C3D
 2f10  5f 45 53 48 5f 4e 4f 4e                 - _ESH_NON
 2f18  45 0f 12 00 83 12 43 33                 - E.....C3
 2f20  44 5f 45 53 48 41 44 45                 - D_ESHADE
 2f28  05 50 07 00 03 11 51 06                 - .P....Q.
 2f30  43 33 44 5f 45 54 46 49                 - C3D_ETFI
 2f38  4c 54 5f 4e 55 4d 1c 51                 - LT_NUM.Q
 2f40  05 43 33 44 5f 45 54 46                 - .C3D_ETF
 2f48  49 4c 54 5f 4d 49 50 54                 - ILT_MIPT
 2f50  52 49 5f 4d 41 47 32 42                 - RI_MAG2B
 2f58  59 32 1c 51 04 43 33 44                 - Y2.Q.C3D
 2f60  5f 45 54 46 49 4c 54 5f                 - _ETFILT_
 2f68  4d 49 50 4c 49 4e 5f 4d                 - MIPLIN_M
 2f70  41 47 32 42 59 32 1b 51                 - AG2BY2.Q
 2f78  03 43 33 44 5f 45 54 46                 - .C3D_ETF
 2f80  49 4c 54 5f 4d 49 50 4c                 - ILT_MIPL
 2f88  49 4e 5f 4d 41 47 50 4e                 - IN_MAGPN
 2f90  54 1d 51 02 43 33 44 5f                 - T.Q.C3D_
 2f98  45 54 46 49 4c 54 5f 4d                 - ETFILT_M
 2fa0  49 4e 32 42 59 32 5f 4d                 - IN2BY2_M
 2fa8  41 47 32 42 59 32 1c 51                 - AG2BY2.Q
 2fb0  01 43 33 44 5f 45 54 46                 - .C3D_ETF
 2fb8  49 4c 54 5f 4d 49 4e 50                 - ILT_MINP
 2fc0  4e 54 5f 4d 41 47 32 42                 - NT_MAG2B
 2fc8  59 32 1b 51 00 43 33 44                 - Y2.Q.C3D
 2fd0  5f 45 54 46 49 4c 54 5f                 - _ETFILT_
 2fd8  4d 49 4e 50 4e 54 5f 4d                 - MINPNT_M
 2fe0  41 47 50 4e 54 13 12 00                 - AGPNT...
 2fe8  83 14 43 33 44 5f 45 54                 - ..C3D_ET
 2ff0  45 58 46 49 4c 54 45 52                 - EXFILTER
 2ff8  05 50 07 00 03 10 51 06                 - .P....Q.
 3000  43 33 44 5f 45 41 53 52                 - C3D_EASR
 3008  43 5f 4e 55 4d 18 51 05                 - C_NUM.Q.
 3010  43 33 44 5f 45 41 53 52                 - C3D_EASR
 3018  43 5f 49 4e 56 53 52 43                 - C_INVSRC
 3020  41 4c 50 48 41 15 51 04                 - ALPHA.Q.
 3028  43 33 44 5f 45 41 53 52                 - C3D_EASR
 3030  43 5f 53 52 43 41 4c 50                 - C_SRCALP
 3038  48 41 16 51 03 43 33 44                 - HA.Q.C3D
 3040  5f 45 41 53 52 43 5f 49                 - _EASRC_I
 3048  4e 56 44 53 54 43 4c 52                 - NVDSTCLR
 3050  13 51 02 43 33 44 5f 45                 - .Q.C3D_E
 3058  41 53 52 43 5f 44 53 54                 - ASRC_DST
 3060  43 4c 52 10 51 01 43 33                 - CLR.Q.C3
 3068  44 5f 45 41 53 52 43 5f                 - D_EASRC_
 3070  4f 4e 45 11 51 00 43 33                 - ONE.Q.C3
 3078  44 5f 45 41 53 52 43 5f                 - D_EASRC_
 3080  5a 45 52 4f 0e 12 00 83                 - ZERO....
 3088  16 43 33 44 5f 45 41 53                 - .C3D_EAS
 3090  52 43 05 50 07 00 03 10                 - RC.P....
 3098  51 06 43 33 44 5f 45 41                 - Q.C3D_EA
 30a0  44 53 54 5f 4e 55 4d 18                 - DST_NUM.
 30a8  51 05 43 33 44 5f 45 41                 - Q.C3D_EA
 30b0  44 53 54 5f 49 4e 56 53                 - DST_INVS
 30b8  52 43 41 4c 50 48 41 15                 - RCALPHA.
 30c0  51 04 43 33 44 5f 45 41                 - Q.C3D_EA
 30c8  44 53 54 5f 53 52 43 41                 - DST_SRCA
 30d0  4c 50 48 41 16 51 03 43                 - LPHA.Q.C
 30d8  33 44 5f 45 41 44 53 54                 - 3D_EADST
 30e0  5f 49 4e 56 53 52 43 43                 - _INVSRCC
 30e8  4c 52 13 51 02 43 33 44                 - LR.Q.C3D
 30f0  5f 45 41 44 53 54 5f 53                 - _EADST_S
 30f8  52 43 43 4c 52 10 51 01                 - RCCLR.Q.
 3100  43 33 44 5f 45 41 44 53                 - C3D_EADS
 3108  54 5f 4f 4e 45 11 51 00                 - T_ONE.Q.
 3110  43 33 44 5f 45 41 44 53                 - C3D_EADS
 3118  54 5f 5a 45 52 4f 0e 12                 - T_ZERO..
 3120  00 83 18 43 33 44 5f 45                 - ...C3D_E
 3128  41 44 53 54 05 50 04 00                 - ADST.P..
 3130  03 10 51 03 43 33 44 5f                 - ..Q.C3D_
 3138  45 50 52 49 4d 5f 4e 55                 - EPRIM_NU
 3140  4d 11 51 02 43 33 44 5f                 - M.Q.C3D_
 3148  45 50 52 49 4d 5f 51 55                 - EPRIM_QU
 3150  41 44 10 51 01 43 33 44                 - AD.Q.C3D
 3158  5f 45 50 52 49 4d 5f 54                 - _EPRIM_T
 3160  52 49 11 51 00 43 33 44                 - RI.Q.C3D
 3168  5f 45 50 52 49 4d 5f 4c                 - _EPRIM_L
 3170  49 4e 45 0e 12 00 83 1a                 - INE.....
 3178  43 33 44 5f 45 50 52 49                 - C3D_EPRI
 3180  4d 05 50 04 00 03 0e 51                 - M.P....Q
 3188  03 43 33 44 5f 45 54 4c                 - .C3D_ETL
 3190  5f 4e 55 4d 16 51 02 43                 - _NUM.Q.C
 3198  33 44 5f 45 54 4c 5f 41                 - 3D_ETL_A
 31a0  4c 50 48 41 5f 44 45 43                 - LPHA_DEC
 31a8  41 4c 13 51 01 43 33 44                 - AL.Q.C3D
 31b0  5f 45 54 4c 5f 4d 4f 44                 - _ETL_MOD
 31b8  55 4c 41 54 45 0f 51 00                 - ULATE.Q.
 31c0  43 33 44 5f 45 54 4c 5f                 - C3D_ETL_
 31c8  4e 4f 4e 45 10 12 00 83                 - NONE....
 31d0  1c 43 33 44 5f 45 54 4c                 - .C3D_ETL
 31d8  49 47 48 54 05 50 08 00                 - IGHT.P..
 31e0  03 0f 51 07 43 33 44 5f                 - ..Q.C3D_
 31e8  45 54 50 43 5f 4e 55 4d                 - ETPC_NUM
 31f0  0f 51 06 43 33 44 5f 45                 - .Q.C3D_E
 31f8  54 50 43 5f 53 49 58 10                 - TPC_SIX.
 3200  51 05 43 33 44 5f 45 54                 - Q.C3D_ET
 3208  50 43 5f 46 49 56 45 10                 - PC_FIVE.
 3210  51 04 43 33 44 5f 45 54                 - Q.C3D_ET
 3218  50 43 5f 46 4f 55 52 11                 - PC_FOUR.
 3220  51 03 43 33 44 5f 45 54                 - Q.C3D_ET
 3228  50 43 5f 54 48 52 45 45                 - PC_THREE
 3230  0f 51 02 43 33 44 5f 45                 - .Q.C3D_E
 3238  54 50 43 5f 54 57 4f 0f                 - TPC_TWO.
 3240  51 01 43 33 44 5f 45 54                 - Q.C3D_ET
 3248  50 43 5f 4f 4e 45 10 51                 - PC_ONE.Q
 3250  00 43 33 44 5f 45 54 50                 - .C3D_ETP
 3258  43 5f 4e 4f 4e 45 13 12                 - C_NONE..
 3260  00 83 1e 43 33 44 5f 45                 - ...C3D_E
 3268  54 50 45 52 53 50 43 4f                 - TPERSPCO
 3270  52 08 60 03 00 74 00 00                 - R.`..t..
 3278  00 08 61 70 81 f7 68 54                 - ..ap..hT
 3280  58 09 61 04 82 16 64 64                 - X.a...dd
 3288  73 64 0d 61 00 82 26 6c                 - sd.a..&l
 3290  70 44 44 53 54 65 78 0c                 - pDDSTex.
 3298  12 00 83 20 54 45 58 54                 - ... TEXT
 32a0  55 52 45 05 20 18 83 21                 - URE. ..!
 32a8  04 20 25 05 04 20 19 05                 - . %.. ..
 32b0  04 20 1a 05 08 60 0b 00                 - . ...`..
 32b8  28 00 00 00 12 61 24 19                 - (....a$.
 32c0  62 69 43 6c 72 49 6d 70                 - biClrImp
 32c8  6f 72 74 61 6e 74 0d 61                 - ortant.a
 32d0  20 19 62 69 43 6c 72 55                 -  .biClrU
 32d8  73 65 64 13 61 1c 40 62                 - sed.a.@b
 32e0  69 59 50 65 6c 73 50 65                 - iYPelsPe
 32e8  72 4d 65 74 65 72 13 61                 - rMeter.a
 32f0  18 40 62 69 58 50 65 6c                 - .@biXPel
 32f8  73 50 65 72 4d 65 74 65                 - sPerMete
 3300  72 0f 61 14 19 62 69 53                 - r.a..biS
 3308  69 7a 65 49 6d 61 67 65                 - izeImage
 3310  11 61 10 19 62 69 43 6f                 - .a..biCo
 3318  6d 70 72 65 73 73 69 6f                 - mpressio
 3320  6e 0e 61 0e 1c 62 69 42                 - n.a..biB
 3328  69 74 43 6f 75 6e 74 0c                 - itCount.
 3330  61 0c 1c 62 69 50 6c 61                 - a..biPla
 3338  6e 65 73 0c 61 08 40 62                 - nes.a.@b
 3340  69 48 65 69 67 68 74 0b                 - iHeight.
 3348  61 04 40 62 69 57 69 64                 - a.@biWid
 3350  74 68 0a 61 00 19 62 69                 - th.a..bi
 3358  53 69 7a 65 18 12 01 83                 - Size....
 3360  26 74 61 67 42 49 54 4d                 - &tagBITM
 3368  41 50 49 4e 46 4f 48 45                 - APINFOHE
 3370  41 44 45 52 04 46 83 27                 - ADER.F.'
 3378  17 12 00 83 28 4c 50 42                 - ....(LPB
 3380  49 54 4d 41 50 49 4e 46                 - ITMAPINF
 3388  4f 48 45 41 44 45 52 16                 - OHEADER.
 3390  72 80 8e 0e 81 4e 19 83                 - r....N..
 3398  29 35 08 08 08 08 83 29                 - )5.....)
 33a0  35 08 08 08 08 08 60 0d                 - 5.....`.
 33a8  00 34 00 00 00 09 61 30                 - .4....a0
 33b0  08 64 79 53 72 63 09 61                 - .dySrc.a
 33b8  2c 08 64 78 53 72 63 08                 - ,.dxSrc.
 33c0  61 28 08 79 53 72 63 08                 - a(.ySrc.
 33c8  61 24 08 78 53 72 63 09                 - a$.xSrc.
 33d0  61 20 08 64 79 44 73 74                 - a .dyDst
 33d8  09 61 1c 08 64 78 44 73                 - .a..dxDs
 33e0  74 08 61 18 08 79 44 73                 - t.a..yDs
 33e8  74 08 61 14 08 78 44 73                 - t.a..xDs
 33f0  74 09 61 10 35 6c 70 44                 - t.a.5lpD
 33f8  73 74 0c 61 0c 83 29 6c                 - st.a..)l
 3400  70 62 69 44 73 74 09 61                 - pbiDst.a
 3408  08 35 6c 70 53 72 63 0c                 - .5lpSrc.
 3410  61 04 83 29 6c 70 62 69                 - a..)lpbi
 3418  53 72 63 0b 61 00 19 64                 - Src.a..d
 3420  77 46 6c 61 67 73 13 12                 - wFlags..
 3428  00 83 2b 49 43 44 45 43                 - ..+ICDEC
 3430  4f 4d 50 52 45 53 53 45                 - OMPRESSE
 3438  58 11 72 80 8e 08 81 4e                 - X.r....N
 3440  83 29 83 29 08 08 08 08                 - .).)....
 3448  81 4e 08 60 07 00 1c 00                 - .N.`....
 3450  00 00 14 61 18 81 4e 68                 - ...a..Nh
 3458  69 63 44 65 63 6f 6d 70                 - icDecomp
 3460  72 65 73 73 6f 72 09 61                 - ressor.a
 3468  14 08 64 79 44 73 74 09                 - ..dyDst.
 3470  61 10 08 64 78 44 73 74                 - a..dxDst
 3478  09 61 0c 08 64 79 53 72                 - .a..dySr
 3480  63 09 61 08 08 64 78 53                 - c.a..dxS
 3488  72 63 10 61 04 83 29 6c                 - rc.a..)l
 3490  70 62 69 53 75 67 67 65                 - pbiSugge
 3498  73 74 0b 61 00 83 29 6c                 - st.a..)l
 34a0  70 62 69 49 6e 12 12 00                 - pbiIn...
 34a8  83 2e 49 43 44 52 41 57                 - ..ICDRAW
 34b0  53 55 47 47 45 53 54 08                 - SUGGEST.
 34b8  72 40 03 80 8d 3a 40 04                 - r@...:@.
 34c0  46 83 30 0c 72 80 8e 04                 - F.0.r...
 34c8  81 4e 19 80 8e 83 31 04                 - .N....1.
 34d0  46 83 30 08 60 03 00 0c                 - F.0.`...
 34d8  00 00 00 0b 61 08 83 33                 - ....a..3
 34e0  53 74 61 74 75 73 0b 61                 - Status.a
 34e8  04 80 8d 6c 50 61 72 61                 - ...lPara
 34f0  6d 0b 61 00 19 64 77 46                 - m.a..dwF
 34f8  6c 61 67 73 14 12 00 83                 - lags....
 3500  34 49 43 53 45 54 53 54                 - 4ICSETST
 3508  41 54 55 53 50 52 4f 43                 - ATUSPROC
 3510  05 72 33 01 33 0b 72 2d                 - .r3.3.r-
 3518  04 80 8f 3a 80 8c 80 8d                 - ...:....
 3520  04 20 1f 1b 08 60 06 00                 - . ...`..
 3528  40 00 00 00 10 61 20 83                 - @....a .
 3530  38 72 67 62 52 65 73 65                 - 8rgbRese
 3538  72 76 65 64 0e 61 1c 1a                 - rved.a..
 3540  66 49 6e 63 55 70 64 61                 - fIncUpda
 3548  74 65 0c 61 18 1a 66 52                 - te.a..fR
 3550  65 73 74 6f 72 65 0c 61                 - estore.a
 3558  08 82 5d 72 63 50 61 69                 - ..]rcPai
 3560  6e 74 0a 61 04 1a 66 45                 - nt.a..fE
 3568  72 61 73 65 08 61 00 80                 - rase.a..
 3570  a3 68 64 63 13 12 01 83                 - .hdc....
 3578  39 74 61 67 50 41 49 4e                 - 9tagPAIN
 3580  54 53 54 52 55 43 54 10                 - TSTRUCT.
 3588  12 00 83 3a 50 41 49 4e                 - ...:PAIN
 3590  54 53 54 52 55 43 54 06                 - TSTRUCT.
 3598  72 1a 01 82 26 05 50 06                 - r...&.P.
 35a0  00 03 11 51 0b 43 33 44                 - ...Q.C3D
 35a8  5f 45 50 46 5f 59 55 56                 - _EPF_YUV
 35b0  34 32 32 0d 51 08 43 33                 - 422.Q.C3
 35b8  44 5f 45 50 46 5f 59 38                 - D_EPF_Y8
 35c0  11 51 07 43 33 44 5f 45                 - .Q.C3D_E
 35c8  50 46 5f 52 47 42 33 33                 - PF_RGB33
 35d0  32 12 51 06 43 33 44 5f                 - 2.Q.C3D_
 35d8  45 50 46 5f 52 47 42 38                 - EPF_RGB8
 35e0  38 38 38 11 51 04 43 33                 - 888.Q.C3
 35e8  44 5f 45 50 46 5f 52 47                 - D_EPF_RG
 35f0  42 35 36 35 12 51 03 43                 - B565.Q.C
 35f8  33 44 5f 45 50 46 5f 52                 - 3D_EPF_R
 3600  47 42 31 35 35 35 10 12                 - GB1555..
 3608  00 83 3d 43 33 44 5f 45                 - ..=C3D_E
 3610  50 49 58 46 4d 54 04 46                 - PIXFMT.F
 3618  82 08 06 72 1a 02 6a 08                 - ...r..j.
 3620  08 60 0a 00 28 00 00 00                 - .`..(...
 3628  11 61 24 5a 6c 70 73 7a                 - .a$Zlpsz
 3630  43 6c 61 73 73 4e 61 6d                 - ClassNam
 3638  65 10 61 20 5a 6c 70 73                 - e.a Zlps
 3640  7a 4d 65 6e 75 4e 61 6d                 - zMenuNam
 3648  65 12 61 1c 80 a2 68 62                 - e.a...hb
 3650  72 42 61 63 6b 67 72 6f                 - rBackgro
 3658  75 6e 64 0c 61 18 80 b6                 - und.a...
 3660  68 43 75 72 73 6f 72 0a                 - hCursor.
 3668  61 14 80 a8 68 49 63 6f                 - a...hIco
 3670  6e 0e 61 10 80 ab 68 49                 - n.a...hI
 3678  6e 73 74 61 6e 63 65 0e                 - nstance.
 3680  61 0c 08 63 62 57 6e 64                 - a..cbWnd
 3688  45 78 74 72 61 0e 61 08                 - Extra.a.
 3690  08 63 62 43 6c 73 45 78                 - .cbClsEx
 3698  74 72 61 10 61 04 80 d3                 - tra.a...
 36a0  6c 70 66 6e 57 6e 64 50                 - lpfnWndP
 36a8  72 6f 63 09 61 00 3a 73                 - roc.a.:s
 36b0  74 79 6c 65 11 12 01 83                 - tyle....
 36b8  41 74 61 67 57 4e 44 43                 - AtagWNDC
 36c0  4c 41 53 53 41 0e 12 00                 - LASSA...
 36c8  83 42 57 4e 44 43 4c 41                 - .BWNDCLA
 36d0  53 53 41 0d 12 00 83 43                 - SSA....C
 36d8  57 4e 44 43 4c 41 53 53                 - WNDCLASS
 36e0  07 72 33 03 0b 06 06 04                 - .r3.....
 36e8  72 06 00 0a 72 08 04 80                 - r...r...
 36f0  ab 80 ab 58 08 05 72 08                 - ...X..r.
 36f8  01 33 08 60 02 00 08 00                 - .3.`....
 3700  00 00 05 61 04 40 79 05                 - ...a.@y.
 3708  61 00 40 78 0d 12 01 83                 - a.@x....
 3710  49 74 61 67 50 4f 49 4e                 - ItagPOIN
 3718  54 0a 12 00 83 4a 50 4f                 - T....JPO
 3720  49 4e 54 08 60 06 00 1c                 - INT.`...
 3728  00 00 00 07 61 14 83 4b                 - ....a..K
 3730  70 74 08 61 10 19 74 69                 - pt.a..ti
 3738  6d 65 0b 61 0c 80 8d 6c                 - me.a...l
 3740  50 61 72 61 6d 0b 61 08                 - Param.a.
 3748  80 8c 77 50 61 72 61 6d                 - ..wParam
 3750  0b 61 04 3a 6d 65 73 73                 - .a.:mess
 3758  61 67 65 09 61 00 80 8f                 - age.a...
 3760  68 77 6e 64 0b 12 01 83                 - hwnd....
 3768  4c 74 61 67 4d 53 47 08                 - LtagMSG.
 3770  12 00 83 4d 4d 53 47 05                 - ...MMSG.
 3778  72 33 01 05 04 46 82 5d                 - r3...F.]
 3780  08 72 33 03 0b 0b 83 50                 - .r3....P
 3788  06 72 33 02 0b 0b 05 72                 - .r3....r
 3790  1a 01 33 0c 72 1a 05 83                 - ..3.r...
 3798  1b 83 13 1a 1a 83 1d 08                 - ........
 37a0  60 0a 00 10 00 00 00 08                 - `.......
 37a8  61 0e 07 63 6c 75 74 06                 - a..clut.
 37b0  61 0d 05 76 30 06 61 0c                 - a..v0.a.
 37b8  05 75 30 06 61 0a 06 79                 - .u0.a..y
 37c0  30 06 61 08 06 78 30 08                 - 0.a..x0.
 37c8  61 07 05 63 6f 64 65 06                 - a..code.
 37d0  61 06 05 62 30 06 61 05                 - a..b0.a.
 37d8  05 67 30 06 61 04 05 72                 - .g0.a..r
 37e0  30 07 61 00 0e 74 61 67                 - 0.a..tag
 37e8  0b 12 00 83 55 53 50 52                 - ....USPR
 37f0  54 5f 38 04 46 83 56 08                 - T_8.F.V.
 37f8  72 33 03 83 57 06 06 08                 - r3..W...
 3800  60 0c 00 14 00 00 00 05                 - `.......
 3808  61 12 06 68 05 61 10 06                 - a..h.a..
 3810  77 08 61 0e 07 63 6c 75                 - w.a..clu
 3818  74 06 61 0d 05 76 30 06                 - t.a..v0.
 3820  61 0c 05 75 30 06 61 0a                 - a..u0.a.
 3828  06 79 30 06 61 08 06 78                 - .y0.a..x
 3830  30 08 61 07 05 63 6f 64                 - 0.a..cod
 3838  65 06 61 06 05 62 30 06                 - e.a..b0.
 3840  61 05 05 67 30 06 61 04                 - a..g0.a.
 3848  05 72 30 07 61 00 0e 74                 - .r0.a..t
 3850  61 67 09 12 00 83 59 53                 - ag....YS
 3858  50 52 54 04 46 83 5a 06                 - PRT.F.Z.
 3860  72 33 01 83 5b 06 72 33                 - r3..[.r3
 3868  01 83 57 09 72 33 04 82                 - ..W.r3..
 3870  08 05 05 05 08 60 0d 00                 - .....`..
 3878  18 00 00 00 06 61 16 06                 - .....a..
 3880  79 33 06 61 14 06 78 33                 - y3.a..x3
 3888  06 61 12 06 79 32 06 61                 - .a..y2.a
 3890  10 06 78 32 06 61 0e 06                 - ..x2.a..
 3898  79 31 06 61 0c 06 78 31                 - y1.a..x1
 38a0  06 61 0a 06 79 30 06 61                 - .a..y0.a
 38a8  08 06 78 30 08 61 07 05                 - ..x0.a..
 38b0  63 6f 64 65 06 61 06 05                 - code.a..
 38b8  62 30 06 61 05 05 67 30                 - b0.a..g0
 38c0  06 61 04 05 72 30 07 61                 - .a..r0.a
 38c8  00 0e 74 61 67 0c 12 00                 - ..tag...
 38d0  83 5f 50 4f 4c 59 5f 46                 - ._POLY_F
 38d8  34 04 46 83 60 06 72 33                 - 4.F.`.r3
 38e0  01 83 61 08 60 19 00 24                 - ..a.`..$
 38e8  00 00 00 06 61 22 06 79                 - ....a".y
 38f0  33 06 61 20 06 78 33 08                 - 3.a .x3.
 38f8  61 1f 05 70 61 64 33 06                 - a..pad3.
 3900  61 1e 05 62 33 06 61 1d                 - a..b3.a.
 3908  05 67 33 06 61 1c 05 72                 - .g3.a..r
 3910  33 06 61 1a 06 79 32 06                 - 3.a..y2.
 3918  61 18 06 78 32 08 61 17                 - a..x2.a.
 3920  05 70 61 64 32 06 61 16                 - .pad2.a.
 3928  05 62 32 06 61 15 05 67                 - .b2.a..g
 3930  32 06 61 14 05 72 32 06                 - 2.a..r2.
 3938  61 12 06 79 31 06 61 10                 - a..y1.a.
 3940  06 78 31 08 61 0f 05 70                 - .x1.a..p
 3948  61 64 31 06 61 0e 05 62                 - ad1.a..b
 3950  31 06 61 0d 05 67 31 06                 - 1.a..g1.
 3958  61 0c 05 72 31 06 61 0a                 - a..r1.a.
 3960  06 79 30 06 61 08 06 78                 - .y0.a..x
 3968  30 08 61 07 05 63 6f 64                 - 0.a..cod
 3970  65 06 61 06 05 62 30 06                 - e.a..b0.
 3978  61 05 05 67 30 06 61 04                 - a..g0.a.
 3980  05 72 30 07 61 00 0e 74                 - .r0.a..t
 3988  61 67 0c 12 00 83 63 50                 - ag....cP
 3990  4f 4c 59 5f 47 34 04 46                 - OLY_G4.F
 3998  83 64 06 72 33 01 83 65                 - .d.r3..e
 39a0  08 60 19 00 28 00 00 00                 - .`..(...
 39a8  08 61 26 07 70 61 64 32                 - .a&.pad2
 39b0  06 61 25 05 76 33 06 61                 - .a%.v3.a
 39b8  24 05 75 33 06 61 22 06                 - $.u3.a".
 39c0  79 33 06 61 20 06 78 33                 - y3.a .x3
 39c8  08 61 1e 07 70 61 64 31                 - .a..pad1
 39d0  06 61 1d 05 76 32 06 61                 - .a..v2.a
 39d8  1c 05 75 32 06 61 1a 06                 - ..u2.a..
 39e0  79 32 06 61 18 06 78 32                 - y2.a..x2
 39e8  09 61 16 07 74 70 61 67                 - .a..tpag
 39f0  65 06 61 15 05 76 31 06                 - e.a..v1.
 39f8  61 14 05 75 31 06 61 12                 - a..u1.a.
 3a00  06 79 31 06 61 10 06 78                 - .y1.a..x
 3a08  31 08 61 0e 07 63 6c 75                 - 1.a..clu
 3a10  74 06 61 0d 05 76 30 06                 - t.a..v0.
 3a18  61 0c 05 75 30 06 61 0a                 - a..u0.a.
 3a20  06 79 30 06 61 08 06 78                 - .y0.a..x
 3a28  30 08 61 07 05 63 6f 64                 - 0.a..cod
 3a30  65 06 61 06 05 62 30 06                 - e.a..b0.
 3a38  61 05 05 67 30 06 61 04                 - a..g0.a.
 3a40  05 72 30 07 61 00 0e 74                 - .r0.a..t
 3a48  61 67 0d 12 00 83 67 50                 - ag....gP
 3a50  4f 4c 59 5f 46 54 34 04                 - OLY_FT4.
 3a58  46 83 68 06 72 33 01 83                 - F.h.r3..
 3a60  69 08 60 13 00 1c 00 00                 - i.`.....
 3a68  00 06 61 1a 06 79 32 06                 - ..a..y2.
 3a70  61 18 06 78 32 08 61 17                 - a..x2.a.
 3a78  05 70 61 64 32 06 61 16                 - .pad2.a.
 3a80  05 62 32 06 61 15 05 67                 - .b2.a..g
 3a88  32 06 61 14 05 72 32 06                 - 2.a..r2.
 3a90  61 12 06 79 31 06 61 10                 - a..y1.a.
 3a98  06 78 31 08 61 0f 05 70                 - .x1.a..p
 3aa0  61 64 31 06 61 0e 05 62                 - ad1.a..b
 3aa8  31 06 61 0d 05 67 31 06                 - 1.a..g1.
 3ab0  61 0c 05 72 31 06 61 0a                 - a..r1.a.
 3ab8  06 79 30 06 61 08 06 78                 - .y0.a..x
 3ac0  30 08 61 07 05 63 6f 64                 - 0.a..cod
 3ac8  65 06 61 06 05 62 30 06                 - e.a..b0.
 3ad0  61 05 05 67 30 06 61 04                 - a..g0.a.
 3ad8  05 72 30 07 61 00 0e 74                 - .r0.a..t
 3ae0  61 67 0c 12 00 83 6b 50                 - ag....kP
 3ae8  4f 4c 59 5f 47 33 04 46                 - OLY_G3.F
 3af0  83 6c 06 72 33 01 83 6d                 - .l.r3..m
 3af8  08 60 14 00 20 00 00 00                 - .`.. ...
 3b00  08 61 1e 07 70 61 64 31                 - .a..pad1
 3b08  06 61 1d 05 76 32 06 61                 - .a..v2.a
 3b10  1c 05 75 32 06 61 1a 06                 - ..u2.a..
 3b18  79 32 06 61 18 06 78 32                 - y2.a..x2
 3b20  09 61 16 07 74 70 61 67                 - .a..tpag
 3b28  65 06 61 15 05 76 31 06                 - e.a..v1.
 3b30  61 14 05 75 31 06 61 12                 - a..u1.a.
 3b38  06 79 31 06 61 10 06 78                 - .y1.a..x
 3b40  31 08 61 0e 07 63 6c 75                 - 1.a..clu
 3b48  74 06 61 0d 05 76 30 06                 - t.a..v0.
 3b50  61 0c 05 75 30 06 61 0a                 - a..u0.a.
 3b58  06 79 30 06 61 08 06 78                 - .y0.a..x
 3b60  30 08 61 07 05 63 6f 64                 - 0.a..cod
 3b68  65 06 61 06 05 62 30 06                 - e.a..b0.
 3b70  61 05 05 67 30 06 61 04                 - a..g0.a.
 3b78  05 72 30 07 61 00 0e 74                 - .r0.a..t
 3b80  61 67 0d 12 00 83 6f 50                 - ag....oP
 3b88  4f 4c 59 5f 46 54 33 04                 - OLY_FT3.
 3b90  46 83 70 06 72 33 01 83                 - F.p.r3..
 3b98  71 08 60 1c 00 28 00 00                 - q.`..(..
 3ba0  00 08 61 26 07 70 61 64                 - ..a&.pad
 3ba8  32 06 61 25 05 76 32 06                 - 2.a%.v2.
 3bb0  61 24 05 75 32 06 61 22                 - a$.u2.a"
 3bb8  06 79 32 06 61 20 06 78                 - .y2.a .x
 3bc0  32 06 61 1f 05 70 32 06                 - 2.a..p2.
 3bc8  61 1e 05 62 32 06 61 1d                 - a..b2.a.
 3bd0  05 67 32 06 61 1c 05 72                 - .g2.a..r
 3bd8  32 09 61 1a 07 74 70 61                 - 2.a..tpa
 3be0  67 65 06 61 19 05 76 31                 - ge.a..v1
 3be8  06 61 18 05 75 31 06 61                 - .a..u1.a
 3bf0  16 06 79 31 06 61 14 06                 - ..y1.a..
 3bf8  78 31 06 61 13 05 70 31                 - x1.a..p1
 3c00  06 61 12 05 62 31 06 61                 - .a..b1.a
 3c08  11 05 67 31 06 61 10 05                 - ..g1.a..
 3c10  72 31 08 61 0e 07 63 6c                 - r1.a..cl
 3c18  75 74 06 61 0d 05 76 30                 - ut.a..v0
 3c20  06 61 0c 05 75 30 06 61                 - .a..u0.a
 3c28  0a 06 79 30 06 61 08 06                 - ..y0.a..
 3c30  78 30 08 61 07 05 63 6f                 - x0.a..co
 3c38  64 65 06 61 06 05 62 30                 - de.a..b0
 3c40  06 61 05 05 67 30 06 61                 - .a..g0.a
 3c48  04 05 72 30 07 61 00 0e                 - ..r0.a..
 3c50  74 61 67 0d 12 00 83 73                 - tag....s
 3c58  50 4f 4c 59 5f 47 54 33                 - POLY_GT3
 3c60  04 46 83 74 06 72 33 01                 - .F.t.r3.
 3c68  83 75 03 46 05 04 46 83                 - .u.F..F.
 3c70  20 0d 12 00 83 78 50 54                 -  ....xPT
 3c78  45 58 54 55 52 45 08 72                 - EXTURE.r
 3c80  1a 02 83 77 83 79 05 20                 - ...w.y. 
 3c88  0a 81 f4 05 50 07 00 03                 - ....P...
 3c90  12 51 0f 43 33 44 5f 45                 - .Q.C3D_E
 3c98  54 46 5f 52 47 42 34 34                 - TF_RGB44
 3ca0  34 34 11 51 0b 43 33 44                 - 44.Q.C3D
 3ca8  5f 45 54 46 5f 59 55 56                 - _ETF_YUV
 3cb0  34 32 32 0d 51 08 43 33                 - 422.Q.C3
 3cb8  44 5f 45 54 46 5f 59 38                 - D_ETF_Y8
 3cc0  11 51 07 43 33 44 5f 45                 - .Q.C3D_E
 3cc8  54 46 5f 52 47 42 33 33                 - TF_RGB33
 3cd0  32 12 51 06 43 33 44 5f                 - 2.Q.C3D_
 3cd8  45 54 46 5f 52 47 42 38                 - ETF_RGB8
 3ce0  38 38 38 11 51 04 43 33                 - 888.Q.C3
 3ce8  44 5f 45 54 46 5f 52 47                 - D_ETF_RG
 3cf0  42 35 36 35 12 51 03 43                 - B565.Q.C
 3cf8  33 44 5f 45 54 46 5f 52                 - 3D_ETF_R
 3d00  47 42 31 35 35 35 10 12                 - GB1555..
 3d08  00 83 7c 43 33 44 5f 45                 - ..|C3D_E
 3d10  54 45 58 46 4d 54 08 60                 - TEXFMT.`
 3d18  05 00 04 00 00 00 0b 61                 - .......a
 3d20  00 81 e9 75 33 32 41 6c                 - ...u32Al
 3d28  6c 07 64 00 18 08 09 61                 - l.d....a
 3d30  07 64 00 10 08 09 62 07                 - .d....b.
 3d38  64 00 08 08 09 67 07 64                 - d....g.d
 3d40  00 00 08 09 72 0e 12 00                 - ....r...
 3d48  83 7e 43 33 44 5f 43 4f                 - .~C3D_CO
 3d50  4c 4f 52 08 60 07 00 44                 - LOR.`..D
 3d58  00 00 00 14 61 40 83 7f                 - ....a@..
 3d60  63 6c 72 54 65 78 43 68                 - clrTexCh
 3d68  72 6f 6d 61 4b 65 79 0f                 - romaKey.
 3d70  61 3c 83 7d 65 54 65 78                 - a<.}eTex
 3d78  46 6f 72 6d 61 74 16 61                 - Format.a
 3d80  38 81 e9 75 33 32 4d 61                 - 8..u32Ma
 3d88  78 4d 61 70 59 53 69 7a                 - xMapYSiz
 3d90  65 4c 67 32 16 61 34 81                 - eLg2.a4.
 3d98  e9 75 33 32 4d 61 78 4d                 - .u32MaxM
 3da0  61 70 58 53 69 7a 65 4c                 - apXSizeL
 3da8  67 32 0e 61 08 83 7b 61                 - g2.a..{a
 3db0  70 76 4c 65 76 65 6c 73                 - pvLevels
 3db8  0c 61 04 81 e7 62 4d 69                 - .a...bMi
 3dc0  70 4d 61 70 0c 61 00 81                 - pMap.a..
 3dc8  e9 75 33 32 53 69 7a 65                 - .u32Size
 3dd0  0d 12 00 83 80 43 33 44                 - .....C3D
 3dd8  5f 54 4d 41 50 05 50 09                 - _TMAP.P.
 3de0  00 03 0d 51 08 43 33 44                 - ...Q.C3D
 3de8  5f 45 43 5f 4e 55 4d 11                 - _EC_NUM.
 3df0  51 07 43 33 44 5f 45 43                 - Q.C3D_EC
 3df8  5f 55 4e 55 53 45 44 31                 - _UNUSED1
 3e00  13 51 06 43 33 44 5f 45                 - .Q.C3D_E
 3e08  43 5f 4e 4f 54 49 4d 50                 - C_NOTIMP
 3e10  59 45 54 12 51 05 43 33                 - YET.Q.C3
 3e18  44 5f 45 43 5f 42 41 44                 - D_EC_BAD
 3e20  53 54 41 54 45 11 51 04                 - STATE.Q.
 3e28  43 33 44 5f 45 43 5f 55                 - C3D_EC_U
 3e30  4e 55 53 45 44 30 12 51                 - NUSED0.Q
 3e38  03 43 33 44 5f 45 43 5f                 - .C3D_EC_
 3e40  42 41 44 50 41 52 41 4d                 - BADPARAM
 3e48  16 51 02 43 33 44 5f 45                 - .Q.C3D_E
 3e50  43 5f 4d 45 4d 41 4c 4c                 - C_MEMALL
 3e58  4f 43 46 41 49 4c 11 51                 - OCFAIL.Q
 3e60  01 43 33 44 5f 45 43 5f                 - .C3D_EC_
 3e68  47 45 4e 46 41 49 4c 0c                 - GENFAIL.
 3e70  51 00 43 33 44 5f 45 43                 - Q.C3D_EC
 3e78  5f 4f 4b 0b 12 00 83 82                 - _OK.....
 3e80  43 33 44 5f 45 43 08 60                 - C3D_EC.`
 3e88  05 00 0e 00 00 00 0d 61                 - .......a
 3e90  0a 19 62 66 4f 66 66 42                 - ..bfOffB
 3e98  69 74 73 0f 61 08 1c 62                 - its.a..b
 3ea0  66 52 65 73 65 72 76 65                 - fReserve
 3ea8  64 32 0f 61 06 1c 62 66                 - d2.a..bf
 3eb0  52 65 73 65 72 76 65 64                 - Reserved
 3eb8  31 0a 61 02 19 62 66 53                 - 1.a..bfS
 3ec0  69 7a 65 0a 61 00 1c 62                 - ize.a..b
 3ec8  66 54 79 70 65 18 12 01                 - fType...
 3ed0  83 84 74 61 67 42 49 54                 - ..tagBIT
 3ed8  4d 41 50 46 49 4c 45 48                 - MAPFILEH
 3ee0  45 41 44 45 52 15 12 00                 - EADER...
 3ee8  83 85 42 49 54 4d 41 50                 - ..BITMAP
 3ef0  46 49 4c 45 48 45 41 44                 - FILEHEAD
 3ef8  45 52 15 12 00 83 27 42                 - ER....'B
 3f00  49 54 4d 41 50 49 4e 46                 - ITMAPINF
 3f08  4f 48 45 41 44 45 52 06                 - OHEADER.
 3f10  72 1a 01 83 79 06 72 1a                 - r...y.r.
 3f18  01 83 77 03 46 0b 04 20                 - ..w.F.. 
 3f20  02 0b 05 72 1a 01 0b 04                 - ...r....
 3f28  20 4f 05 04 20 4f 05 08                 -  O.. O..
 3f30  60 04 00 10 00 00 00 0c                 - `.......
 3f38  61 0c 3a 77 42 75 74 74                 - a.:wButt
 3f40  6f 6e 73 09 61 08 3a 77                 - ons.a.:w
 3f48  5a 70 6f 73 09 61 04 3a                 - Zpos.a.:
 3f50  77 59 70 6f 73 09 61 00                 - wYpos.a.
 3f58  3a 77 58 70 6f 73 10 12                 - :wXpos..
 3f60  01 83 8f 6a 6f 79 69 6e                 - ...joyin
 3f68  66 6f 5f 74 61 67 0c 12                 - fo_tag..
 3f70  00 83 90 4a 4f 59 49 4e                 - ...JOYIN
 3f78  46 4f 04 20 1f 3e 04 20                 - FO. .>. 
 3f80  1f 3e 05 21 03 01 3e 08                 - .>.!..>.
 3f88  60 18 00 94 01 00 00 0d                 - `.......
 3f90  61 90 83 94 73 7a 4f 45                 - a...szOE
 3f98  4d 56 78 44 0d 61 70 83                 - MVxD.ap.
 3fa0  93 73 7a 52 65 67 4b 65                 - .szRegKe
 3fa8  79 0f 61 6c 3a 77 4d 61                 - y.al:wMa
 3fb0  78 42 75 74 74 6f 6e 73                 - xButtons
 3fb8  0c 61 68 3a 77 4e 75 6d                 - .ah:wNum
 3fc0  41 78 65 73 0c 61 64 3a                 - Axes.ad:
 3fc8  77 4d 61 78 41 78 65 73                 - wMaxAxes
 3fd0  09 61 60 3a 77 43 61 70                 - .a`:wCap
 3fd8  73 09 61 5c 3a 77 56 6d                 - s.a\:wVm
 3fe0  61 78 09 61 58 3a 77 56                 - ax.aX:wV
 3fe8  6d 69 6e 09 61 54 3a 77                 - min.aT:w
 3ff0  55 6d 61 78 09 61 50 3a                 - Umax.aP:
 3ff8  77 55 6d 69 6e 09 61 4c                 - wUmin.aL
 4000  3a 77 52 6d 61 78 09 61                 - :wRmax.a
 4008  48 3a 77 52 6d 69 6e 0e                 - H:wRmin.
 4010  61 44 3a 77 50 65 72 69                 - aD:wPeri
 4018  6f 64 4d 61 78 0e 61 40                 - odMax.a@
 4020  3a 77 50 65 72 69 6f 64                 - :wPeriod
 4028  4d 69 6e 0f 61 3c 3a 77                 - Min.a<:w
 4030  4e 75 6d 42 75 74 74 6f                 - NumButto
 4038  6e 73 09 61 38 3a 77 5a                 - ns.a8:wZ
 4040  6d 61 78 09 61 34 3a 77                 - max.a4:w
 4048  5a 6d 69 6e 09 61 30 3a                 - Zmin.a0:
 4050  77 59 6d 61 78 09 61 2c                 - wYmax.a,
 4058  3a 77 59 6d 69 6e 09 61                 - :wYmin.a
 4060  28 3a 77 58 6d 61 78 09                 - (:wXmax.
 4068  61 24 3a 77 58 6d 69 6e                 - a$:wXmin
 4070  0c 61 04 83 92 73 7a 50                 - .a...szP
 4078  6e 61 6d 65 08 61 02 1c                 - name.a..
 4080  77 50 69 64 08 61 00 1c                 - wPid.a..
 4088  77 4d 69 64                             - wMid

No disassembly errors

------------------------------------------------------------

Segment: $$TYPES  BYTE USE16  0000002b bytes  
 0000  10 12 01 83 95 74 61 67                 - .....tag
 0008  4a 4f 59 43 41 50 53 41                 - JOYCAPSA
 0010  0d 12 00 83 96 4a 4f 59                 - .....JOY
 0018  43 41 50 53 41 0c 12 00                 - CAPSA...
 0020  83 97 4a 4f 59 43 41 50                 - ..JOYCAP
 0028  53 02 14                                - S..

No disassembly errors

------------------------------------------------------------

Segment: $$TYPES  BYTE USE16  00000567 bytes  
 0000  03 00 01 00 18 00 fa 02                 - ........
 0008  01 00 7f 00 18 00 b9 03                 - ........
 0010  01 00 97 00 18 00 11 04                 - ........
 0018  01 00 34 00 00 00 1b 00                 - ..4.....
 0020  34 00 4b 00 60 00 78 00                 - 4.K.`.x.
 0028  8f 00 a3 00 bd 00 d6 00                 - ........
 0030  f0 00 05 01 1e 01 38 01                 - ......8.
 0038  50 01 6a 01 83 01 9b 01                 - P.j.....
 0040  b3 01 cb 01 e3 01 fd 01                 - ........
 0048  15 02 2f 02 4b 02 60 02                 - ../.K.`.
 0050  7a 02 91 02 a7 02 c1 02                 - z.......
 0058  da 02 ef 02 07 03 20 03                 - ...... .
 0060  38 03 52 03 6a 03 83 03                 - 8.R.j...
 0068  98 03 af 03 c8 03 df 03                 - ........
 0070  f7 03 10 04 24 04 44 04                 - ....$.D.
 0078  60 04 78 04 8f 04 a3 04                 - `.x.....
 0080  b4 04 c7 04 44 3a 5c 77                 - ....D:\w
 0088  69 70 65 73 72 63 5c 57                 - ipesrc\W
 0090  49 4e 39 35 5c 77 69 6e                 - IN95\win
 0098  5c 77 69 6e 2e 63 00 64                 - \win.c.d
 00a0  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 00a8  5c 48 5c 4e 54 5c 77 69                 - \H\NT\wi
 00b0  6e 64 6f 77 73 2e 68 00                 - ndows.h.
 00b8  64 3a 5c 77 61 74 63 6f                 - d:\watco
 00c0  6d 5c 48 5c 4e 54 5c 65                 - m\H\NT\e
 00c8  78 63 70 74 2e 68 00 64                 - xcpt.h.d
 00d0  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 00d8  5c 48 5c 73 74 64 61 72                 - \H\stdar
 00e0  67 2e 68 00 64 3a 5c 77                 - g.h.d:\w
 00e8  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 00f0  4e 54 5c 77 69 6e 64 65                 - NT\winde
 00f8  66 2e 68 00 64 3a 5c 77                 - f.h.d:\w
 0100  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 0108  4e 54 5c 77 69 6e 6e 74                 - NT\winnt
 0110  2e 68 00 64 3a 5c 77 61                 - .h.d:\wa
 0118  74 63 6f 6d 5c 48 5c 63                 - tcom\H\c
 0120  74 79 70 65 2e 68 00 64                 - type.h.d
 0128  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0130  5c 48 5c 4e 54 5c 70 73                 - \H\NT\ps
 0138  68 70 61 63 6b 34 2e 68                 - hpack4.h
 0140  00 64 3a 5c 77 61 74 63                 - .d:\watc
 0148  6f 6d 5c 48 5c 4e 54 5c                 - om\H\NT\
 0150  70 6f 70 70 61 63 6b 2e                 - poppack.
 0158  68 00 64 3a 5c 77 61 74                 - h.d:\wat
 0160  63 6f 6d 5c 48 5c 4e 54                 - com\H\NT
 0168  5c 70 73 68 70 61 63 6b                 - \pshpack
 0170  31 2e 68 00 64 3a 5c 77                 - 1.h.d:\w
 0178  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 0180  73 74 72 69 6e 67 2e 68                 - string.h
 0188  00 64 3a 5c 77 61 74 63                 - .d:\watc
 0190  6f 6d 5c 48 5c 4e 54 5c                 - om\H\NT\
 0198  77 69 6e 62 61 73 65 2e                 - winbase.
 01a0  68 00 64 3a 5c 77 61 74                 - h.d:\wat
 01a8  63 6f 6d 5c 48 5c 4e 54                 - com\H\NT
 01b0  5c 77 69 6e 65 72 72 6f                 - \winerro
 01b8  72 2e 68 00 64 3a 5c 77                 - r.h.d:\w
 01c0  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 01c8  4e 54 5c 77 69 6e 67 64                 - NT\wingd
 01d0  69 2e 68 00 64 3a 5c 77                 - i.h.d:\w
 01d8  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 01e0  4e 54 5c 70 73 68 70 61                 - NT\pshpa
 01e8  63 6b 32 2e 68 00 64 3a                 - ck2.h.d:
 01f0  5c 77 61 74 63 6f 6d 5c                 - \watcom\
 01f8  48 5c 4e 54 5c 77 69 6e                 - H\NT\win
 0200  75 73 65 72 2e 68 00 64                 - user.h.d
 0208  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0210  5c 48 5c 4e 54 5c 77 69                 - \H\NT\wi
 0218  6e 6e 6c 73 2e 68 00 64                 - nnls.h.d
 0220  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0228  5c 48 5c 4e 54 5c 77 69                 - \H\NT\wi
 0230  6e 63 6f 6e 2e 68 00 64                 - ncon.h.d
 0238  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0240  5c 48 5c 4e 54 5c 77 69                 - \H\NT\wi
 0248  6e 76 65 72 2e 68 00 64                 - nver.h.d
 0250  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0258  5c 48 5c 4e 54 5c 77 69                 - \H\NT\wi
 0260  6e 72 65 67 2e 68 00 64                 - nreg.h.d
 0268  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0270  5c 48 5c 4e 54 5c 77 69                 - \H\NT\wi
 0278  6e 6e 65 74 77 6b 2e 68                 - nnetwk.h
 0280  00 64 3a 5c 77 61 74 63                 - .d:\watc
 0288  6f 6d 5c 48 5c 4e 54 5c                 - om\H\NT\
 0290  77 69 6e 73 76 63 2e 68                 - winsvc.h
 0298  00 64 3a 5c 77 61 74 63                 - .d:\watc
 02a0  6f 6d 5c 48 5c 4e 54 5c                 - om\H\NT\
 02a8  77 69 6e 64 6f 77 73 78                 - windowsx
 02b0  2e 68 00 63 3a 5c 6d 73                 - .h.c:\ms
 02b8  64 65 76 5c 69 6e 63 6c                 - dev\incl
 02c0  75 64 65 5c 6d 6d 73 79                 - ude\mmsy
 02c8  73 74 65 6d 2e 68 00 64                 - stem.h.d
 02d0  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 02d8  5c 48 5c 4e 54 5c 76 66                 - \H\NT\vf
 02e0  77 2e 68 00 64 3a 5c 77                 - w.h.d:\w
 02e8  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 02f0  4e 54 5c 70 73 68 70 61                 - NT\pshpa
 02f8  63 6b 38 2e 68 00 64 3a                 - ck8.h.d:
 0300  5c 77 61 74 63 6f 6d 5c                 - \watcom\
 0308  48 5c 4e 54 5c 6d 6d 72                 - H\NT\mmr
 0310  65 67 2e 68 00 64 3a 5c                 - eg.h.d:\
 0318  77 61 74 63 6f 6d 5c 48                 - watcom\H
 0320  5c 4e 54 5c 6f 6c 65 32                 - \NT\ole2
 0328  2e 68 00 64 3a 5c 77 61                 - .h.d:\wa
 0330  74 63 6f 6d 5c 48 5c 4e                 - tcom\H\N
 0338  54 5c 6f 62 6a 65 72 72                 - T\objerr
 0340  6f 72 2e 68 00 64 3a 5c                 - or.h.d:\
 0348  77 61 74 63 6f 6d 5c 48                 - watcom\H
 0350  5c 4e 54 5c 6f 62 6a 62                 - \NT\objb
 0358  61 73 65 2e 68 00 64 3a                 - ase.h.d:
 0360  5c 77 61 74 63 6f 6d 5c                 - \watcom\
 0368  48 5c 4e 54 5c 72 70 63                 - H\NT\rpc
 0370  2e 68 00 64 3a 5c 77 61                 - .h.d:\wa
 0378  74 63 6f 6d 5c 48 5c 4e                 - tcom\H\N
 0380  54 5c 72 70 63 64 63 65                 - T\rpcdce
 0388  2e 68 00 64 3a 5c 77 61                 - .h.d:\wa
 0390  74 63 6f 6d 5c 48 5c 4e                 - tcom\H\N
 0398  54 5c 72 70 63 64 63 65                 - T\rpcdce
 03a0  70 2e 68 00 64 3a 5c 77                 - p.h.d:\w
 03a8  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 03b0  4e 54 5c 72 70 63 6e 73                 - NT\rpcns
 03b8  69 2e 68 00 64 3a 5c 77                 - i.h.d:\w
 03c0  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 03c8  4e 54 5c 72 70 63 6e 74                 - NT\rpcnt
 03d0  65 72 72 2e 68 00 64 3a                 - err.h.d:
 03d8  5c 77 61 74 63 6f 6d 5c                 - \watcom\
 03e0  48 5c 4e 54 5c 72 70 63                 - H\NT\rpc
 03e8  6e 64 72 2e 68 00 64 3a                 - ndr.h.d:
 03f0  5c 77 61 74 63 6f 6d 5c                 - \watcom\
 03f8  48 5c 4e 54 5c 72 70 63                 - H\NT\rpc
 0400  6e 73 69 70 2e 68 00 64                 - nsip.h.d
 0408  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0410  5c 48 5c 73 74 64 6c 69                 - \H\stdli
 0418  62 2e 68 00 64 3a 5c 77                 - b.h.d:\w
 0420  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 0428  4e 54 5c 63 67 75 69 64                 - NT\cguid
 0430  2e 68 00 64 3a 5c 77 61                 - .h.d:\wa
 0438  74 63 6f 6d 5c 48 5c 4e                 - tcom\H\N
 0440  54 5c 6f 6c 65 61 75 74                 - T\oleaut
 0448  6f 2e 68 00 64 3a 5c 77                 - o.h.d:\w
 0450  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 0458  4e 54 5c 6d 73 61 63 6d                 - NT\msacm
 0460  2e 68 00 64 3a 5c 77 61                 - .h.d:\wa
 0468  74 63 6f 6d 5c 48 5c 4e                 - tcom\H\N
 0470  54 5c 6d 63 69 61 76 69                 - T\mciavi
 0478  2e 68 00 63 3a 5c 33 64                 - .h.c:\3d
 0480  70 64 6b 5c 73 64 6b 5c                 - pdk\sdk\
 0488  69 6e 63 5c 64 64 72 61                 - inc\ddra
 0490  77 2e 68 00 64 3a 5c 77                 - w.h.d:\w
 0498  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 04a0  73 74 64 69 6f 2e 68 00                 - stdio.h.
 04a8  44 3a 5c 77 69 70 65 73                 - D:\wipes
 04b0  72 63 5c 57 49 4e 39 35                 - rc\WIN95
 04b8  5c 77 69 6e 5c 72 65 73                 - \win\res
 04c0  6f 75 72 63 65 2e 68 00                 - ource.h.
 04c8  44 3a 5c 77 69 70 65 73                 - D:\wipes
 04d0  72 63 5c 57 49 4e 39 35                 - rc\WIN95
 04d8  5c 77 69 6e 5c 77 69 6e                 - \win\win
 04e0  68 2e 68 00 64 3a 5c 77                 - h.h.d:\w
 04e8  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 04f0  73 79 73 5c 74 79 70 65                 - sys\type
 04f8  73 2e 68 00 64 3a 5c 77                 - s.h.d:\w
 0500  61 74 63 6f 6d 5c 48 5c                 - atcom\H\
 0508  73 79 73 5c 73 74 61 74                 - sys\stat
 0510  2e 68 00 64 3a 5c 77 61                 - .h.d:\wa
 0518  74 63 6f 6d 5c 48 5c 66                 - tcom\H\f
 0520  63 6e 74 6c 2e 68 00 64                 - cntl.h.d
 0528  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0530  5c 48 5c 69 6f 2e 68 00                 - \H\io.h.
 0538  64 3a 5c 77 61 74 63 6f                 - d:\watco
 0540  6d 5c 48 5c 6d 61 74 68                 - m\H\math
 0548  2e 68 00 44 3a 5c 77 69                 - .h.D:\wi
 0550  70 65 73 72 63 5c 57 49                 - pesrc\WI
 0558  4e 39 35 5c 61 74 69 33                 - N95\ati3
 0560  64 63 69 66 2e 68 00                    - dcif.h.

No disassembly errors

------------------------------------------------------------
