
Module: D:\WipeSrc\WIN95\andyy\pdenv.c
Group: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: _TEXT  PARA USE32  0000020a bytes  

#define _SIZE_T

#include <dos.h>
#include <mem.h>
#include	<i86.h>
#include	<graph.h>

#include "common.h"
#include "..\jeda\cgl.h"
#include "pcgraph.h"

extern short game_stat;

#define	INTERACTIVE			0
#define	ATTRACT				1

int curvidmode = 0xff;				/*don't care what mode we're coming from*/
CLIP vidclip;
CLIP curclip;
CLIP curclipS;	// jed
short	width, height, widthBytes;
unsigned actStart, visStart;
short 	olddispy;

char	*j_buff;

unsigned long	_SCAddress;
unsigned long	_SCSize;

extern	char	halfx;	// Jed
extern	char	halfy;	// etc.
extern	float	halfxf;
extern	float	halfyf;

extern	int		inattract;	 		//jed
extern	int		mode;				//jed
extern	char	inmenu;				//jed
extern	char	Reallyinmenu; 		// DLS
extern	char	*background_buffer;
extern	char 	*CurBuffer;

extern int	WinPitch;
extern int	WinWidth;
extern int	WinHeight;
extern int	WinHeightX2;



extern void Scopy();
#pragma aux Scopy=						\
		"mov	eax,_SCAddress"	\
		"mov	edi,0a0000h"		\
		"mov	esi,eax"				\
		"mov	ecx,_SCSize"		\
		"rep movsd"					\
		modify [eax ebx ecx edx esi edi];

extern void Sclear();
#pragma aux Sclear=							\
		"mov	ebx,_SCAddress"		\
		"mov	edi,ebx"					\
		"mov	ecx,_SCSize"			\
		"xor	eax,eax"					\
		"rep	stosd"					\
		modify [eax ebx ecx edx esi edi];


DISPENV *PutDispEnv(DISPENV *env)
{
	extern short BG_Colour;


 0000  53                PutDispEnv_     push    ebx
 0001  52                                push    edx
 0002  55                                push    ebp
 0003  89 e5                             mov     ebp,esp
 0005  89 c2                             mov     edx,eax

	curvidmode = env->disp.w;

#ifdef DOS_VERSION
#ifdef	WIPEOUTPC
	if (env->disp.y != olddispy)
	{
		GSwap();
		if (inmenu==1 || Reallyinmenu==1)
		{
			memcpy(CurBuffer,&(background_buffer[0]),320*200);

		}
		else
		{
			ClearBuf(BG_Colour);
		}
	}
#else
	if (env->disp.y != olddispy)
		{
		GSwap();
		if (game_stat > 1)
			ClearGameBuf(BG_Colour);
		else
			ClearBuf(BG_Colour);
		}
#endif
#else //Assume Win '95
#ifdef	WIPEOUTPC
 0007  8b 40 02                          mov     eax,+2H[eax]
 000a  c1 f8 10                          sar     eax,10H
 000d  66 8b 1d 00 00 00 
       00                                mov     bx,_olddispy
 0014  a3 00 00 00 00                    mov     _curvidmode,eax

	if (env->disp.y != olddispy)
	{
 0019  66 3b 5a 02                       cmp     bx,+2H[edx]
 001d  74 25                             je      L3

		DDSwap();


 001f  e8 00 00 00 00                    call    DDSwap_

		if (inmenu==1 || Reallyinmenu==1)
		{
 0024  80 3d 00 00 00 00 
       01                                cmp     byte ptr _inmenu,01H
 002b  74 09                             je      L1
 002d  80 3d 00 00 00 00 
       01                                cmp     byte ptr _Reallyinmenu,01H
 0034  75 07                             jne     L2

			BltClearToScreen();
		}
 0036  e8 00 00 00 00    L1              call    BltClearToScreen_

		else
		{
 003b  eb 07                             jmp     L3

			WinClearScreen(0);
		}
	}
#else
	if (env->disp.y != olddispy)
		{
			DDSwap();

		   while (LockBackBuffer())
	   		{					  
	   		ProcessMessages(); 	//loop until we can get that back buffer
			;
	   		}
			if (game_stat > 1)
		    	memset(CurBuffer,BG_Colour,320*200);
			else
		    	memset(CurBuffer,0,320*200);
	    	UnlockBackBuffer();	//Finished drawing
		}
#endif
#endif
 003d  31 c0             L2              xor     eax,eax
 003f  e8 00 00 00 00                    call    WinClearScreen_

	olddispy = env->disp.y;

	return(env);
 0044  66 8b 42 02       L3              mov     ax,+2H[edx]
 0048  66 a3 00 00 00 00                 mov     _olddispy,ax

}

 004e  89 d0                             mov     eax,edx
 0050  5d                                pop     ebp
 0051  5a                                pop     edx
 0052  5b                                pop     ebx
 0053  c3                                ret     

DRAWENV *PutDrawEnv(DRAWENV *env)
{
	int 			loop;
	long			*screen;


 0054  53                PutDrawEnv_     push    ebx
 0055  51                                push    ecx
 0056  52                                push    edx
 0057  56                                push    esi
 0058  57                                push    edi
 0059  55                                push    ebp
 005a  89 e5                             mov     ebp,esp
 005c  83 ec 0c                          sub     esp,0000000cH
 005f  89 c2                             mov     edx,eax

	curclip.tx = env->clip.x;
 0061  66 8b 00                          mov     ax,[eax]

	curclip.ty = (env->clip.y > 240) ? env->clip.y - 240 : env->clip.y;
 0064  66 8b 5a 02                       mov     bx,+2H[edx]
 0068  66 a3 00 00 00 00                 mov     _curclip,ax
 006e  66 81 fb f0 00                    cmp     bx,00f0H
 0073  7e 0c                             jle     L4
 0075  8b 02                             mov     eax,[edx]
 0077  c1 f8 10                          sar     eax,10H
 007a  2d f0 00 00 00                    sub     eax,000000f0H
 007f  eb 05                             jmp     L5
 0081  8b 02             L4              mov     eax,[edx]
 0083  c1 f8 10                          sar     eax,10H

	if (env->clip.y >= 240)
 0086  66 8b 4a 02       L5              mov     cx,+2H[edx]
 008a  66 a3 02 00 00 00                 mov     _curclip+2H,ax
 0090  66 81 f9 f0 00                    cmp     cx,00f0H
 0095  7c 10                             jl      L6

		curclip.ty = env->clip.y - 240;
 0097  89 c8                             mov     eax,ecx
 0099  81 e8 f0 00 00 00                 sub     eax,000000f0H
 009f  66 a3 02 00 00 00                 mov     _curclip+2H,ax

	else
 00a5  eb 07                             jmp     L7

		curclip.ty = env->clip.y;

 00a7  66 89 0d 02 00 00 
       00                L6              mov     _curclip+2H,cx

	curclip.w = env->clip.w;
 00ae  66 8b 42 04       L7              mov     ax,+4H[edx]
 00b2  66 a3 08 00 00 00                 mov     _curclip+8H,ax

	curclip.h = env->clip.h;


 00b8  66 8b 42 06                       mov     ax,+6H[edx]
 00bc  66 8b 35 08 00 00 
       00                                mov     si,_curclip+8H
 00c3  66 a3 0a 00 00 00                 mov     _curclip+0aH,ax

	curclip.bx = curclip.tx + curclip.w;
 00c9  66 a1 00 00 00 00                 mov     ax,_curclip
 00cf  01 f0                             add     eax,esi
 00d1  66 8b 3d 0a 00 00 
       00                                mov     di,_curclip+0aH
 00d8  66 a3 04 00 00 00                 mov     _curclip+4H,ax

	curclip.by = curclip.ty + curclip.h;

 00de  66 a1 02 00 00 00                 mov     ax,_curclip+2H
 00e4  01 f8                             add     eax,edi
 00e6  66 a3 06 00 00 00                 mov     _curclip+6H,ax

	curclipS.tx = 0;
	curclipS.ty = 0;
 00ec  31 c0                             xor     eax,eax
 00ee  66 a3 00 00 00 00                 mov     _curclipS,ax
 00f4  66 a3 02 00 00 00                 mov     _curclipS+2H,ax

	curclipS.bx = WinWidth - 1;
 00fa  66 a1 00 00 00 00                 mov     ax,_WinWidth
 0100  48                                dec     eax
 0101  66 a3 04 00 00 00                 mov     _curclipS+4H,ax

	curclipS.by = WinHeight -1;
 0107  66 a1 00 00 00 00                 mov     ax,_WinHeight
 010d  48                                dec     eax
 010e  66 a3 06 00 00 00                 mov     _curclipS+6H,ax

	curclipS.w = WinWidth -1;
 0114  66 a1 04 00 00 00                 mov     ax,_curclipS+4H
 011a  66 a3 08 00 00 00                 mov     _curclipS+8H,ax

	curclipS.h = WinHeight -1;

	curclip.tx = 0;
	curclip.ty = 0;
 0120  66 a1 06 00 00 00                 mov     ax,_curclipS+6H
 0126  31 db                             xor     ebx,ebx
 0128  66 a3 0a 00 00 00                 mov     _curclipS+0aH,ax

	curclip.bx = WinWidth -1;
 012e  66 a1 08 00 00 00                 mov     ax,_curclipS+8H
 0134  31 c9                             xor     ecx,ecx
 0136  66 a3 04 00 00 00                 mov     _curclip+4H,ax

	curclip.by = WinHeight -1 ;
 013c  66 a1 0a 00 00 00                 mov     ax,_curclipS+0aH
 0142  66 89 0d 00 00 00 
       00                                mov     _curclip,cx
 0149  66 a3 06 00 00 00                 mov     _curclip+6H,ax

	curclip.w = WinWidth -1;
 014f  66 a1 04 00 00 00                 mov     ax,_curclip+4H
 0155  66 89 1d 02 00 00 
       00                                mov     _curclip+2H,bx
 015c  66 a3 08 00 00 00                 mov     _curclip+8H,ax

	curclip.h = WinHeight -1;

 0162  66 a1 06 00 00 00                 mov     ax,_curclip+6H

	if (inattract==0)		//jed
	{
 0168  8b 1d 00 00 00 00                 mov     ebx,_inattract
 016e  66 a3 0a 00 00 00                 mov     _curclip+0aH,ax
 0174  85 db                             test    ebx,ebx
 0176  0f 85 83 00 00 00                 jne     L9

		if (inmenu!=1)		//jed
		{
 017c  80 3d 00 00 00 00 
       01                                cmp     byte ptr _inmenu,01H
 0183  0f 84 76 00 00 00                 je      L9

			if (halfx!=0)	//jed
			{
 0189  80 3d 00 00 00 00 
       00                                cmp     byte ptr _halfx,00H
 0190  74 32                             je      L8

				if ((320/halfxf)<320)
				{
 0192  d9 05 00 00 00 00                 fld     dword ptr L10
 0198  d9 c0                             fld     st(0)
 019a  d8 35 00 00 00 00                 fdiv    dword ptr _halfxf
 01a0  d9 55 f8                          fst     dword ptr -8H[ebp]
 01a3  de d9                             fcompp  st(1)
 01a5  df e0                             fstsw   ax
 01a7  9e                                sahf    
 01a8  73 1a                             jae     L8

					curclip.bx = 320/(halfxf);	//jed
 01aa  d9 45 f8                          fld     dword ptr -8H[ebp]
 01ad  e8 00 00 00 00                    call    __CHP
 01b2  db 5d fc                          fistp   dword ptr -4H[ebp]
 01b5  8b 45 fc                          mov     eax,-4H[ebp]

					curclip.w = 320/(halfxf);	//jed
				}
			}
 01b8  66 a3 08 00 00 00                 mov     _curclip+8H,ax
 01be  66 a3 04 00 00 00                 mov     _curclip+4H,ax

			if (halfy!=0)			//jed
			{
 01c4  80 3d 00 00 00 00 
       00                L8              cmp     byte ptr _halfy,00H
 01cb  74 32                             je      L9

				if ((240/halfyf)<240)
				{
 01cd  d9 05 04 00 00 00                 fld     dword ptr L11
 01d3  d9 c0                             fld     st(0)
 01d5  d8 35 00 00 00 00                 fdiv    dword ptr _halfyf
 01db  d9 55 f4                          fst     dword ptr -0cH[ebp]
 01de  de d9                             fcompp  st(1)
 01e0  df e0                             fstsw   ax
 01e2  9e                                sahf    
 01e3  73 1a                             jae     L9

					curclip.by = 240/(halfyf);	//jed
 01e5  d9 45 f4                          fld     dword ptr -0cH[ebp]
 01e8  e8 00 00 00 00                    call    __CHP
 01ed  db 5d fc                          fistp   dword ptr -4H[ebp]
 01f0  8b 45 fc                          mov     eax,-4H[ebp]

					curclip.h = 240/(halfyf);	//jed
				}
			}		
		}	
	}									//jed
	return(env);
 01f3  66 a3 0a 00 00 00                 mov     _curclip+0aH,ax
 01f9  66 a3 06 00 00 00                 mov     _curclip+6H,ax

}


 01ff  89 d0             L9              mov     eax,edx
 0201  89 ec                             mov     esp,ebp
 0203  5d                                pop     ebp
 0204  5f                                pop     edi
 0205  5e                                pop     esi
 0206  5a                                pop     edx
 0207  59                                pop     ecx
 0208  5b                                pop     ebx
 0209  c3                                ret     

No disassembly errors

------------------------------------------------------------

Segment: CONST  DWORD USE32  00000008 bytes  
 0000  00 00 a0 43             L10             - ...C
 0004  00 00 70 43             L11             - ..pC

No disassembly errors

------------------------------------------------------------

Segment: _DATA  DWORD USE32  00000004 bytes  
 0000  ff 00 00 00             _curvidmode     - ....

No disassembly errors

------------------------------------------------------------

Segment: _BSS  DWORD USE32  00000040 bytes  

No disassembly errors

------------------------------------------------------------

Segment: $$SYMBOLS  BYTE USE16  00000125 bytes  
 0000  10 12                                   - ..
 0002  00 00 00 00 00 00                       DP      _curclip
 0008  26 63 75 72 63 6c 69 70                 - &curclip
 0010  13 12                                   - ..
 0012  00 00 00 00 00 00                       DP      __SCAddress
 0018  10 5f 53 43 41 64 64 72                 - ._SCAddr
 0020  65 73 73 0f 12                          - ess..
 0025  00 00 00 00 00 00                       DP      _j_buff
 002b  15 6a 5f 62 75 66 66 10                 - .j_buff.
 0033  12                                      - .
 0034  00 00 00 00 00 00                       DP      __SCSize
 003a  10 5f 53 43 53 69 7a 65                 - ._SCSize
 0042  11 12                                   - ..
 0044  00 00 00 00 00 00                       DP      _curclipS
 004a  26 63 75 72 63 6c 69 70                 - &curclip
 0052  53 11 12                                - S..
 0055  00 00 00 00 00 00                       DP      _visStart
 005b  09 76 69 73 53 74 61 72                 - .visStar
 0063  74 11 12                                - t..
 0066  00 00 00 00 00 00                       DP      _actStart
 006c  09 61 63 74 53 74 61 72                 - .actStar
 0074  74 10 12                                - t..
 0077  00 00 00 00 00 00                       DP      _vidclip
 007d  26 76 69 64 63 6c 69 70                 - &vidclip
 0085  13 12                                   - ..
 0087  00 00 00 00 00 00                       DP      _curvidmode
 008d  08 63 75 72 76 69 64 6d                 - .curvidm
 0095  6f 64 65 11 12                          - ode..
 009a  00 00 00 00 00 00                       DP      _olddispy
 00a0  06 6f 6c 64 64 69 73 70                 - .olddisp
 00a8  79 13 12                                - y..
 00ab  00 00 00 00 00 00                       DP      _widthBytes
 00b1  06 77 69 64 74 68 42 79                 - .widthBy
 00b9  74 65 73 0e 12                          - tes..
 00be  00 00 00 00 00 00                       DP      _width
 00c4  06 77 69 64 74 68 0f 12                 - .width..
 00cc  00 00 00 00 00 00                       DP      _height
 00d2  06 68 65 69 67 68 74 08                 - .height.
 00da  32                                      - 2
 00db  00 00 00 00 00 00                       DP      PutDispEnv_
 00e1  22 24 00 00 00 00 54 00                 - "$....T.
 00e9  00 00 00 00 05 04 0c 00                 - ........
 00f1  00 00 2c 30 1c 01 30 1c                 - ..,0..0.
 00f9  50 75 74 44 69 73 70 45                 - PutDispE
 0101  6e 76 22 24 54 00 00 00                 - nv"$T...
 0109  b6 01 00 00 00 00 0b 09                 - ........
 0111  18 00 00 00 34 30 1c 01                 - ....40..
 0119  30 1c 50 75 74 44 72 61                 - 0.PutDra
 0121  77 45 6e 76                             - wEnv

No disassembly errors

------------------------------------------------------------

Segment: $$TYPES  BYTE USE16  00000298 bytes  
 0000  06 13 98 02 00 00 08 11                 - ........
 0008  73 74 72 75 63 74 07 11                 - struct..
 0010  75 6e 69 6f 6e 06 11 65                 - union..e
 0018  6e 75 6d 0e 10 00 73 69                 - num...si
 0020  67 6e 65 64 20 63 68 61                 - gned cha
 0028  72 10 10 10 75 6e 73 69                 - r...unsi
 0030  67 6e 65 64 20 63 68 61                 - gned cha
 0038  72 08 10 01 73 68 6f 72                 - r...shor
 0040  74 11 10 11 75 6e 73 69                 - t...unsi
 0048  67 6e 65 64 20 73 68 6f                 - gned sho
 0050  72 74 06 10 03 69 6e 74                 - rt...int
 0058  0f 10 13 75 6e 73 69 67                 - ...unsig
 0060  6e 65 64 20 69 6e 74 0d                 - ned int.
 0068  12 00 08 70 74 72 64 69                 - ...ptrdi
 0070  66 66 5f 74 0b 12 00 07                 - ff_t....
 0078  77 63 68 61 72 5f 74 0a                 - wchar_t.
 0080  12 00 09 73 69 7a 65 5f                 - ...size_
 0088  74 0a 12 00 05 75 5f 63                 - t....u_c
 0090  68 61 72 0b 12 00 07 75                 - har....u
 0098  5f 73 68 6f 72 74 09 12                 - _short..
 00a0  00 09 75 5f 69 6e 74 10                 - ..u_int.
 00a8  10 13 75 6e 73 69 67 6e                 - ..unsign
 00b0  65 64 20 6c 6f 6e 67 0a                 - ed long.
 00b8  12 00 10 75 5f 6c 6f 6e                 - ...u_lon
 00c0  67 0a 12 00 07 75 73 68                 - g....ush
 00c8  6f 72 74 07 10 03 6c 6f                 - ort...lo
 00d0  6e 67 0b 12 00 13 64 61                 - ng....da
 00d8  64 64 72 5f 74 03 46 05                 - ddr_t.F.
 00e0  0b 12 00 15 63 61 64 64                 - ....cadd
 00e8  72 5f 74 03 46 13 0b 12                 - r_t.F...
 00f0  00 17 71 61 64 64 72 5f                 - ..qaddr_
 00f8  74 09 12 00 11 69 6e 6f                 - t....ino
 0100  5f 74 0b 12 00 13 73 77                 - _t....sw
 0108  62 6c 6b 5f 74 0a 12 00                 - blk_t...
 0110  13 74 69 6d 65 5f 74 09                 - .time_t.
 0118  12 00 06 64 65 76 5f 74                 - ...dev_t
 0120  09 12 00 13 6f 66 66 5f                 - ....off_
 0128  74 09 12 00 0e 75 69 64                 - t....uid
 0130  5f 74 09 12 00 0e 67 69                 - _t....gi
 0138  64 5f 74 08 12 00 13 54                 - d_t....T
 0140  49 4d 45 07 10 30 76 6f                 - IME..0vo
 0148  69 64 03 46 21 0b 12 00                 - id.F!...
 0150  22 43 47 4c 5f 50 54 52                 - "CGL_PTR
 0158  08 60 06 00 0c 00 00 00                 - .`......
 0160  05 61 0a 06 68 05 61 08                 - .a..h.a.
 0168  06 77 06 61 06 06 62 79                 - .w.a..by
 0170  06 61 04 06 62 78 06 61                 - .a..bx.a
 0178  02 06 74 79 06 61 00 06                 - ..ty.a..
 0180  74 78 09 12 01 24 5f 63                 - tx...$_c
 0188  6c 69 70 08 12 00 25 43                 - lip...%C
 0190  4c 49 50 08 60 04 00 08                 - LIP.`...
 0198  00 00 00 05 61 06 06 68                 - ....a..h
 01a0  05 61 04 06 77 05 61 02                 - .a..w.a.
 01a8  06 79 05 61 00 06 78 08                 - .y.a..x.
 01b0  12 00 27 52 45 43 54 08                 - ..'RECT.
 01b8  60 05 00 14 00 00 00 08                 - `.......
 01c0  61 12 0e 70 61 64 30 0b                 - a..pad0.
 01c8  61 11 0d 69 73 72 67 62                 - a..isrgb
 01d0  32 34 0b 61 10 0d 69 73                 - 24.a..is
 01d8  69 6e 74 65 72 0a 61 08                 - inter.a.
 01e0  28 73 63 72 65 65 6e 08                 - (screen.
 01e8  61 00 28 64 69 73 70 0b                 - a.(disp.
 01f0  12 00 29 44 49 53 50 45                 - ..)DISPE
 01f8  4e 56 03 46 2a 05 72 2b                 - NV.F*.r+
 0200  01 2b 04 20 01 06 04 20                 - .+. ... 
 0208  0e 11 08 60 02 00 40 00                 - ...`..@.
 0210  00 00 08 61 04 2e 63 6f                 - ...a..co
 0218  64 65 07 61 00 11 74 61                 - de.a..ta
 0220  67 0a 12 00 2f 44 52 5f                 - g.../DR_
 0228  45 4e 56 08 60 0b 00 5c                 - ENV.`..\
 0230  00 00 00 0a 61 1c 30 64                 - ....a.0d
 0238  72 5f 65 6e 76 06 61 1b                 - r_env.a.
 0240  0d 62 30 06 61 1a 0d 67                 - .b0.a..g
 0248  30 06 61 19 0d 72 30 08                 - 0.a..r0.
 0250  61 18 0d 69 73 62 67 07                 - a..isbg.
 0258  61 17 0d 64 66 65 07 61                 - a..dfe.a
 0260  16 0d 64 74 64 09 61 14                 - ..dtd.a.
 0268  0e 74 70 61 67 65 06 61                 - .tpage.a
 0270  0c 28 74 77 07 61 08 2d                 - .(tw.a.-
 0278  6f 66 73 08 61 00 28 63                 - ofs.a.(c
 0280  6c 69 70 0b 12 00 31 44                 - lip...1D
 0288  52 41 57 45 4e 56 03 46                 - RAWENV.F
 0290  32 05 72 33 01 33 02 14                 - 2.r3.3..

No disassembly errors

------------------------------------------------------------

Segment: $$TYPES  BYTE USE16  000001c8 bytes  
 0000  00 00 10 00 00 00 1f 00                 - ........
 0008  31 00 43 00 55 00 6a 00                 - 1.C.U.j.
 0010  7e 00 9e 00 bb 00 d5 00                 - ~.......
 0018  ef 00 09 01 25 01 45 01                 - ....%.E.
 0020  64 01 83 01 44 3a 5c 57                 - d...D:\W
 0028  69 70 65 53 72 63 5c 57                 - ipeSrc\W
 0030  49 4e 39 35 5c 61 6e 64                 - IN95\and
 0038  79 79 5c 70 64 65 6e 76                 - yy\pdenv
 0040  2e 63 00 64 3a 5c 77 61                 - .c.d:\wa
 0048  74 63 6f 6d 5c 48 5c 64                 - tcom\H\d
 0050  6f 73 2e 68 00 64 3a 5c                 - os.h.d:\
 0058  77 61 74 63 6f 6d 5c 48                 - watcom\H
 0060  5c 69 38 36 2e 68 00 64                 - \i86.h.d
 0068  3a 5c 77 61 74 63 6f 6d                 - :\watcom
 0070  5c 48 5c 6d 65 6d 2e 68                 - \H\mem.h
 0078  00 64 3a 5c 77 61 74 63                 - .d:\watc
 0080  6f 6d 5c 48 5c 73 74 72                 - om\H\str
 0088  69 6e 67 2e 68 00 64 3a                 - ing.h.d:
 0090  5c 77 61 74 63 6f 6d 5c                 - \watcom\
 0098  48 5c 67 72 61 70 68 2e                 - H\graph.
 00a0  68 00 44 3a 5c 57 69 70                 - h.D:\Wip
 00a8  65 53 72 63 5c 57 49 4e                 - eSrc\WIN
 00b0  39 35 5c 61 6e 64 79 79                 - 95\andyy
 00b8  5c 63 6f 6d 6d 6f 6e 2e                 - \common.
 00c0  68 00 63 3a 5c 70 73 78                 - h.c:\psx
 00c8  32 36 5c 69 6e 63 6c 75                 - 26\inclu
 00d0  64 65 5c 73 79 73 5c 74                 - de\sys\t
 00d8  79 70 65 73 2e 68 00 63                 - ypes.h.c
 00e0  3a 5c 70 73 78 32 36 5c                 - :\psx26\
 00e8  69 6e 63 6c 75 64 65 5c                 - include\
 00f0  6c 69 62 65 74 63 2e 68                 - libetc.h
 00f8  00 63 3a 5c 70 73 78 32                 - .c:\psx2
 0100  36 5c 69 6e 63 6c 75 64                 - 6\includ
 0108  65 5c 6c 69 62 67 74 65                 - e\libgte
 0110  2e 68 00 63 3a 5c 70 73                 - .h.c:\ps
 0118  78 32 36 5c 69 6e 63 6c                 - x26\incl
 0120  75 64 65 5c 6c 69 62 67                 - ude\libg
 0128  70 75 2e 68 00 44 3a 5c                 - pu.h.D:\
 0130  57 69 70 65 53 72 63 5c                 - WipeSrc\
 0138  57 49 4e 39 35 5c 6a 65                 - WIN95\je
 0140  64 61 5c 63 67 6c 2e 68                 - da\cgl.h
 0148  00 44 3a 5c 57 69 70 65                 - .D:\Wipe
 0150  53 72 63 5c 57 49 4e 39                 - Src\WIN9
 0158  35 5c 6a 65 64 61 5c 63                 - 5\jeda\c
 0160  67 6c 74 79 70 65 2e 68                 - gltype.h
 0168  00 44 3a 5c 57 69 70 65                 - .D:\Wipe
 0170  53 72 63 5c 57 49 4e 39                 - Src\WIN9
 0178  35 5c 6a 65 64 61 5c 63                 - 5\jeda\c
 0180  67 6c 65 72 72 2e 68 00                 - glerr.h.
 0188  44 3a 5c 57 69 70 65 53                 - D:\WipeS
 0190  72 63 5c 57 49 4e 39 35                 - rc\WIN95
 0198  5c 6a 65 64 61 5c 63 67                 - \jeda\cg
 01a0  6c 64 65 66 2e 68 00 44                 - ldef.h.D
 01a8  3a 5c 57 69 70 65 53 72                 - :\WipeSr
 01b0  63 5c 57 49 4e 39 35 5c                 - c\WIN95\
 01b8  61 6e 64 79 79 5c 70 63                 - andyy\pc
 01c0  67 72 61 70 68 2e 68 00                 - graph.h.

No disassembly errors

------------------------------------------------------------
